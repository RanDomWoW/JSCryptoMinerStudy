<!DOCTYPE HTML>
<!--
  Read Only by HTML5 UP
  html5up.net | @n33co
  Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
  <head>
    <title>Daniel Kennett - Home</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="/atom.xml" rel="alternate" title="Daniel Kennett" type="application/atom+xml">

    <link rel="stylesheet" href="/styles/skel.css" />
    <link rel="stylesheet" href="/styles/style.css" />
    <link rel="stylesheet" media="screen and (max-width: 2000px)" href="/styles/style-large.css" />
    <link rel="stylesheet" media="screen and (max-width: 1024px)" href="/styles/style-medium.css" />
    <link rel="stylesheet" media="screen and (max-width: 736px)" href="/styles/style-small.css" />
    <link rel="stylesheet" media="screen and (max-width: 480px)" href="/styles/style-xsmall.css" />
    <!--[if lte IE 8]><link rel="stylesheet" href="css/ie/v8.css" /><![endif]-->
    <link rel="stylesheet" href="/styles/ikenndac.css" />
    <link rel="stylesheet" href="/styles/fontello.css"><!--[if IE 7]><link rel="stylesheet" href="/styles/fontello-ie7.css"><![endif]-->

    

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    
      ga('create', 'UA-41293098-1', 'auto');
      ga('send', 'pageview');
    
    </script>
  </head>
  <body>
    <div id="wrapper">

      <!-- Header -->
        <section id="header">
          <header>
            <span class="image avatar"><a href="/"><img src="/pictures/avatars/avatar-red.jpg" alt="" /></a></span>
            <h1 id="logo"><a href="/">Daniel Kennett</a></h1>
            <p>Cocoa developer, Lego builder, model railway owner.</p>
            <p>iKenndac on most services you'd care to mention.</p>
            <ul class="icons">
              <li><a href="http://twitter.com/iKenndac" class="icon icon-twitter"><span class="label">Twitter</span></a></li>
              <li><a href="http://github.com/iKenndac" class="icon icon-github-circled"><span class="label">Github</span></a></li>
              <li><a href="http://stackoverflow.com/users/29005/ikenndac" class="icon icon-stackoverflow"><span class="label">Stack Overflow</span></a></li>
              <li><a href="http://500px.com/iKenndac" class="icon icon-picture"><span class="label">500px</span></a></li>
            </ul>

          </header>
          <nav id="nav">
            <ul>
              
                <li><a href="/blog/archives/">Archive</a></li>
              
                <li><a href="/about/">More About Me</a></li>
              
                <li><a href="/apps/">My Apps</a></li>
              
                <li class="hide-on-mobile"><a href="/atom.xml">RSS</a></li>
            </ul>
          </nav>
        </section>

      <!-- Main -->
        <div id="main">
          <section id="one">
            <div class="container">
              

<section>
	<header class="major">
		<h4>January 16th, 2017</h4>
		<h2><a href="/blog/2017/01/excuse-me-sir-can-i-rattle-your-macbooks/">Excuse Me Sir, But Can I Rattle Your MacBooks?</a></h2>
	</header>
	<article>
		
<p>Back in 2001 I had a G4 Cube that I loved dearly, and a then state-of-the-art iPod that plugged into one of its two Firewire ports. Unfortunately, that Cube loved to fry its Firewire ports — several trips to the repair centre meant walking miles to my friend’s house so I could rip my CDs to his second-generation iMac and then onto my iPod.</p>

<p>Since then, I’ve had great luck with Apple products. Apart from a PowerMac G5 that couldn’t survive having Coke poured into it and the odd iPhone that didn’t like being smashed into the ground, I’ve had 15 years of mostly trouble-free experience with Apple hardware.</p>

<p>Unfortunately, this has come to an end with the 2016 MacBook Pro. Now, I’m not normally one to complain about stuff on my blog, but I feel the journey I’m still undergoing with this machine is kind of fascinating — and an interesting insight into what happens when good customer service and poor products clash. Also, this is by <em>far</em> the worst experience I’ve had with Apple hardware in my life.</p>

<h2 id="macbook-pro-1--2-a-normal-doa-experience">MacBook Pro #1 &amp; #2: A Normal DoA Experience</h2>

<p>In December, my wife borrowed my MacBook Pro for something and called to me: “Did it always make this noise?”, demonstrating a metallic, springy-sounding noise when she placed it onto a table. We shall call this metallic, springy-sounding noise <em>Rattle A</em>, which will be important later.</p>

<p>No, it did not.</p>

<p>A call to Apple later and a new MacBook Pro (<em>MBP #2</em>) is being assembled and shipped to me. Great! Unfortunately, since I ordered a machine with a custom spec, it’s coming all the way from China.  At the moment, it’s no big deal — the occasional DoA product is part of life.</p>

<div class="iframe-16x9-container">
<iframe class="iframe-16x9" src="https://www.youtube.com/embed/eZdzeZUYHBM?rel=0" frameborder="0" allowfullscreen=""></iframe>
</div>
<p><br><em>MBP #1’s rattle.</em></p>

<p>A couple of weeks later, the new machine arrived at my door. I unbox it, and give it a little side-to-side shake. Immediately out of the box, it makes a plasticky clonking sound which you can feel through your hands. We shall call this plasticky clonking sound <em>Rattle B</em>.</p>

<p>After some bitching on Twitter, another call to Apple and about 45 minutes on hold gets me put through to some senior department. Very sorry for my bad luck, a second replacement (<em>MBP #3</em>) is being assembled and shipped to me, again from China. The agent agreed that it’d be silly to transfer my data to <em>MBP #2</em> when <em>MBP #3</em> is on its way, so a return for <em>MBP #2</em> is arranged. The next day, it leaves my house.</p>

<div class="iframe-16x9-container">
<iframe class="iframe-16x9" src="https://www.youtube.com/embed/jkBdevHHqwc?rel=0" frameborder="0" allowfullscreen=""></iframe>
</div>
<p><br><em>MBP #2’s rattle.</em></p>

<h2 id="macbook-pro-3-excuse-me-sir-but-can-i-rattle-your-macbooks">MacBook Pro #3: Excuse Me Sir, But Can I Rattle Your MacBooks?</h2>

<p>This is where it starts to get a bit abnormal.</p>

<p><em>MBP #3</em> turns up, and immediately out of the box it exhibits <em>Rattle B</em>. I call Apple again, and eventually get to a nice lady in after-sales who’s very sympathetic to my bad luck, and is <em>adamant</em> that they’ll keep sending me MacBook Pros until I get one that doesn’t rattle.</p>

<p>However, I’ve been doing some of my own research and I’m starting to think that <em>Rattle B</em> is a systemic problem. I explain my (entirely anecdotal) thinking and we come up with a plan: I’ll go to the Apple Store and see if any machines on display there exhibit the same problem. If not, I’m just having terrible luck, right?</p>

<p>So, at opening time on Saturday morning I walk into the Apple Store and try to explain to the employees there that:</p>

<ol>
  <li>I want to shake their MacBook Pros.</li>
  <li>I’m not crazy.</li>
</ol>

<p>After surprisingly little convincing, they let me go ahead. In the eight MacBook Pros I tried, two of them exhibited <em>Rattle B</em>.</p>

<div class="iframe-16x9-container">
<iframe class="iframe-16x9" src="https://www.youtube.com/embed/h6bcLSE2O08?rel=0" frameborder="0" allowfullscreen=""></iframe>
</div>
<p><br><em>A rattling MacBook Pro at the Apple Store.</em></p>

<p>I return home resigned to having a MacBook Pro with <em>Rattle B</em>. Annoying, but I don’t tend to shake my MacBook Pro much, so it’s not a huge issue to live with. I take the machine out of the box, unwrap the plastic and set it down on the table.</p>

<p><em>Clank.</em></p>

<p>Praying that I’m hallucinating, I pick it up and set it down again.</p>

<p><em>Clank.</em></p>

<p><em>MBP #3</em> exhibits both <em>Rattle A</em> <strong>and</strong> <em>Rattle B</em>. Superb. Time for a Twitter rant.</p>

<div class="iframe-16x9-container">
<iframe class="iframe-16x9" src="https://www.youtube.com/embed/nhSMMVjO4Qw?rel=0" frameborder="0" allowfullscreen=""></iframe>
</div>
<p><br><em>MBP #3’s rattle.</em></p>

<h2 id="macbook-pro-4-maybe-i-am-crazy">MacBook Pro #4: Maybe I <em>Am</em> Crazy!</h2>

<p>At 10am this morning, the phone rings with the promised callback from the lady I spoke to on Friday.</p>

<p>After explaining my results at the Apple Store and the fact <em>MBP #3</em> is the worst one so far, we come up with another plan, and we see what happens when your customer service greatly outclasses the quality of your product:</p>

<p><em>MBP #4</em> is being assembled and shipped, again from China. However, this time it’s being shipped to the Apple Store, where I can inspect it and <strong>hand it straight off for repair</strong> if it continues to show these problems.</p>

<p>I’d like to repeat that last part, for emphasis: <strong>An agreed plan with customer service is for the product to be shipped to a store with the expectation that it’ll immediately go in for repair.</strong></p>

<h2 id="what-next">What Next?</h2>

<p>If this were almost any other company (or if I were new to Apple), I’d have given up at <em>MBP #2</em>. However, Apple have 15 years of good experience in the bank, as well as very good customer service trying their hardest to make this current issue right.</p>

<p>However, all that goodwill is <em>gone</em> — <em>MBP #4</em> will be their last chance. The Apple Store is a 1hr 30min round trip from my home, something I’ll probably have to do <em>twice</em> — once to find out <em>MBP #4</em> rattles too, and again to collect it after it’s been repaired.</p>

<p>Here’s a timeline, for brevity:</p>

<table>
<tr>
<td><strong>2016-12-17</strong></td>
<td>First call to Apple about <em>MBP #1</em>.</td>
</tr>
<tr>
<td><strong>2017-01-02</strong></td>
<td>
<em>MBP #2</em> arrives.</td>
</tr>
<tr>
<td><strong>2017-01-02</strong></td>
<td>Call to Apple about <em>MBP #2</em>.</td>
</tr>
<tr>
<td><strong>2017-01-04</strong></td>
<td>
<em>MBP #2</em> is collected for return to Apple, <em>MBP #3</em> is ordered. </td>
</tr>
<tr>
<td><strong>2017-01-09</strong></td>
<td>
<em>MBP #3</em> leaves China.</td>
</tr>
<tr>
<td><strong>2017-01-13</strong></td>
<td>
<em>MBP #3</em> arrives.</td>
</tr>
<tr>
<td><strong>2017-01-14</strong></td>
<td>"Excuse me, but can I rattle your MacBooks?" at the Apple Store.</td>
</tr>
<tr>
<td><strong>2017-01-16</strong></td>
<td>Call Apple, <em>MBP #4</em> is ordered for delivery to the Apple Store.</td>
</tr>
</table>

<p>Some reaction I’ve received on Twitter is questioning why I care so much about a rattle. This machine cost 32,595 SEK (~$3,650 USD, ~£2,990 GBP, ~€3,400 EUR), and for that <em>ludicrous</em> amount of money, I expect a computer with all of its components attached together properly. I don’t think that’s unfair, and so far Apple customer support agrees with me.</p>

<p>The interesting question comes if <em>MBP #4</em> still rattles. While I’m fortunate that this machine isn’t (yet) my primary computer, I have a business to run and unfortunately I’m a Mac and iOS developer, which basically requires that I own a Mac. I <em>really</em> want this MacBook Pro to replace my iMac so I can have a more portable work machine, but if Apple can’t sell me a computer I’m happy with — what then?</p>

<p>In the words of the greats: I’m not angry, I’m just disappointed. Maybe I should develop for Windows Phone instead.</p>

		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>October 28th, 2016</h4>
		<h2><a href="/blog/2016/10/launching-cascable-2/">Launching Cascable 2.0</a></h2>
	</header>
	<article>
		
<p><em>Cascable</em> is the app I’ve been working on since early 2013 — firstly as a side project, then as a full-time endeavour starting mid-2015. You can read more about this journey in my <em>Secret Diary of a Side Project</em> series of posts, the first one  of which <a href="http://ikennd.ac/blog/2014/12/secret-diary-of-a-side-project-intro/">can be found here</a>.</p>

<hr>

<p>“It won’t be as stressful as the 1.0 release”, I lied to my myself as much as my wife when she asked me how I was feeling about launching Cascable 2.0 the next day. I’d woken up a couple of times during the night in the past couple of weeks gnashing my teeth, causing a big chip in one of my teeth.</p>

<p>The truth is, the 2.0 launch ended up being much more stressful than 1.0, although I genuinely didn’t see it coming. Cascable 1.0 was a product of a side project — it shipped a few months after I quit Spotify, and a lot of that post-Spotify time was working on ancillary details like the website, marketing, documentation, and so on.</p>

<h2 id="getting-to-20">Getting to 2.0</h2>

<p>Version 2.0  shipped on August 11th, 2016 and was the result of nine solid months of work, starting in October 2015 with this tweet:</p>

<blockquote class="twitter-tweet" data-lang="en-gb">
<p lang="en" dir="ltr">Autumn is in full swing and it’s exciting times here at Cascable as the road to multi-manufacturer support begins! <a href="https://t.co/NFFAmyyghs">pic.twitter.com/NFFAmyyghs</a></p>— Cascable (@CascableApp) <a href="https://twitter.com/CascableApp/status/657541898995937281">23 October 2015</a>
</blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>Nine months is a <em>very</em> long time to be working on a single update, and it can be really damaging to your self esteem, particularly when working alone. Roughly 300 tickets were solved between starting 2.0 and shipping it. That’s 300 issues. 300 things wrong with my code. 300 times myself or someone else had opened up JIRA and created a ticket to describe something was missing or broken with my code.</p>

<p>Of course, this is part and parcel of being a developer. However, you typically have other developers working alongside you to share the burden and a reasonable release cadence that (hopefully) provides real-world evidence that your work is good enough for production.</p>

<p>In the weeks before the launch, I didn’t <em>feel</em> stressed at all — we’d had a very long TestFlight period with over 100 testers over all the different camera brands Cascable now supports and all of the major issues were ironed out. I’d enforced a feature-freeze at the beginning of June, and a ship-to-App Store date of July 29th. That’s two months in feature freeze and two weeks between uploading to the App Store and releasing — plenty of time to iron out any issues before shipping, and plenty up time to iron out any App Store problems before releasing.</p>

<p><em>Plus</em>, this time I had help in the form of <a href="http://ikennd.ac/blog/2016/04/secret-diary-of-a-side-project-part-7/">Tim</a>, who’d been diligently working away at the website for weeks — this time, it was finished by the time I’d hit code freeze and better than ever - much more content and some lovely extras like a nicely made video.</p>

<p>Everything should be wonderful, right? Lots of time to iron out bugs, help with shipping and over 100 people using the app for a few months should make this launch something to be excited about.</p>

<p>However, those nine months of JIRA tickets had taken their toll. My self-confidence was incredibly low, and I was scared to death that we’d launch and some stupid mistake I’d made would cause the app to crash for everyone, ruining the app’s (and my) credibility. Cascable would be a laughing stock, and I’d have to go find a real job again.</p>

<p>On top of this, with 2.0 Cascable would be transitioning from paid-up-front to free with In-App Purchases to unlock the good stuff. It’s a move we needed to make — a $25 up-front payment is an impossible sell on mobile — but a huge risk of doing this (and well-known enough that it was the first thing every developer friend I have mentioned when I told them of this plan) is receiving a massive amount of support email from free users and unfair one-star reviews.</p>

<p><em>“You realise that you’ll <strong>immediately</strong> get people downloading it without looking then leaving you one-star reviews because it isn’t Instagram right?”</em>, said one.</p>

<p>As the Cascable launch approached, my belief in my own abilities was at an all-time low, and I was expecting to be buried in an avalanche of one-star reviews and email.</p>

<h2 id="launch-day">Launch Day</h2>

<p>Launch day came, and the app was sitting in iTunes Connect, waiting for me to click the “Release” button. An attempt at having it happen automatically was stymied by a problem with iTunes Connect that resulted in hours on the phone with iTunes Connect support, which ended up making the problem worse. In the end, I had to yank the previous version from sale a few days before 2.0’s launch. D’oh!</p>

<p class="center"><img src="/pictures/releasing-cascable-2/iTCHistory.png" width="350">  <br>
<em>This is not the history of a smooth release process!</em></p>

<p>I clicked the “Release” button, and braced myself for a horrible week.</p>

<blockquote class="twitter-tweet" data-lang="en-gb">
<p lang="en" dir="ltr">Launching an app is crazy - what a week! On Wednesday I was having to forcefully take breaks to keep the stress levels under control. 😰</p>— Daniel Kennett (@iKenndac) <a href="https://twitter.com/iKenndac/status/764185288411414528">12 August 2016</a>
</blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>But, the avalanche never came. Instead, we got great coverage, a big pile of downloads and some <a href="http://www.photographyblog.com/reviews/cascable_review/">really positive reviews</a>.</p>

<p>Looking back, I consider it a very successful launch. Neither my wildest dreams nor my deepest fears came true — the switch to freemium didn’t make me an overnight millionaire, but we didn’t get buried by one-star reviews and support email either.</p>

<p>It’s amazing what shipping code can do to your self-esteem. After a couple of quick point-releases to fix some crashes that did crop up — all of them reasonably rare, thankfully — Cascable’s crash-free sessions metric is in the very high-90% range (on the day of writing, it’s at 98.5%). Of course that can be improved, but between the subjective reviews and this objective data, I’ve  completely regained my confidence that I’m able to write and ship a decent product. Hooray!</p>

<blockquote class="twitter-tweet" data-conversation="none" data-lang="en-gb">
<p lang="en" dir="ltr">Two days later, I’m bowing out the week with a great review and coverage on one of the largest photography sites there is. Much better! 😀</p>— Daniel Kennett (@iKenndac) <a href="https://twitter.com/iKenndac/status/764185315942727680">12 August 2016</a>
</blockquote>
<script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>It’s worth noting again what an incredible difference having someone helping out on stuff that isn’t code. I don’t think Tim would be upset with me if I said that he’s by no means a professional website builder, nor is he a professional video editor. Yet, thanks to him, I had a burden lifted from my shoulders and Cascable’s launch had that extra layer of quality to it that I’ve never been able to achieve on my own.</p>

<p>So, with all of that self-congratulation out of the way, let’s look at some cold, hard data!</p>

<h2 id="how-did-the-launch-actually-go">How did the launch actually go?</h2>

<p>The established launch pattern for iOS apps is to have a huge launch spike that tails off fairly sharply. This “long tail” is a tough thing to endure, and <a href="https://medium.com/swlh/how-our-app-went-from-20-000-day-to-2-day-in-revenue-d6892a2801bf#.6b3r10ffq">can be fatal</a>.</p>

<p>Our spike followed normal trends. Here’s our downloads over the first few days of 2.0:</p>

<p class="center"><img src="/pictures/releasing-cascable-2/Cascable20Downloads.png" width="725">  <br>
<em>Downloads during the launch.</em></p>

<p>However, if we compare that to the number of purchases over the same period, a couple of things stick out:</p>

<p class="center"><img src="/pictures/releasing-cascable-2/Cascable20Sales.png" width="725">  <br>
<em>Purchases during the launch.</em></p>

<p>First, the spike for purchases was a couple of days <em>after</em> the spike for downloads. Second, the purchases graph doesn’t lose quite as much momentum as the downloads graph, which (along with our retention data) shows that a decent proportion of that download spike was from drive-by users — people who had seen the app as part of the initial media push, tried it once, and never used it again.</p>

<h2 id="was-switching-to-freemium-the-right-thing-to-do">Was switching to Freemium the right thing to do?</h2>

<p>I believe that Cascable is a pro-level tool and should command a pro-level price — particularly for a niche app in the physical photography sector. Yes, $25 is a <em>huge</em> barrier to entry on mobile, and our 1.x sales show that. However, the problem we need to solve is showing users that the app is worth the price it commands.</p>

<p>At the most basic level, yes, it was the right thing to do. Cascable is earning more money than it was than when it was paid-up-front. However, there’s a lot more to it than that!</p>

<p>For several months, my plan was to have the app work with basic features for free, and implement a single In-App Purchase for $25 to unlock the whole app. However, after some discussion, we ended up shipping <em>four</em> separate In-App Purchases, as follows:</p>

<table class="alt">
<tr>
<th>Product</th>
<th>Cost</th>
<th>Description</th>
</tr>
<tr>
<td>Cascable Pro: Photo Management</td>
<td>$10</td>
<td>Support for RAW images, bulk copying, filtering and searching, image editing.</td>
</tr>
<tr>
<td>Cascable Pro: Remote Control</td>
<td>$10</td>
<td>Powerful camera remote control and shot automation tools.</td>
</tr>
<tr>
<td>Cascable Pro: Photo Management</td>
<td>$10</td>
<td>Support for RAW images, bulk copying, filtering and searching, image editing.</td>
</tr>
<tr>
<td>Cascable Pro: Night Mode</td>
<td>$10</td>
<td>A dark theme for the app.</td>
</tr>
<tr>
<td>Cascable Pro: Full Bundle</td>
<td>$25</td>
<td>All of the above.</td>
</tr>
</table>

<p>The biggest detractor to this is development complexity. Different parts of the app need different feature checks, and we need to communicate to the user what they need to purchase to get which feature in a non-confusing way. Indeed, the latter point was worrying me up until launch due to the fact we decided that creating a <a href="https://cascable.se/help/pro-features/">support article with a big-ass table</a> to explain it all was necessary.</p>

<p>In practice, though, I think the user experience isn’t too bad. We’ve only had one support ticket from someone who’d accidentally bought the wrong thing so far, which makes us hopeful it isn’t too confusing for our users.</p>

<p>The upside to all this added complexity is that we get to reduce sticker-shock (“$25?! Screw that!”) and up-sell to the user. We’re trying to avoid the aggressive sales pitch if at all possible, and don’t start asking for money until the user wants to do something that isn’t free.</p>

<p>Here’s a typical flow. Feel free to <a href="https://itunes.apple.com/us/app/cascable-wifi-camera-remote/id974193500?ls=1&amp;mt=8&amp;at=1010l4JU&amp;ct=homepage">download Cascable</a> and follow along!</p>

<p>Here’s a typical screenshot of Cascable running as a free user. Notice there’s absolutely no indication they haven’t paid for the app.</p>

<p class="center tight-border"><img src="/pictures/releasing-cascable-2/1-PhotosStart.jpg" width="768"></p>

<p>Here, the user has encountered a feature that requires them to part with some money. At this point, we don’t pop up a store or otherwise interrupt their flow:</p>

<p class="center tight-border"><img src="/pictures/releasing-cascable-2/2-PhotosProPrompt.jpg" width="768"></p>

<p>In some places, particularly in lists, we place a “Pro” button in place of the switch or button that would invoke a particular feature:</p>

<p class="center tight-border"><img src="/pictures/releasing-cascable-2/2a-NightModeProPrompt.png" width="438"></p>

<p>If they tap on a “Pro” button or a “More Information…” button, they’ll get the In-App Purchase store showing the cheapest available purchase that’ll unlock the feature they’re trying to work with, along with a little video previewing everything that purchase will unlock. The video is shipped as part of the app bundle, so there’s no waiting for it to download.</p>

<p class="center"><img src="/pictures/releasing-cascable-2/3-StoreIndividual.png" width="571"></p>

<p>If the user attempts to purchase the presented In-App Purchase, they’ll be presented with this dialog:</p>

<p class="center"><img src="/pictures/releasing-cascable-2/4-StoreBundlePrompt.png" width="571"></p>

<p>This is where we get a chance upsell the user to the more expensive (but better value for money) purchase. If the user taps “View Pro Bundle”, the purchase will be cancelled and they’ll be shown the video and description of the bundle. Otherwise, the purchase of the requested item will continue.</p>

<p class="center"><img src="/pictures/releasing-cascable-2/5-StoreBundle.jpg" width="571"></p>

<p>Finally, once the user has purchased the unlock for a feature, the original message is replaced with controls for the feature itself.</p>

<p class="center tight-border"><img src="/pictures/releasing-cascable-2/6-PhotosProFeature.jpg" width="768"></p>

<p class="center tight-border"><img src="/pictures/releasing-cascable-2/6a-NightModeProFeature.png" width="438"></p>

<p>As you can see, even though payment and billing logic is provided by the App Store infrastructure, there’s still a <em>ton</em> of work to do if you want to provide a somewhat rich In-App Purchase experience for your users. Which you <em>do</em> want to do — that little “Give me money!” button is difficult for users to tap!</p>

<p>A little extra touch we added to give some extra gratification to our paid users is a friendly, heart-adorned version of Colin (our unofficial name for the anthropomorphised camera mascot used throughout the app):</p>

<p class="center tight-border"><img src="/pictures/releasing-cascable-2/7-Purchases.png" width="438"></p>

<p>This version of Colin is slightly more whimsical than the tone of the rest of the app, but I really love this version of him, and he’s reserved just for our paid users.</p>

<h2 id="so-does-our-store-work">So, does our store work?</h2>

<p>The following data is taken from a five week period during that long tail after the big spike.</p>

<p>Over the five-week period this data is from, our average conversion ratio from viewing the store to making a purchase was 21%. This compares to a conversion ratio of 4% from all users of the app to making a purchase.</p>

<p>I’m pretty happy with 21% — less so with the 4%. What this data shows us is that we need to get people more interested in the expanded feature set — enough to go into the store to take a more detailed look.</p>

<p>Overall, our paid:free ratio is about 20%, which I don’t feel is too bad.</p>

<h2 id="does-our-upsell-work">Does our upsell work?</h2>

<p>This graph shows the <em>Entry Point</em> to the In-App Purchase store within Cascable - that is, the product they first see when the store is shown to them. Once they’re in the store, users can swipe left and right to browse all the available options, but the data for that isn’t graphed here. As you can see, the entry point is <em>reasonably</em> evenly spread between the three individual $10 unlocks, with the $25 bundle coming in last. This is because the only way to see the bundle first is to navigate to the “Purchases” item in Settings and tap the button next to the bundle. The rest are encountered when using the app normally.</p>

<p class="center"><img src="/pictures/releasing-cascable-2/StoreShown.png" width="680">  <br>
<em>In-App Store entry point by product over five weeks during our long tail.</em></p>

<p>This next graph shows the products purchased over the same period. As you can see, the Full Bundle <em>significantly</em> outperforms the other products, despite the fact that it’s more expensive and isn’t the product the user is shown first in most circumstances.</p>

<p class="center"><img src="/pictures/releasing-cascable-2/ProductPurchased.png" width="680">  <br>
<em>In-App Store purchases by product over five weeks during our long tail.</em></p>

<p>I think it’s a reasonable conclusion that the upsell is having a positive effect on sales. However, we don’t have enough data to say whether or not this is definitely the best approach. For that, we’d need to compare our upsell to the following scenarios:</p>

<p>1) What if we still had four separate In-App Purchases at the same prices, but without the upsell from the $10 ones?</p>

<p>2) What if there was only one $25 In-App Purchase as originally planned?</p>

<p>However, my <em>feeling</em> is that we’ve hit a nice middle-ground. With no upsell, I’m reasonably confident that we’d sell less $25 bundles, and with no $10 options I think the sticker-shock factor would be too high.</p>

<h2 id="what-next">What Next?</h2>

<p>Cascable 2.0 shipped in August , followed by an immediate feature update alongside the iOS 10 launch in September. In its current state, I consider the “2.x” app reasonably feature complete — engineering-wise, my tasks are to keep up-to-date with new cameras from our supported manufacturers, keep on top of customer requests, and regroup for Cascable 3.0.</p>

<p>The aim is to make Cascable AB a sustainable business. While it’s not quite there yet, we’re certainly on the right track and the income graph is creeping up towards the expenditure graph.</p>

<p>As tempting as it is to dive into Cascable 3.0 right now, I’ve been looking at nothing but that app for a year now, and I’m risking burnout. Instead, over the next few months we’re taking a radical departure from my own historic approach (SOLVE PROBLEMS BY PROGRAMMING!! <em>codes harder</em>) and will be putting effort into marketing the iOS app we have.</p>

<p>For me, it’s time to take a step back, hand Cascable’s reigns over to Tim for a while, and focus on the long-term future of the company in the form of other engineering projects. This way, I can come back to Cascable 3.0 fresh and excited about the new features.</p>

<p>With that in mind, this next couple of months will be focused on the goal of making this company sustainable in the long term in ways that aren’t adding new features to the existing app — it’s feature complete enough that adding individual features won’t make that critical difference.</p>

<h3 id="first-approach-get-more-people-to-use-cascable">First Approach: Get more people to use Cascable</h3>

<p>First, we’re experimenting with various advertising streams to get users into the app and using it. So far, we’re only in the first phase of this and are trying out Facebook, Instagram, Twitter, Google AdWords and App Store Search ads. It’s too early to draw any conclusions from this, but it seems that App Store Search ads are significantly outperforming the rest.</p>

<p>Additionally, we’re reaching out to photography websites, magazines, camera manufacturers, etc to try and get coverage. It’s difficult for a tiny and unknown company like ours to wriggle through the noise, but we’re starting to get noticed.</p>

<h3 id="second-approach-get-more-people-to-convert-to-paid-users">Second Approach: Get more people to convert to paid users</h3>

<p>We recently shipped an update to Cascable that adds an “Announcements Channel”. This allows us to publish content online for presentation to users inside the app. We’re trying to make this visible to the user without being annoying — no push notifications, no noises, no alerts. Hopefully the little unread indicator won’t be too abrasive to our users.</p>

<p class="center tight-border"><img src="/pictures/releasing-cascable-2/Announcements.png" width="1024"></p>

<p>Our intent is to publish high-quality content roughly once per week at most, mainly in the form of previewing and linking to articles on our website about how to get the most out of Cascable’s features — for example, a detailed article on using Cascable’s automation tools to make time-lapse videos, long exposures of the night sky, and so on.</p>

<p>The channel allows us to present different content depending on what purchases the user has made, so for paid users we can say “Here’s how to make this awesome stuff with what you  already have!” and free users we can frame it more towards “Look at the cool stuff you could do if you had this!”.</p>

<p>The intention is to increase conversion from free users while at the same time increasing the happiness of our paid users by helping them get the most of what they have. This will be a tricky line to walk well, though.</p>

<h3 id="third-approach-dont-put-all-our-eggs-in-the-ios-basket">Third Approach: Don’t put all our eggs in the iOS basket</h3>

<p>Relying on one platform for income gives me the heebie-jeebies, particularly when that platform is one as difficult to reliably make money on as iOS.</p>

<p>In a <a href="http://ikennd.ac/blog/2015/01/secret-diary-of-a-side-project-part-2/">previous <em>Secret Diary of a Side Project</em> post</a>, I discussed how I’ve been taking the extra effort to make sure our core camera connection stack is architected in a manner that keeps it cleanly separated from the Cascable app and fully functional on macOS as well as iOS.</p>

<p>With Tim working on the first two approaches, I’ve started working on branching out to macOS. Thanks to a fully functional core library, I’ve been able to cash in on this past work and start <em>incredibly</em> quickly — I built a functional (and reasonably polished) prototype of a Mac app in less than two weeks, and we’re aiming to ship it by early December.</p>

<p class="center no-border"><img src="/pictures/releasing-cascable-2/TransferPrototype.png" width="700"></p>

<h2 id="conclusion">Conclusion</h2>

<p>As much as being an overnight success is the dream, it doesn’t tend to happen like that in the real world. After a couple of years of hard work, it looks like a sustainable business is starting to get within reach — Cascable’s progress looks remarkably similar to that of my (mostly) successful foray into indie development all the way back in 2005. In fact, Cascable is doing <em>better</em> than my old company was after the same time period, but back then I lived in my parents’ house basically for free — Cascable has a much higher bar to reach in order to be considered “successful”!</p>

<p>As always, feel free to get in touch with me <a href="http://twitter.com/iKenndac">on Twitter</a>.</p>


		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>April 12th, 2016</h4>
		<h2><a href="/blog/2016/04/secret-diary-of-a-side-project-part-7/">Secret Diary of a Side Project: No Longer Alone</a></h2>
	</header>
	<article>
		
<p><em><strong>Secret Diary of a Side Project</strong> is a series of posts documenting my journey as I take an app from side project to a full-fledged for-pay product. You can find the introduction to this series of posts <a href="/blog/2014/12/secret-diary-of-a-side-project-intro/">here</a>.</em></p>

<hr>

<p>It’s been nearly ten months since <a href="/blog/2015/06/secret-diary-of-a-side-project-part-6/">my last Secret Diary post</a>, and since then I’ve been doing nothing but keeping my head down and plodding along:</p>

<ul>
  <li>First, I shipped a couple of bugfix updates.</li>
  <li>In August 2015, I released a feature update that added some powerful new stuff.</li>
  <li>In September 2015, I released a feature update that added support for some new platform goodies — WatchOS 2 and iOS 9 split screen.</li>
</ul>

<p>Other than a couple of minor bugfix updates, there’s been nothing new released since then. So, what’s going on?</p>

<h2 id="crossroads">Crossroads</h2>

<p>It was clear that in its current course, Cascable wasn’t going to be sustainable — a fact everyone (including myself) could see coming a mile away. A niche-level product with limited hardware support and a $25 upfront cost isn’t going to fly in today’s mobile world.</p>

<p>That said, the people who do buy Cascable seem to love it. I’ve had some <a href="http://dustinabbott.net/2015/11/killer-apps-cascable-wi-fi-camera-remote/">great reviews</a> and many lovely emails from happy users.</p>

<p>So, what to do? Obviously, moving to a free up-front business model and adding support for more cameras is what we do with the app (and is what I’ve been working on since December), but what about the company?</p>

<p>After a week or two of self-reflection and chatting with those close to me, it came down to the choice of spending my remaining budget in one of two ways:</p>

<ol>
  <li>
    <p>Carry on by my lonesome for three years.</p>
  </li>
  <li>
    <p>Hire someone for one year.</p>
  </li>
</ol>

<p>This was an interesting choice. Having the freedom to not have to care about income for three years (until mid-2019!) is an opportunity I don’t think I’ll have access to again in my lifetime. However, it <em>severely</em> limits the pace at which I can move and the things I can achieve with Cascable, particularly when taking into account my skill set. In the end, the choice was easy.</p>

<h2 id="employee-1">Employee #1</h2>

<p>As of last week, Cascable has employees! <a href="http://twitter.com/timkitchener/">Tim</a> is Cascable’s <em>Head of Stuff That Isn’t Programming</em>, and is responsible for doing all the things I’m either bad at or don’t have time for — all the things that are actually <em>super</em> important for a successful business (marketing, product direction, pricing, etc etc).</p>

<p>Now, the thing with employees is that you no longer have the freedom to fuck around. They’re people who depend on you to have your shit together enough to run payroll and otherwise deal with the stuff that puts food on their table. In keeping with that theme, this will be the very last <em>Secret Diary</em> post I write - thinking about Cascable as a “side project” is completely inappropriate now other people are involved.</p>

<p>Thankfully, having Tim on board means that the weight is lifted from my own shoulders slightly, so I should be able to allow myself the time to write blog posts more often. Hooray!</p>


		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>January 3rd, 2016</h4>
		<h2><a href="/blog/2016/01/garmin-virb-xe-review-updated/">Garmin VIRB XE Review Updated</a></h2>
	</header>
	<article>
		
<p>Back in August 2015, I reviewed a new action camera on the market - the Garmin VIRB XE. I really liked it, and sold my GoPro cameras in favour of it. Since then, several software updates have come along, changing the experience  quite a lot — particularly if you use the data recording and display features.</p>

<p>As such, I’ve updated my review to reflect what the camera is like in early 2016. Spoiler: It’s better!</p>

<div class="video-container">
<video class="center" style="overflow:hidden; max-width: 640px;" autoplay="" loop="">
  <source src="/pictures/virb-review/gforces-compare.mp4" type="video/mp4"></source>
  Your browser does not support the video tag.
</video>
</div>
<p> </p>

<p><a href="/blog/2015/08/garmin-virb-xe-review/">You can find my full and updated review here</a>.</p>

		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>December 6th, 2015</h4>
		<h2><a href="/blog/2015/12/sprucing-up-indoor-training-with-simulated-power-data/">Sprucing Up Indoor Training with Simulated Power Data</a></h2>
	</header>
	<article>
		
<p>The clocks have gone back and the nights are closing in. Here in Sweden, it’s already dark by 3:30pm!</p>

<p>The dark, more than the cold, severely dampens my enthusiasm for cycling in the evenings after work — the lovely path along the edge of the lake becomes a harrowing edge over a black nothingness.</p>

<p>So, it’s time to bring the evening rides indoors. I’m not a fan of regular exercise bikes – you have to spend <em>silly</em> money to get a decent one, and then you get some weird geometry. I already have a <em>great</em> bike that’s been perfectly set up over a period of time to provide the correct geometry for my body. Why can’t I use that?</p>

<p>Thankfully, there are <em>stationary trainers</em> that let you do just that. I have a Kurt Kinetic <a href="https://kurtkinetic.com/products/kinetic-rock-and-roll-smart/">Rock and Roll Smart</a> stationary trainer — it has a built-in Bluetooth power meter so I can manage workouts on my phone, and is built to allow side-to-side motion of the bike. Not only does this simulate real riding better, it allows the lateral forces I put through the bike to be absorbed by the spring in the trainer and not my rear wheel’s axle and rear triangle, putting to rest fears of stressing parts of the bike that don’t normally take those sort of forces.</p>

<p class="center"><img src="/pictures/simulated-power/rock-and-roll.jpg" width="800"></p>

<p>Anyway! I’m all set up — this is gonna be just like riding outside!</p>

<p>…Oh.</p>

<p class="center"><img src="/pictures/simulated-power/view-no-video.jpg" width="800"></p>

<p>Well, that’s boring. Why don’t I record a video of my ride to play back while I’m training? And if I’m doing that… it’d be great if I can overlay some data so I can match my pacing to the ride on the video. I use a <a href="/blog/2015/08/garmin-virb-xe-review/">Garmin VIRB XE</a> camera, the software for which can import the data from my Garmin GPS to overlay my heart rate, speed, pedalling cadence and more over the video. This sounds perfect!</p>

<p>Unfortunately, this is where we hit a snag. The trainer I have has a “fluid” resistance unit, which ramps up resistance with speed — when I pedal fast in a high gear it’s difficult, and when I pedal slowly it’s easy. This sounds sensible enough until you realise that the hardest parts of my ride are up steep hills on off-road trails — I’m putting a ton of power down, but I’m travelling really quite slowly. This means that overlaying speed data onto my video is useless since the trainer is basically simulating a perfectly level road. What I need to overlay on my video is a readout of the actual <em>power</em> I’m putting out at any given moment.</p>

<p class="center"><img src="/pictures/simulated-power/horse-hill.jpg" width="800">  <br>
<em>I’m doing 5km/h here, but outputting nearly 300W. 5km/h on my trainer gives an almost negligible power output.</em></p>

<p>After a weekend of mucking around with several <em>horrible</em> looking programs, I finally managed to get a simulated-but-accurate-enough power figure into Garmin’s software, allowing me to overlay power output onto my video:</p>

<p class="center"><img src="/pictures/simulated-power/finished-video-framegrab.jpg"></p>

<p>Now when riding indoors I can put my iPad and iPhone on a music stand (make sure you get a sturdy one!) and reproduce my outdoor ride by matching my live power output on the trainer to the one displayed in the video.</p>

<p>I <em>love</em> this method of training. It gives me something to look at while riding, and because it’s realtime from <em>my</em> ride, I get great pacing — it’s on local trails I know and ride frequently, and when I need rest stops, I’m already stopping to rest on the video.</p>

<h2 id="producing-simulated-power-data">Producing Simulated Power Data</h2>

<p>So, how to we get that live power overlay?</p>

<p>The easiest option would be to buy an actual power meter for my bike. Most of them are designed for road bikes, and <em>all</em> of them are expensive — you’re looking at towards $1,000, which is a bit spendy for a project like this.</p>

<p>So, with that out, we need to simulate our power data. I use the popular site <a href="http://strava.com">Strava</a> to track my rides, and they provide a pretty decent-looking “simulated” power graph for each ride:</p>

<p class="center"><img src="/pictures/simulated-power/strava-estd-power.png" width="820"></p>

<p>Annoyingly, though, there’s absolutely no way to get this data <em>out</em> of Strava in any meaningful way, so that’s out. Garmin’s similar service, Garmin Connect, doesn’t produce this data at <em>all</em>, so that’s out too.</p>

<p>Looks like we’re going to have to do this manually!</p>

<h3 id="ingredients">Ingredients</h3>

<ul>
  <li>A video recording of a bike ride.</li>
  <li>Some recorded telemetry data from that same ride, such as from a GPS unit.</li>
  <li>
<a href="http://www.goldencheetah.org">GoldenCheetah</a>, an open-source data management application.</li>
  <li>
<a href="http://ikennd.ac/fitness-converter/">Fitness Converter</a>, a free application by yours truly for converting fitness files between formats.</li>
  <li>
<a href="http://www.garmin.com/en-US/shop/downloads/virb-edit">Garmin VIRB Edit</a>, a free video editor that can overlay data onto your video.</li>
</ul>

<h3 id="method">Method</h3>

<p>First, we’re going to load our recorded telemetry data (heart rate, speed, pedalling cadence, etc) from the GPS into <a href="http://www.goldencheetah.org">GoldenCheetah</a>, a piece of software for working this this sort of thing. Once imported, clicking the “Ride” tab should show graphs of your data:</p>

<p class="center no-border"><img src="/pictures/simulated-power/gc-original-data.png" width="976"></p>

<p><strong>Note</strong>: On the first launch, GoldenCheetah will ask you to set up a profile. You need to enter an accurate weight for you and your bike to get accurate power data.</p>

<p>Next, choose “Estimate Power Values…” from the Edit menu. Once you complete the process, you’ll see more graphs added to your data, including a “Power” graph. If you have other data to compare to, such as Strava’s Simulated Power graph, you can compare them, and if GoldenCheetah’s data is significantly wrong you can choose “Adjust Power Values…” from the Edit to move it all up or down.</p>

<p class="center no-border"><img src="/pictures/simulated-power/gc-with-power.png" width="976"></p>

<p>Finally, choose “Export…” from the Activity menu to export the file as a TCX file.</p>

<p>Unfortunately, we’re not quite there — Garmin’s software can’t import TCX files, so we need to convert our new file to the FIT format. The best pre-existing solution I could find for this was really quite terrible, so I ended up writing my own (as you do): <a href="http://ikennd.ac/fitness-converter/">Fitness Converter</a>.</p>

<p class="center no-border"><img src="/pictures/simulated-power/fitness-converter.png" width="773"></p>

<p>Once the data is in the FIT format, we can import it into VIRB Edit. Since the VIRB XE camera has GPS in it, it has the accuracy to automatically sync the data from my GPS unit (now with added power data!) perfectly. If you’re not in this position, you can manually sync your data file to the video.</p>

<p>…aaand, we’re done. You can now add your graphs and overlays as you wish using VIRB Edit. Since speed is completely irrelevant in this instance, I leave all that out and just have a single giant power bar — it’s easy to read when working out over a constantly changing number.</p>

<p>Happy training!</p>

<p class="center"><img src="/pictures/simulated-power/view-with-video.jpg" width="800"> <br>
<em>Next training spend: a bigger screen!</em></p>

		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>August 16th, 2015</h4>
		<h2><a href="/blog/2015/08/garmin-virb-xe-review/">Garmin VIRB XE for Automotive and Track Days: A First Impressions Review</a></h2>
	</header>
	<article>
		
<p><strong>Update January 2016:</strong> I’ve updated this review to reflect the camera and its software after a few months and a few software updates. Happily, it’s pretty much all positive. Parts of the review that are now incorrect are still here but <del>are struck through</del> so you can see what’s changed.</p>

<p><strong>Note:</strong> For the first part of this review, I’m going to ramble on a bit about my history with this sort of thing and why I’m <em>so</em> hopeful that the VIRB XE isn’t crappy for use on track days. If you don’t care, you can <a href="#virb-xe-review-start">scroll down a bit</a> to get to the real review.</p>

<h2 id="we-were-totally-ahead-of-the-times-man">We were totally ahead of the times, man!</h2>

<p>I’ve always loved cars and driving. As <em>soon</em> as I had a car more interesting than my Mum’s 1.2L Vauxhall Corsa (SXi!) I started going on track days. As my skills and enjoyment grew I wanted to record videos of my driving to show my friends and catalogue my improvement over time, so I started to record my track driving.</p>

<p>But! Without data, track driving videos are <em>boring</em>. Check out this <a href="https://www.youtube.com/watch?v=JOrR4EX8NuM">recent one of mine</a> — even if you’re a car nut, I bet you won’t make it through more than a lap or two before getting bored.</p>

<p>Back in 2007 I was bored of my dataless videos, and as part of my final year at university, I wrote a prototype Mac application to add graphical overlays to my track day videos. It was just a prototype, but it worked great and I was really proud of what I’d made — enough that it still gets a space in my <a href="/about/">abbreviated life history</a>.</p>

<p>However, while the software was ready, the hardware for <em>gathering</em> the data just wasn’t there. iPhones and iPads were just beginning to arrive, and the other smartphone platforms at the time weren’t quite suitable. In particular, the Windows Mobile devices used at the time didn’t have accurate enough clocks to reliably time the data, warranting a whole section in my dissertation discussing interpolating timestamps.</p>

<p>In 2007, no camera came close to the tiny action cameras of today (particularly in the consumer space) so I ended up using a HDV camcorder strapped into the car.</p>

<p class="center"><img src="/pictures/virb-review/mx5-camcorder.jpg"></p>

<p>For recording data from the car I used a reasonably high-end (in the consumer space) OBD to Serial dongle that was advertised as being “high speed”. It read data from the CAN bus of my car at roughly 5Hz, which meant if you wanted to record multiple properties at once, you rapidly lost nuance in your data.</p>

<p>Since there was nothing like the iPad back then, I ended up using a tablet PC designed for outdoor use - it had a digital pen for input, and a special display that was readable outdoors and terrible everywhere else. This thing ran full-blown Windows XP and cost a <em>fortune</em>.</p>

<p>I had well over £3,000/$4,500 worth of big, heavy equipment. Here’s an example of what all that would get you when combined with my prototype software:</p>

<div class="iframe-16x9-container">
<iframe class="iframe-16x9" src="https://www.youtube.com/embed/GKXdBraWnzI" frameborder="0" allowfullscreen=""></iframe>
</div>
<p> </p>

<p>Perfectly acceptable (despite the hilariously slow data acquisition rate), but I ended up abandoning the project. Strapping all that stuff into your car was just not fun, and the marshals at most track days I went to weren’t desperately happy with the thought of that amount of stuff flying around the car if I crashed. Compare the photos above with my equipment list below and you’ll see just how far we’ve come!</p>

<p><a name="virb-xe-review-start"></a></p>

<h2 id="virb-xe-the-review">VIRB XE: The Review</h2>

<p>This review focuses on the experience the VIRB XE gives when using it to create driving videos, typically on a track day or on a road trip. As well as the camera itself, I’ll be using it with the following equipment:</p>

<ul>
  <li>An OBDLink LX — a Bluetooth OBD dongle for interfacing with the car.</li>
  <li>A Raceseng Tug View — a tow hook with an integrated GoPro mount.</li>
  <li>An Audio-Technica ATR3350 microphone and Zoom H1 audio recorder.</li>
</ul>

<p class="center"><img src="/pictures/virb-review/equipment.jpg" width="800"></p>

<p class="center"><img src="/pictures/virb-review/virb-xe-mounted.jpg" width="800">  <br>
<em>The camera is attached to the front of my car (along with a lot of bugs!) using the Tug View.</em></p>

<h3 id="a-note-on-audio">A Note On Audio</h3>

<p>Garmin claims their microphone “…records clean and clear audio that cameras in cases just can’t pick up”, which is an implied bash at GoPro, I suppose. While that may be true, the interesting noises from a car come from under the bonnet or out the back, neither of which are interesting places for a camera. Therefore, this review won’t deal with sound quality.</p>

<p>That said, my video explaining how to get good sound quality from your car on a track day does use the VIRB XE for the clips at the end, so if you’re an expert on what wind noise should sound like, go nuts!</p>

<div class="iframe-16x9-container">
<iframe class="iframe-16x9" src="https://www.youtube.com/embed/t_9u5CMjZYM" frameborder="0" allowfullscreen=""></iframe>
</div>
<p> </p>

<h3 id="a-note-on-video-quality">A Note On Video Quality</h3>

<p>I’m not going to directly compare video quality to other cameras either — I don’t have the skill set to do a good job of it. The video quality seems great, though, and the camera does an admirable job in difficult autoexposure situations, like driving through a shady forest on a sunny day.</p>

<h3 id="pre-impressions">Pre… Impressions…?</h3>

<p>Garmin, I’m going to level with you: paper launches <em>suck</em>. This camera was announced in April and I was <em>super</em> excited about it, thrusting cash at my computer screen with the enthusiasm of a kid in a candy store. And then you said “summer”, and my enthusiasm waned. I went to a track day in August (<em>firmly</em> in “summer”) and the camera still wasn’t available. “Garmin suck!” I found myself saying to my friend, grumpy that I was still waiting for the camera.</p>

<p>That’s a pretty negative feeling to come back from.</p>

<h3 id="first-impressions">First Impressions</h3>

<p>This review is going to compare to the GoPro a <em>lot</em>. They’re the de-facto standard in this space, and I’ve been using them for years. They have a huge amount of momentum, but I’ve actually been falling out of love with them for a little while. They’ve always been a bit fiddly, but silly design decisions like that stupid port cover and a flimsy USB connector that’s soldered (poorly, in one of mine) to the mainboard make it feel fragile, which is exactly the opposite of what you want in an outdoor action camera.</p>

<p>Within seconds of pulling the VIRB XE out of its box, you realise it’s different. After a couple of minutes, you get the feeling that it’s been designed with care for its intended environment — dropping off my bike into a muddy puddle.</p>

<p>The whole thing is really well put together. A few particular details stand out for me:</p>

<p class="center"><img src="/pictures/virb-review/virb-xe-record-switch.jpg" width="800"> <br>
<em>Easy to push buttons and the big chunky “record” switch and great to use with gloves on.</em></p>

<p class="center"><img src="/pictures/virb-review/virb-xe-screen.jpg" width="800"> <br>
<em>The screen is lovely and clear compared to that of the GoPro.</em></p>

<p class="center"><img src="/pictures/virb-review/virb-xe-moisture-tray.jpg" width="800"> <br>
<em>A little tray holds inserts that absorb moisture to prevent the camera from fogging. The inserts are reusable and four are included in the box (one of which I promptly lost because they’re small and I’m stupid).</em></p>

<p class="center"><img src="/pictures/virb-review/virb-xe-port.jpg" width="800"> <br>
<em>All electronic interfacing is done using this external set of pins. No female ports means no ports have load-bearing flimsy soldering, no holes for water to get in, and no stupid port cover.</em></p>

<p class="center"><img src="/pictures/virb-review/virb-xe-gopro-suction-cup.jpg" width="800"> <br>
<em>Sensibly, they’ve accepted that GoPro currently rule the roost in the market and the camera is directly compatible with the GoPro ecosystem of mounts.</em></p>

<p>However! It’s not all perfect.</p>

<p>A very minor niggle is that the “Menu” button on mine feels a bit weird. You feel it click when you push it, but nothing happens. You need to push a tiny bit harder to get the button to register.</p>

<p>A much less minor niggle is the cable connecting mechanism. The cable snaps on using a very rugged connector (which is great), but when I pick the camera up it disconnects as if I’d unplugged it. I can repeat this with 100% repeatability with my camera and cable, which is quite worrying. Randomly disconnecting is a great way to corrupt the filesystem. Sure, I can work around that by taking the SD card out and using a card reader, but what happens if my dog bumps my desk during a firmware update?</p>

<p><del>Hopefully, this is just a niggle with my particular camera. I’ll contact Garmin about it and update this review with their reply.</del></p>

<p><strong>Update January 2016:</strong> The weird menu button isn’t unique to my camera. There are theories on the Garmin forums that it’s actually a half-full button like the shutter button on a camera, and there’s nothing yet assigned to a half press. Garmin’s response was that the camera was acting as normal. I haven’t actually used the cable again since this review, and I haven’t pursued it further.</p>

<h3 id="recording-a-car-video">Recording a Car Video</h3>

<p>During setup, the camera created a WiFi network and paired with my iPhone perfectly, and the camera allows you to customise its SSID and password on-screen.</p>

<p class="center"><img src="/pictures/virb-review/virb-xe-wifi.jpg" width="800"></p>

<p>Next, I connected it to my OBDLink LX. It took a few clicks of the “Scan” option in the VIRB’s Bluetooth settings before it saw my OBD dongle, but once it found it the two paired instantly. While the camera was adamant it was connected to my car, the VIRB App on my iPhone reported “No connected sensors”. Thankfully the camera was right, and the data from my car was recorded perfectly. Hopefully the glitch in the app will be fixed.</p>

<p class="center"><img src="/pictures/virb-review/virb-app-no-bluetooth.png" width="375"></p>

<p>I attached the camera to the front mount on my car, started my audio recorder then used the VIRB app to start the camera from my iPhone. After a little beep of the horn (for syncing my separate audio recording with the video), I set off for a 25-minute drive around a local lake.</p>

<p>Once home, I was able to connect to the camera using my phone and stop recording. Everything appeared to have worked just fine.</p>

<h3 id="editing-a-car-video">Editing a Car Video</h3>

<p>This is where I’m ready to be let down. I wrote the app I wanted (well, a prototype of it) eight years ago, and nothing has come close since. Like the bride who’s been planning her wedding since she was a small girl, reality can never quite match up to expectation. Nobody will write the app <em>I</em> want.</p>

<h4 id="data-and-gauges">Data and Gauges</h4>

<p>Expectations lowered, I fire up VIRB Edit for the first time and import the recording straight from the camera.</p>

<p class="center no-border"><img src="/pictures/virb-review/virb-edit-first-impression.png" width="731"></p>

<p>Holy crap. With zero effort I have a full set of data <em>and</em> a map synced to my drive. This is wonderful!</p>

<p>The quality of the recorded data by the VIRB seems great — the OBD data came out perfectly despite there being a couple of metres and an engine between the camera and the Bluetooth OBD adapter, and the application managed to handle the device losing a GPS fix for a few seconds with grace, resulting in a slightly funny-looking map (bottom left of the map in the screenshot above — the road isn’t that square) but no other problems.</p>

<p><del>However, the data is a bit <em>too</em> perfect, and the app seems too trusting of it. In particular, G-forces. With the camera directly bolted to my car’s chassis, the camera’s internal accelerometer seems to pick up every tiny little vibration, which VIRB Edit displays without filtering as this example from a perfectly smooth road shows:</del></p>

<p><strong>Update January 2016:</strong> I’m happy to report that this problem has been <em>completely</em> fixed with firmware 3.70, released in early December 2015. I was concerned that the vibrations from being directly bolted to my car with a metal mount would be too much to overcome, but with the firmware update the G-force data from the VIRB is lovely and smooth, and picks up gentle curves and speed changes just fine. You can see a before (left) and after (right) comparison below:</p>

<div class="video-container">
<video class="center" style="overflow:hidden; max-width: 640px;" autoplay="" loop="">
  <source src="/pictures/virb-review/gforces-compare.mp4" type="video/mp4"></source>
  Your browser does not support the video tag.
</video>
</div>
<p> </p>

<p><del>It’d be nice if there was an option to have the application perform a low-pass filter on the data. This would reduce the responsiveness of the data slightly, but my 1,200kg car isn’t changing direction fast enough in any axis to make that a huge problem.</del></p>

<p>VIRB Edit comes with a number of templates which work great, and a lot of individual gauges that you can customise the colours of to create your own layouts and styles.</p>

<p>If that’s not enough, you can create your own gauges and edit them, which is a superb feature to have for power users — I plan to make gauges in VIRB Edit to match the ones in my car, and I bet others will do that same.</p>

<p class="center no-border"><img src="/pictures/virb-review/gauge-editor.png" width="648"></p>

<h4 id="video-editing">Video Editing</h4>

<p>VIRB Edit is a basic, newbie-friendly video editing application, and the features it does have work well, although I did notice a little audio hiccup during playback when two sequential clips (the camera splits recordings into fifteen-minute chunks) are placed together.</p>

<p>There are a number of features I need to produce my track day videos that VIRB Edit doesn’t have:</p>

<ul>
  <li>The ability to import a separate audio track (from my audio recorder) and precisely sync it (and keep it synced) with the audio track of the video.</li>
  <li>The ability to rotate the video slightly when I mount the camera slightly off-level.</li>
</ul>

<p>Now, I’m not saying Garmin should implement all these features — that’d be silly given the number of video editors already out there at any price range you can mention. Normally, I’d just import my video into my editor of choice and edit to my heart’s content. However, the addition of data overlays makes that problematic — if I add my data overlays in VIRB Edit then export for further editing, a number of problems occur:</p>

<ul>
  <li>An extra layer of encoding has happened, reducing the quality of the video.</li>
  <li>The gauges are baked into the video, meaning any rotations, colour corrections, etc will be applied to them as well.</li>
</ul>

<p>I could go the other way — import the raw video into my editor of choice, apply corrections, merge in the better audio, etc, but you still end up with an extra encoding step that reduces quality.</p>

<p><del>Solving this is actually relatively easy, and my prototype application from years ago had this built-in: several video formats and containers support videos with alpha channels. What I’d love to do is add my data overlays in VIRB Edit then export a lossless video containing <em>only</em> the overlays on a transparent canvas. This way, I could import the original video and the overlays into my editor of choice and keep them in separate tracks, allowing me to apply rotations and colour corrections to the video to my heart’s content. Bonus points for being able to export each overlay separately, allowing the sweet animations seen in Garmin’s own VIRB XE promotional video!</del></p>

<p><strong>Update January 2016:</strong> I’m not sure if I was just being dumb when I wrote this review, but I’ve recently found an option in VIRB Edit’s preferences: <em>Export transparent PNG sequence for overlays</em>. This does exactly what it says on the tin, and after exporting a video it’ll separately export a sequence of transparent PNGs containing only the overlays. Apple’s Motion editing software picked this sequence up directly with no further action needed on my part. The only minor downside to this is that you’ll have one PNG sequence containing every single overlay, which is less useful if you want to animate them independently. This can be worked around, though, by exporting multiple times with one overlay at a time. The minor downside to <em>that</em> approach, though, is that there’s no option to export <em>only</em> the overlay PNG sequence, so you have to re-export the video itself as well. This can become a lengthy process!</p>

<h3 id="hail-to-the-power-user">Hail To The Power User</h3>

<p>One thing I’d like to call out about this product that won’t be talked about in most reviews is Garmin’s attitude towards advanced/power users. Many companies lock away the inner workings of their products in what often turns out to be a futile effort as users tend to reverse-engineer the fun stuff anyway. GoPro’s WiFi protocol has been <a href="https://github.com/KonradIT/goprowifihack">mostly reverse-engineered</a>, for instance, and there are a wide number of GoPro “<a href="http://hackaday.com/2014/06/20/pwn-your-gopro-scripting-wifi-and-bus-hacking/">hacks</a>” (which turn out to mostly be undocumented config files) to enable features like long exposures.</p>

<p>Garmin, on the other hand, publishes documentation for controlling  their VIRB cameras on their own <a href="http://developer.garmin.com/virb/overview">VIRB Developer site</a>, and VIRB Edit has an “Advanced Editing” button on its already pretty advanced gauge editor which opens up a JSON file in your favourite text editor alongside a PDF documenting the file format.</p>

<p>For most users, this means nothing. However, I <em>love</em> this attitude — I can customise my gauges to my heart’s content and write little apps to control my camera if I want, all using tools provided to me by Garmin.</p>

<h3 id="conclusion">Conclusion</h3>

<h4 id="short-version">Short Version</h4>

<p>I’ve already - and I’m not joking - sold all of my GoPro cameras.</p>

<h4 id="long-version">Long Version</h4>

<p>I bought this camera within its first week of availability in Sweden, and unfortunately these days that means software niggles are to be expected. However, I’ve owned a number of Garmin devices (and still do) and they’ve a long history of continuing to improve their products over time. My four year old GPS unit still gets regular software updates, for instance. I have a very positive opinion of Garmin as a company — they make solid products and solid software, so I’m hopeful they’ll resolve the bugs I found.</p>

<p><strong>Update January 2016:</strong> I’m happy that my faith in Garmin seems to have been well placed - the more problematic software issues have been fixed by updates.</p>

<p>I <em>am</em> rather concerned about the flaky connection between the camera and its USB cable, though. This is certainly a hardware issue — I’ll contact Gamin and see what they say.</p>

<p>Overall, though, I love this camera and have already sold all my GoPros. The combination of its superb build quality and extra data acquisition features are <em>killer</em> for me, and are a joy to have after years of lacklustre GoPro updates.</p>

<h4 id="hardware">Hardware</h4>

<p><strong>Good</strong></p>

<ul>
  <li>It feels like it’s built like a tank — I love the record switch in particular.</li>
  <li>Lots of thought in the design — the moisture tray and port design stand out.</li>
  <li>Lovely screen compared to the GoPro.</li>
  <li>Paired with my OBD dongle and phone effortlessly.</li>
  <li>Directly compatible with the GoPro ecosystem of mounts.</li>
</ul>

<p><strong>Bad</strong></p>

<ul>
  <li>PAPER LAUNCH DAMNIT! Don’t show me a product I want then wait four months to start selling it!</li>
  <li>Cable doesn’t fit snugly and disconnects when I move the camera. Hopefully this is a one-off thing.</li>
  <li>One of the buttons feels weird. <del>Again, hopefully a one-off niggle.</del> <strong>May actually be as-designed. Garmin considers it ‘normal’.</strong>
</li>
  <li>Proprietary cable isn’t super great when you need an emergency charge in a world of micro USB. I see why they did it and, like Apple’s Lightning, the pros outweigh the cons most of the time.</li>
  <li>Only one sticker in the box. I’m prepared to go full fanboy with this thing, and I only have one sticker?!</li>
</ul>

<h4 id="software">Software</h4>

<p><strong>Good</strong></p>

<ul>
  <li>Great Mac citizen — you’ve no idea how many companies ship crappy “cross-platform” desktop software.</li>
  <li>Gauges functionality covers all my uses, from great looking templates through to complete and total customisability.</li>
</ul>

<p><strong>Bad (as of August 2015)</strong></p>

<ul>
  <li>
<del>Accelerometer data needs a low-pass filter — it’s unusably noisy when the camera is bolted to my car’s chassis.</del> <strong>Fixed with firmware 3.70.</strong>
</li>
  <li>Audio glitch when transitioning between clips that’ve been cut up by the camera.</li>
</ul>

<p><strong>Missing Features</strong></p>

<ul>
  <li>
<del>Ability to export a translucent video containing only the gauges so I can edit the source video in my preferred editor and keep the data overlays clean.</del> <strong>Feature exists, but is slightly hidden. My fault!</strong>
</li>
</ul>


		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>June 21st, 2015</h4>
		<h2><a href="/blog/2015/06/secret-diary-of-a-side-project-part-6/">Secret Diary of a Side Project: In Reality, I've Only Just Started</a></h2>
	</header>
	<article>
		
<p><em><strong>Secret Diary of a Side Project</strong> is a series of posts documenting my journey as I take an app from side project to a full-fledged for-pay product. You can find the introduction to this series of posts <a href="/blog/2014/12/secret-diary-of-a-side-project-intro/">here</a>.</em></p>

<hr>

<p>On March 27th 2013, I started an Xcode project called <em>EOSTalk</em> to start playing around with communicating with my new camera (a <a href="/blog/2013/03/canon-eos-6d-review/">Canon EOS 6D</a>) over its WiFi connection.</p>

<p>Over two years and 670 commits later, on June 5th 2015 (exactly a <a href="/blog/2015/02/secret-diary-of-a-side-project-part-4/">month late</a>), I uploaded Cascable 1.0 to the App Store. Ten agonising days later, it went “In Review”, and seventeen hours after that, “Pending Developer Release”.</p>

<p>Late in the evening the next day, my wife, our dog, a few Twitter friends (thanks to Periscope) and I sat together by my desk and clicked the <em>Release This Version</em> button.</p>

<iframe width="320" height="600" src="https://www.youtube.com/embed/ZQYM9kuNXAU" frameborder="0" allowfullscreen=""></iframe>
<p> </p>

<p>I absolutely meant to blog more in the three months since my last <em>Secret Diary</em> post, and I’m sorry if you’ve been looking forward to those posts. An interesting thing happened — I thought I’d have <em>way</em> more time for stuff like blogging after leaving my job and doing this fulltime, but I’ve ended up with <em>way</em> less. A strict deadline and a long issues list in JIRA made this a fulltime 9am-6pm job. So much for slacking off and playing videogames!</p>

<p>Fortunately, though, I still have a few things I want to write about and now I can slow down a bit, I should start writing here on a more frequent basis again.</p>

<h3 id="statistics">Statistics</h3>

<p>Some stats for Cascable 1.0 for the curious:</p>

<table class="alt">
<tr>
<td>Objective-C Implementation</td>
<td>124 files, 23,000 lines of code</td>
</tr>
<tr>
<td>C/Objective-C Header</td>
<td>133 files, 2,400 lines of declaration</td>
</tr>
<tr>
<td>Swift</td>
<td>None</td>
</tr>
<tr>
<td>Commits</td>
<td>670</td>
</tr>
</table>

<p>Now, lines of code is a pretty terrible metric for comparing projects, but here’s the stats for the Mac version of Music Rescue, the last app of my own creation that brought in the Benjamins:</p>

<table class="alt">
<tr>
<td>Objective-C Implementation</td>
<td>154 files, 24,000 lines of code</td>
</tr>
<tr>
<td>C/Objective-C Header</td>
<td>169 files, 4,100 lines of declaration</td>
</tr>
<tr>
<td>Swift</td>
<td>This was 2008 — I barely had Objective-C 2.0, let alone Swift!</td>
</tr>
</table>

<p>As you can see, the projects are actually of a similar size. It’s a completely meaningless comparison, but it’s interesting to me nonetheless. Back in 2008 I considered Music Rescue a pretty massive project, something I don’t think about Cascable. I guess my experience with the Spotify codebase put things in perspective.</p>

<p>You can check Cascable out <a href="http://cascable.se">here</a>. You should totally buy a copy!</p>

<h3 id="celebrating">Celebrating</h3>

<p>At <a href="/blog/2015/03/nsconference-7/">NSConference 7</a> I gave a short talk which was basically <em>Secret Diary: On Stage</em>, in which I discussed working on this project.</p>

<div class="iframe-16x9-container">
<iframe src="https://player.vimeo.com/video/124337772" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
</div>
<p> </p>

<p>In that talk, I spoke about a bottle of whiskey I have on my desk. It’s a bottle of Johnnie Walker Blue Label, and at £175 it’s by far the most expensive bottle of whiskey I’ve bought. When I bought it, I vowed it’d only be opened when a real human being that wasn’t my friend (sorry Tim!) exchanged money for my app.</p>

<p>Releasing an app is reward in itself, but there’s nothing <em>tangible</em> about it. Having that physical milestone there to urge me on really was helpful when I was on hour four of debugging a really dumb crash, for instance.</p>

<p>This weekend, that bottle was opened. It tasted like <em>glory</em>.</p>

		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>May 1st, 2015</h4>
		<h2><a href="/blog/2015/05/build-time-cfbundleversion-values-in-watchkit-apps/">Build-Time CFBundleVersion Values in WatchKit Apps</a></h2>
	</header>
	<article>
		
<p>When building a WatchKit app, you’ll likely encounter this error at some point:</p>

<blockquote>
  <p>error: The value of CFBundleVersion in your WatchKit app’s Info.plist (1) does not match the value in your companion app’s Info.plist (2). These values are required to match.</p>
</blockquote>

<p>Easy, right? We just make sure the values match. But… what if we’re using dynamically generated bundle version numbers derived from, say, the number of commits in your git repository? Well, we just go to the WatchKit app’s target in Xcode, click the “Build Phases” tab and… oh. There isn’t one.</p>

<p>So, if we’re required to have our WatchKit app mirror the CFBundleVersion of our source app and we’re generating that CFBundleVersion at build time, what do we do? First, we wonder why this mirroring isn’t automatic. Second, we try to modify the WatchKit app’s Info.plist file from another target before realising that it screws with its code signature. Third, we come up with this horrible workaround!</p>

<h2 id="the-horrible-workaround">The Horrible Workaround</h2>

<p>The workaround is to generate a header containing definitions for your version numbers, then use Info.plist preprocessing to get them into your WatchKit app’s Info.plist file.</p>

<p>This little tutorial assumes you already have an Xcode project with a set up and working WatchKit app.</p>

<h3 id="step-1">Step 1</h3>

<p>Make a new build target, selecting the “Aggregate” target type under “Other”.</p>

<p class="center no-border"><img src="/pictures/watchkit-versions/new-aggregate-target.png" width="764"></p>

<h3 id="step-2">Step 2</h3>

<p>In that new target, create a shell script phase to generate a header file in a sensible place that contains C-style <code>#define</code> statements to define the version(s) as you see fit.</p>

<p>My example here generates two version numbers (a build number based on the number of commits in your git repo, and a “verbose” version that gives a longer description) then places the header into the build directory.</p>

<pre><code class="language-bash"><span class="nv">GIT_RELEASE_VERSION</span><span class="o">=</span><span class="k">$(</span>git describe --tags --always --dirty --long<span class="k">)</span>
<span class="nv">COMMITS</span><span class="o">=</span><span class="k">$(</span>git rev-list HEAD <span class="p">|</span> wc -l<span class="k">)</span>
<span class="nv">COMMITS</span><span class="o">=</span><span class="k">$((</span><span class="nv">$COMMITS</span><span class="k">))</span>

mkdir -p <span class="s2">"</span><span class="nv">$BUILT_PRODUCTS_DIR</span><span class="s2">/include"</span>

<span class="nb">echo</span> <span class="s2">"#define CBL_VERBOSE_VERSION </span><span class="si">${</span><span class="nv">GIT_RELEASE_VERSION</span><span class="p">#*v</span><span class="si">}</span><span class="s2">"</span> &gt; <span class="s2">"</span><span class="nv">$BUILT_PRODUCTS_DIR</span><span class="s2">/include/CBLVersions.h"</span>
<span class="nb">echo</span> <span class="s2">"#define CBL_BUNDLE_VERSION </span><span class="si">${</span><span class="nv">COMMITS</span><span class="si">}</span><span class="s2">"</span> &gt;&gt; <span class="s2">"</span><span class="nv">$BUILT_PRODUCTS_DIR</span><span class="s2">/include/CBLVersions.h"</span>

<span class="nb">echo</span> <span class="s2">"Written to </span><span class="nv">$BUILT_PRODUCTS_DIR</span><span class="s2">/include/CBLVersions.h"</span></code></pre>

<p>The file output by this script looks like this:</p>

<pre><code class="language-c"><span class="cp">#define CBL_VERBOSE_VERSION a6f5bd0-dirty</span>
<span class="cp">#define CBL_BUNDLE_VERSION 1</span></code></pre>

<p class="center"><img src="/pictures/watchkit-versions/aggregate-with-script.png" width="1060"></p>

<h3 id="step-3">Step 3</h3>

<p>Make your other targets depend on your new aggregate target by adding it to the “Target Dependencies” item in the target’s “Build Phases” tab. You can add it to all the targets that you’ll use the version numbers in, but you’ll certainly need to add it to your WatchKit Extension target.</p>

<p class="center"><img src="/pictures/watchkit-versions/dependency-setup.png" width="828"></p>

<h3 id="step-4">Step 4</h3>

<p>Xcode tries to be smart and will build your target’s dependencies in parallel by default. However, this will mean that your WatchKit app will be built at the same time as the header is being generated but aggregate target, which will often result in build failures due to the header not being available in time.</p>

<p>To fix this, edit your target’s scheme and uncheck the “Parallelize Build” box in the “Build” section. This will force Xcode to wait until the header file has been generated before moving on.</p>

<p class="center no-border"><img src="/pictures/watchkit-versions/scheme-build-options.png"></p>

<h3 id="step-5">Step 5</h3>

<p>Edit the build settings in your targets as follows:</p>

<ul>
  <li>
<code>Preprocess Info.plist File</code> should be set to <code>Yes</code>.</li>
  <li>
<code>Info.plist Other Preprocessor Flags</code> should be set to <code>-traditional</code>.</li>
  <li>
<code>Info.plist Preprocessor Prefix File</code> should be set to wherever your generated header file has been placed. In my case, it’s <code>${CONFIGURATION_BUILD_DIR}/include/CBLVersions.h</code>.</li>
</ul>

<p class="center"><img src="/pictures/watchkit-versions/build-settings.png" width="672"></p>

<h3 id="step-6">Step 6</h3>

<p>Finally, change the values in your Info.plist files to match the keys in your generated header file. In my case, I set <code>CFBundleVersion</code> (also known as <code>Bundle Version</code> or <code>Build</code> depending on where you’re looking in Xcode) to <code>CBL_BUNDLE_VERSION</code>.</p>

<p class="center"><img src="/pictures/watchkit-versions/info-plist.png" width="644"></p>

<h3 id="step-7">Step 7</h3>

<p>Go to the Apple Bug Reporter and ask (nicely) they give us build phases back for WatchKit apps. You can dupe mine (<a href="http://www.openradar.me/radar?id=4945965354057728">Radar #20782873</a>) if you like.</p>

<h3 id="step-8">Step 8</h3>

<p class="center"><img src="/pictures/watchkit-versions/cascable.jpg"> <br>
<em>Success!</em></p>

<h2 id="conclusion">Conclusion</h2>

<p>This is horrible. We need to disable parallel builds and generate intermediate headers and all sorts of nastiness. Hopefully we’ll get build phases back for WatchKit apps soon!</p>

<p>You can download a project that implements this tutorial <a href="/pictures/watchkit-versions/Clicker.zip">here</a>.</p>

		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>March 24th, 2015</h4>
		<h2><a href="/blog/2015/03/nsconference-7/">NSConference 7</a></h2>
	</header>
	<article>
		
<p class="center"><img src="/pictures/nsconf-stage.jpg"></p>

<p>“I checked the version of your presentation with the video in it, and it works fine. Shall we just use that one, then?”</p>

<p>Panic set in, again. Scotty was already onstage and in the process of introducing me, so I had to think fast. I’d been accepted to give a “blitz talk” — that is, a short, 10-minute long presentation — at NSConference this year, and I’d put a little video clip that at <em>best</em> could be described as “stupid” into my slides. I thought it was funny, but I was so worried that it’d be met with a stony silence by the hundreds of attendees that I’d also provided a copy without the video.</p>

<p><em>At least it’ll be an interesting story to tell</em>, I thought to myself, and confirmed that I’ll use the version with the video before stepping out into the blinding lights of the stage.</p>

<p>Here we go!</p>

<hr>

<p>NSConference has always been about community. I’ve been fortunate enough to attend a number of them over the years, following it around the UK from Hatfield to Reading to Leicester. I’ve met a number of friends there, and it’s <em>always</em> inspiring. The mix of sessions normally has a fairly even distribution of technical and social topics, and this year was no exception — some fantastic speakers gave some wonderfully inspiring talks that really touched close to home, and others gave some fascinating technical talks on the old and the new.</p>

<p>Rather than list them now, I’m going to do a followup post when the NSConference videos are released that’ll link to my favourite talks and discuss why I found them so great.</p>

<p>However, the talks are only half of it. I’m pretty shy around new people, and my typical conference strategy is to sit with people I already know during the day, then hide in a corner or my hotel room during the evenings. This time, however, I was determined to at least <em>try</em> to make friends, and with little effort I found myself speaking to so many new people I can barely remember them all. Everyone was <em>so</em> friendly and <em>so</em> supportive, and I had a huge number of really interesting conversations with people from all over the world.</p>

<hr>

<p><em>A joke is a great way to break the ice,</em> someone once said. I start with “The lunches aren’t so light if you go back for thirds, are they?”<sup id="fnref:nsconference-7-1"><a href="#fn:nsconference-7-1" class="footnote">1</a></sup>, referencing the fact we were given a light lunch that day in preparation for the banquet later. Sensible chuckle from the audience. Alright, maybe my video won’t flop after all!</p>

<p>“Hello everyone,” I continued, “My name is Daniel and for the past four years I’ve been working as a Mac and iOS developer at Spotify. And four days ago — last Thursday — I left to become an Indie developer. Today, I’m—”</p>

<p>I was interrupted by a huge round of applause that went on long enough to mask my stunned silence. <em>This</em> is what NSConference is about: hundreds of friends and strangers coming together to support one another in whatever we’re doing. One of the larger challenges in what I’m doing is the solitude — I left a job where I’m interacting with a lot of people every day to one where I sit alone in a corner of my house. As I stand on the stage, the applause lifts me up and drives home that while I may physically be on my own, I have a huge community of peers that are right behind me and are willing me to succeed.</p>

<p>As the applause dies down, I do a “Thank you, goodnight!” joke to move around the stage and regain my composure. Thirty seconds later, we arrive at my stupid video.</p>

<p>My thumb hovers over the button to advance the slide and start the video. <em>If I double-click it, it’ll skip the video!</em> A moment’s hesitation…</p>

<p><em>Click.</em></p>

<p>That two second video clip got what I think was one of the biggest laughs of the conference, and I was so relieved I even started laughing at it myself.</p>

<p>Right! Time to get my shit together — I’m supposed to be sharing information!</p>

<hr>

<p>At the end of the conference, heartfelt things were said onstage as the sun set on the final NSConference — there wasn’t a dry eye in the house. During this, staff handed a glass of whiskey to every single person in the audience. At the very end, Scotty held a toast, then left the stage as we clinked glasses.</p>

<p>The last NSConference came to a close with the sound of hundreds of people clinking glasses in toast to seven years of incredible experiences. The sound resonated around the hall for a number of minutes before eventually subsiding, and is something I’ll never forget.</p>

<p>As a tribute to the conference and the work the organisers put in, the community is banding together to raise money for Scotty’s favourite cause, Water.org, which has the goal of providing clean water to everyone who needs it. You can donate at the <a href="http://give.water.org/f/nsconf7/">NSConference 7 fundraiser page</a>.</p>

<p><em>Clink.</em></p>

<p class="center"><img src="/pictures/nsconf-whiskey.jpg"></p>

<div class="footnotes">
  <ol>
    <li id="fn:nsconference-7-1">
      <p>It should be noted that my talk wasn’t really scripted so I’m recounting what I said from memory. When the video is released it’ll likely prove that I’m misremembering my exact wording. The gist will be the same, though. <a href="#fnref:nsconference-7-1" class="reversefootnote">↩</a></p>
    </li>
  </ol>
</div>

		<hr />
	</article>
</section>



<section>
	<header class="major">
		<h4>March 10th, 2015</h4>
		<h2><a href="/blog/2015/03/secret-diary-of-a-side-project-part-5/">Secret Diary of a Side Project: The Refactor From Hell</a></h2>
	</header>
	<article>
		
<p class="center"><img src="/pictures/secret-diary/camera-pairing.png" width="641"> <br>
<em>Why I need a designer: Exhibit A.</em></p>

<p><strong>THIS BUTTON.</strong></p>

<p>This innocuous little button cost me a week. Let that settle in. A <em>week</em>.</p>

<p>It’s a simple enough premise — when the user gets presented a dialog like this, you should give them a way out. Presenting a button-less dialog is all kinds of scary — what if the camera crashes and doesn’t give the expected response, or any response at all? Sure, I can guard against that, but still.</p>

<p>So, it’s settled! I’ll implement a Cancel button so the user can back out of pairing with their camera. What a completely logical and easy thing to do.</p>

<h3 id="programming">PROGRAMMING!</h3>

<p>Here’s the problem I faced:</p>

<p>Typically, when you connect to a camera you send it a message to initialise a session, then wait for a success response. This normally takes a small number of milliseconds, but when the camera is in pairing mode it won’t respond at <em>all</em> until the user  has gone through a few steps on the camera’s screen.</p>

<p>All we need to do is sever the connection to the camera while we’re waiting, right? Easy enough. However, the architecture of my application has it working with the camera in a synchronous manner, writing a message then blocking until a response is received. All this is happening on a background thread so it doesn’t interfere with the UI, and since the camera has a strict request-response pattern, it works well enough. However, in this case, I can’t sever the connection on the camera’s thread because it’s completely blocked waiting for a response. If I try to do this from a separate thread, I end up with all sorts of nasty state — dangling sockets and leaked objects.</p>

<p>The solution to this sounds simple — instead of doing blocking reads, I should schedule my sockets in a runloop and use event-based processing to react when responses are received. That way, nothing will ever be blocked and I can sever the connection cleanly at any point without leaving dangling sockets around.</p>

<p>Easy!</p>

<hr>

<p>Seven hours later I’m sitting at my desk with my head in my hands, wishing I’d never bothered. It’s 11pm, and later my wife tells me she’d approached me to come play video games but decided I looked so grumpy I’d be best left alone. I have no idea why it’s not working. I’m sending the exact same bytes as I was before, and getting the same responses. It actually works fine until traffic picks up — as soon as you start to send a lot of messages, random ones never get a response.</p>

<p>Well after midnight, I throw in the towel. I’d been working at this one “little” problem nonstop for eight hours, my code was a huge mess and I almost threw away the lot.</p>

<p>“I’m such an idiot,” I told my wife as I got into bed, “I even wrote about this on my blog, using the exact code I’m working on as an example”.</p>

<p>Yup, this is that <a href="/blog/2015/01/secret-diary-of-a-side-project-part-1/">old but reliable code</a> I wrote about a couple of months ago. The class I said I’d love to refactor but shouldn’t because it worked fine.</p>

<p>One way of proving a hypothesis, I suppose.</p>

<p>As I was drifting off to sleep, I had an idea. I decided it could wait until the morning.</p>

<hr>

<p>I slumped down into my chair the next morning and remembered my idea. Twenty minutes later, it was working like a charm<sup id="fnref:secret-diary-part-5-1"><a href="#fn:secret-diary-part-5-1" class="footnote">1</a></sup>.</p>

<p>Sigh.</p>

<p>So, now it’s working and a darn sight better looking than my old code. However, the two years’ worth of confidence and proven reliability that I had with the old code has vanished — it seems to work, yes, but how can I be sure? Maybe there’s bugs in there that haven’t shown themselves yet.</p>

<h3 id="if-you-dont-have-experience-you-need-data">If You Don’t Have Experience, You Need Data</h3>

<p>I’ve been writing unit tests here and there for parts of my app where it makes sense.</p>

<p>“Business logic” code for the app is simple enough to test — instantiate instances of the relevant classes and go to town:</p>

<pre><code class="language-objc"><span class="n">CBLShutterSpeed</span> <span class="o">*</span><span class="n">speed</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBLShutterSpeed</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStopsFromASecond</span><span class="p">:</span><span class="mf">0.0</span><span class="p">];</span>
<span class="n">XCTAssert</span><span class="p">(</span><span class="n">speed</span><span class="p">.</span><span class="n">upperFractionalValue</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="s">@"Failed!"</span><span class="p">);</span>
<span class="n">XCTAssert</span><span class="p">(</span><span class="n">speed</span><span class="p">.</span><span class="n">lowerFractionalValue</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="s">@"Failed!"</span><span class="p">);</span>

<span class="n">CBLShutterSpeed</span> <span class="o">*</span><span class="n">newSpeed</span> <span class="o">=</span> <span class="p">[</span><span class="n">speed</span> <span class="nl">shutterSpeedByAddingStops</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
<span class="n">XCTAssert</span><span class="p">(</span><span class="n">newSpeed</span><span class="p">.</span><span class="n">upperFractionalValue</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="s">@"Failed!"</span><span class="p">);</span>
<span class="n">XCTAssert</span><span class="p">(</span><span class="n">newSpeed</span><span class="p">.</span><span class="n">lowerFractionalValue</span> <span class="o">==</span> <span class="mi">2</span><span class="p">,</span> <span class="s">@"Failed!"</span><span class="p">);</span></code></pre>

<p>Parsing data given back to us by the camera into objects is a little bit more involved, but not much. To achieve this, I save the data packets to disk, embed them in the test bundle and load them at test time. Since we’re testing the parsing code and <em>not</em> that the camera gives back correct information, I think this is an acceptable approach.</p>

<pre><code class="language-objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test70DLiveViewAFRectParsing</span> <span class="p">{</span>
    <span class="bp">NSData</span> <span class="o">*</span><span class="n">rectData</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">dataWithContentsOfFile</span><span class="p">:[</span><span class="nb">self</span> <span class="nl">pathForTestResource</span><span class="p">:[</span><span class="s">@"70D-LiveViewAFRects-1.1.1.dat"</span><span class="p">]];</span>
    <span class="n">XCTAssertNotNil</span><span class="p">(</span><span class="n">rectData</span><span class="p">,</span> <span class="s">@"afRect data is nil - possible integrity problem with test bundle"</span><span class="p">);</span>

    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">afAreas</span> <span class="o">=</span> <span class="p">[</span><span class="n">DKEOSCameraLiveViewAFArea</span> <span class="nl">liveViewAFAreasWithPayload</span><span class="p">:</span><span class="n">rectData</span><span class="p">];</span>
    <span class="n">XCTAssertNotNil</span><span class="p">(</span><span class="n">afAreas</span><span class="p">,</span> <span class="s">@"afRects parsing failed"</span><span class="p">);</span>

    <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="mi">31</span><span class="p">,</span> <span class="n">afAreas</span><span class="p">.</span><span class="n">count</span><span class="p">,</span> <span class="s">@"Should have 31 AF areas, got %@"</span><span class="p">,</span> <span class="l">@(</span><span class="n">afAreas</span><span class="p">.</span><span class="n">count</span><span class="l">)</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">DKEOSCameraLiveViewAFArea</span> <span class="o">*</span><span class="n">area</span> <span class="k">in</span> <span class="n">afAreas</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="n">area</span><span class="p">.</span><span class="n">active</span><span class="p">,</span> <span class="s">@"Area should be active"</span><span class="p">);</span>
        <span class="n">XCTAssertFalse</span><span class="p">(</span><span class="n">area</span><span class="p">.</span><span class="n">focused</span><span class="p">,</span> <span class="s">@"Area should not be focused"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre>

<p>Alright, so, how do we go about testing my newly refactored code? It poses a little bit of a unique problem, in that my work with this camera is entirely based on clean-room reverse engineering — I don’t have access to any source code or documentation on how this thing is supposed to work. This means that I can’t compile the camera’s code for another platform (say, Mac OS) and host it locally. Additionally, the thing I’m testing isn’t “state” per se — I want to test that the transport itself is stable and reliable, that my messages get to the camera and its responses get back to me.</p>

<p>This leads to a single conclusion: To test my new code, I need to involve a physical, real-life camera.</p>

<p>Oh, boy.</p>

<hr>

<p>Unit testing best practices dictate that:</p>

<ul>
  <li>State isn’t transferred between individual tests.</li>
  <li>Tests can execute in any order.</li>
  <li>Each test should only test one thing.</li>
</ul>

<p>The tests I ended up writing fail all of these practices. Really, they should all be squished into one test, but a single test that’s 350 lines long is a bit ungainly. So, we abuse <code>XCTest</code> to execute the tests in order.</p>

<p>First, we test that we can discover a camera on the network:</p>

<pre><code class="language-objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test_001_cameraDiscovery</span> <span class="p">{</span>
    <span class="n">XCTestExpectation</span> <span class="o">*</span><span class="n">foundCamera</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">expectationWithDescription</span><span class="p">:</span><span class="s">@"found camera"</span><span class="p">];</span>

    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">observer</span><span class="p">)(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">cameras</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="n">cameras</span><span class="p">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">_camera</span> <span class="o">=</span> <span class="n">cameras</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
        <span class="p">[</span><span class="n">foundCamera</span> <span class="n">fulfill</span><span class="p">];</span>
    <span class="p">};</span>

    <span class="p">[[</span><span class="n">DKEOSCameraDiscovery</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">addDevicesChangedObserver</span><span class="p">:</span><span class="n">observer</span><span class="p">];</span>

    <span class="p">[</span><span class="nb">self</span> <span class="nl">waitForExpectationsWithTimeout</span><span class="p">:</span><span class="mf">30.0</span> <span class="nl">handler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[[</span><span class="n">DKEOSCameraDiscovery</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="nl">removeDevicesChangedObserver</span><span class="p">:</span><span class="n">observer</span><span class="p">];</span>
    <span class="p">}];</span>
<span class="p">}</span></code></pre>

<p>…then, we make sure we can connect to the found camera:</p>

<pre><code class="language-objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test_002_cameraConnect</span> <span class="p">{</span>
    <span class="n">XCTAssertNotNil</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">camera</span><span class="p">,</span> <span class="s">@"Need a camera to connect to"</span><span class="p">);</span>
    <span class="n">XCTestExpectation</span> <span class="o">*</span><span class="n">connectedToCamera</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">expectationWithDescription</span><span class="p">:</span><span class="s">@"connected to camera"</span><span class="p">];</span>

    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">camera</span> <span class="nl">connectToDevice</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">XCTAssertNil</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="s">@"Error when connecting to camera: %@"</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
        <span class="p">[</span><span class="n">connectedToCamera</span> <span class="n">fulfill</span><span class="p">];</span>
    <span class="p">}</span> <span class="nl">userInterventionCallback</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">shouldDisplayUserInterventionDialog</span><span class="p">,</span> <span class="n">dispatch_block_t</span> <span class="n">cancelConnectionBlock</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="nb">false</span><span class="p">,</span> <span class="s">@"Can't test a camera in pairing mode"</span><span class="p">);</span>
    <span class="p">}];</span>

    <span class="p">[</span><span class="nb">self</span> <span class="nl">waitForExpectationsWithTimeout</span><span class="p">:</span><span class="mf">30.0</span> <span class="nl">handler</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="p">}</span></code></pre>

<p>(I’m a particular fan of that <code>XCTAssertTrue(false, …</code> line in there.)</p>

<p>Next, because we’re talking to a real-life camera, we need to make sure its physical properties (i.e., ones we can’t change in software) are correct for testing:</p>

<pre><code class="language-objc"><span class="p">-(</span><span class="kt">void</span><span class="p">)</span><span class="nf">test_003_cameraState</span> <span class="p">{</span>
    <span class="n">XCTAssertNotNil</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">camera</span><span class="p">,</span> <span class="s">@"Need a camera to connect to"</span><span class="p">);</span>
    <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">camera</span><span class="p">.</span><span class="n">connected</span><span class="p">,</span> <span class="s">@"Camera should be connected"</span><span class="p">);</span>

    <span class="n">XCTAssertEqual</span><span class="p">([[</span><span class="nb">self</span><span class="p">.</span><span class="n">camera</span> <span class="nl">valueForProperty</span><span class="p">:</span><span class="n">EOSPropertyCodeAutoExposureMode</span><span class="p">]</span> <span class="n">intValue</span><span class="p">],</span> <span class="n">EOSAEModeManual</span><span class="p">,</span>
                   <span class="s">@"Camera should be in manual mode for testing."</span><span class="p">);</span>

    <span class="n">XCTAssertEqual</span><span class="p">([[</span><span class="nb">self</span><span class="p">.</span><span class="n">camera</span> <span class="nl">valueForProperty</span><span class="p">:</span><span class="n">EOSPropertyCodeLensStatus</span><span class="p">]</span> <span class="n">intValue</span><span class="p">],</span> <span class="n">EOSLensStatusLensAvailable</span><span class="p">,</span>
                   <span class="s">@"Camera should have an attached lens for testing"</span><span class="p">);</span>

    <span class="n">DKEOSFileStorage</span> <span class="o">*</span><span class="n">storage</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">camera</span><span class="p">.</span><span class="n">storageDevices</span><span class="p">.</span><span class="n">firstObject</span><span class="p">;</span>
    <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="n">storage</span><span class="p">.</span><span class="n">capacity</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">@"Camera should have an SD card inserted for testing."</span><span class="p">);</span>
    <span class="n">XCTAssertTrue</span><span class="p">(</span><span class="n">storage</span><span class="p">.</span><span class="n">availableSpace</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">,</span> <span class="s">@"Camera storage should have at least 100Mb available for testing."</span><span class="p">);</span>
<span class="p">}</span></code></pre>

<p>Once the camera is connected and verified to be in an agreeable state, we can start testing.</p>

<ul>
  <li>
    <p>In order to test against the case of large amounts of traffic causing dropouts that drove me to insanity that night, I run through every single valid value for all of the exposure settings (ISO, aperture, shutter speed) as fast as I possibly can.</p>
  </li>
  <li>
    <p>To test event processing works correctly, I test that streaming images from the camera’s viewfinder works.</p>
  </li>
  <li>
    <p>To test filesystem access, I iterate through the camera’s filesystem.</p>
  </li>
  <li>
    <p>To test commands, I take a photo.</p>
  </li>
  <li>
    <p>To test that large transfers work, I download the photo the previous test took - about 25Mb on this particular camera.</p>
  </li>
  <li>
    <p>And finally, I test that disconnecting from the camera works cleanly.</p>
  </li>
</ul>

<p>As you can see, this is a pretty comprehensive set of tests — each one is meticulous about ensuring the responses are correct, that the sizes of the data packets received match the sizes reported by the camera, etc — they’re essentially an automated <a href="http://en.wikipedia.org/wiki/Smoke_testing_(software)">smoke test</a>.</p>

<p>The next challenge is to get these to run without human intervention. I can’t just leave the camera on all the time — if it doesn’t receive a network connection within a minute or two of powering on it’ll error out and you need to restart the Wifi stack to connect again — something not possible without human intervention. Perhaps a software-controlled power switch would allow the tests to power on and off the camera at will. However, that’s a challenge for another day.</p>

<h3 id="i-told-you-so-damnit">I TOLD YOU SO, DAMNIT</h3>

<p>So. In <a href="/blog/2015/01/secret-diary-of-a-side-project-part-1/">an earlier post</a> I talked about being restrained when you think about refactoring code, and my ordeal here is exactly why. At the beginning it looked simple enough to do, but I ended up losing <em>way</em> too much time and <em>way</em> too much sleep over it, and when it finally appeared to work I had no data on whether it was any good or not. If I’d gone through all of that with no good reason it would’ve been a <em>complete</em> waste of time and energy.</p>

<p>But! Thanks to all this work, you can now cancel out of camera pairing from your iOS device! It’s a disproportional amount of work for a single button, but that’s the way software development goes sometimes — no matter how obvious the next task might look, tomorrow’s just a mystery, and that’s okay. It’s what makes it fun!</p>

<p>Plus, I now have a decent set of smoke tests for communicating with a real-life camera, which is something I’ve been wanting for a long time — a nice little silver lining!</p>

<h3 id="epilogue">Epilogue</h3>

<p><em>After</em> implementing all this, I decided to have a look at how the camera’s official software approached this problem, UI-wise.</p>

<p class="center no-border"><img src="/pictures/secret-diary/canon-pairing.png" width="394"></p>

<p>It looks like a floating panel, but it behaves like a modal dialog. There’s no way to cancel from the application at <em>all</em> and if you force quit it, the software ends up in a state where it thinks it isn’t paired and the camera thinks it <em>is</em> paired, and the two will flat-out not talk to one another.</p>

<p><em>The mobile app can’t possibly be this bad</em>, I thought, and went to experiment. There’s no screenshot here because there is <em>no</em> UI in the iOS app to help with pairing at all — it just says “Connecting…” like normal and you need to figure out that you need to look at the camera on your own.</p>

<p>It’s like they don’t even <em>care</em>.</p>

<hr>

<p>Next time on <em>Secret Diary of a Side Project</em>, we’ll talk about how to make the transition to working full-time on your side project at home in a healthy way, both mentally and physically.</p>

<div class="footnotes">
  <ol>
    <li id="fn:secret-diary-part-5-1">
      <p>The problem, if you’re interested, is that the camera throws away any messages received while it’s processing a prior message. This was accidentally worked around in my old code by blocking while waiting for a response. The solution was to maintain a message queue and disallow a message to be sent until a response to the previous one has been received. <a href="#fnref:secret-diary-part-5-1" class="reversefootnote">↩</a></p>
    </li>
  </ol>
</div>

		<hr />
	</article>
</section>



<section>
	<div class="container">
		<h4 class="more-posts-link-footer"><a href="/blog/archives/#front-page-cutoff">Older Posts →</a></h4>
	</div>
</section>
            </div>
          </section>
        </div>

      <!-- Footer -->
        <section id="footer">
          <div class="container">
            <ul class="copyright">
              <li>&copy; Daniel Kennett. All rights reserved.</li><li>Design: <a href="http://html5up.net">HTML5 UP</a></li>
            </ul>
          </div>
        </section>

    </div>
  </body>
</html>