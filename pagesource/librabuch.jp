<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="generator" content="Hugo 0.19-DEV" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,600' rel='stylesheet' type='text/css'>
    <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.5/js/materialize.min.js"></script>
    <script src="/js/prism.js"></script>
    <script src="/js/trunk8.min.js"></script>
    <link type="text/css" rel="stylesheet" href="/css/prism.css" media="screen,projection"/>
    <link type="text/css" rel="stylesheet" href="/css/style.css" media="screen,projection"/>
    
    <title>Librabuch</title>
    <meta property='og:title' content="Librabuch">
    <meta property="og:type" content="website">
    
    <meta property="og:url" content="https://librabuch.jp/">
    
    
    <meta property="og:image" content="https://librabuch.jp/img/librabuch-logo-og.png">
    
    <meta name="google-site-verification" content="a3QckLnGCZ1pQab-CsREWqxwvi0qhY-L8x3XUyEL0t0">
</head>
<body>
<header class="site">
    <nav>
        <a href="https://librabuch.jp/" class="brand-logo logo-wide hide-on-med-and-down">Librabuch</a>
        <a href="https://librabuch.jp/" class="brand-logo logo-short hide-on-large-only">Librabuch</a>
        <ul class="right hide-on-med-and-down">
            <li><a href="https://librabuch.jp/">HOME</a></li>
            <li><a href="/page/author/">AUTHOR</a></li>
        </ul>
        <ul id="slide-out" class="side-nav">
            <li><a href="https://librabuch.jp/">HOME</a></li>
            <li><a href="/page/author/">AUTHOR</a></li>
        </ul>
        <a href="#" data-activates="slide-out" class="button-collapse right"><i class="mdi-navigation-menu left"></i></a>
    </nav>
</header>
<script>
    $('.button-collapse').sideNav({
                edge: 'right'
            }
    );
</script>
<main>

<div class="row">

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/10/hello-polymer/">いまさら聞けない Polymer 入門 - Polyfills は Web Components の夢をみるか</a></span>
            <p class="summary">このところ Polymer ならびにその関連技術と格闘していたので知見を記録します。
Polymer とは  Polymer Project  Google 社のエンジニアが生みだした JavaScript ライブラリで、Web Comonents の要素技術を採用しつつ UI コンポーネントのセットを簡単に利用できるよう構築されたもの、というのが、雑な説明ですが Polymer のあらましです。Material Design な UI を簡単に導入できることもよく語られる特徴です。
Polyfills とは Polyfills とは、非モダンブラウザでもモダンブラウザに実装された技術 &ndash; HTML5 や JavaScript、CSS3 &ndash; が動作するよう、どうにかこうにか頑張ろうという人類の営みの総称です（たぶん）。したがって Polyfills という概念の内側に Polymer という実装が存在するという位置づけと言えるでしょう。Polymer は、ブラウザ、ブラウザのバージョン、デバイスという垣根を超えるものとして期待されています。あるいは、いました。
Polyfills について語るうえで切っても切れないのが、Web Components です。
 WebComponents.org  Web Components は新しいものではないため、以下を例とする詳細な解説が既に存在します。
 Web Componentsが変えるWeb開発の未来 | HTML5Experts.jp  以下が Web Components の要素技術であるとされます。
 HTML Templates HTML Imports Custom Elements Shadow DOM  Polymer のいいところ 一般に Polymer 導入のモチベーションとなる点をあげます。</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-10-14 Fri
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/10/hello-polymer/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/09/pyconjp-2016-report/">キャズムを大きく超えた Python - PyCon JP 2016 振り返り</a></span>
            <p class="summary">PyCon JP 2016 に参加しました。Development Splint の日程をまだ残しておりますが Conference Day の振り返りです。ちなみに自分の活動振り返りおよび感じたことなどがおもで他の登壇者のかたのセッションのレポートはありません。つまりポエムです。
PyCon JP 2016 とわたし 昨年は以下のエントリにて、CfP だせばよかったかなとぼやいていた次第ですが、
 PyCon JP 2015 振り返り コミュニティのライフサイクルについて - Librabuch  今年はイベント開催中の（会社的な）状況がまったく見えなかったので CfP を見送ってしまいました。Lightning Talks については、ネタが思いつけば手を上げたかったのですが、至らず。いま思えば SymPy ネタなどで攻めていけばよかったですね。PyCon JP 2017 ないし、APAC で CfP 出そうかなとは考えています。
今回、PyCon JP としても初めての試みであった Product Fair の モデレーターをつとめる機会を賜りまして、セッションという意味での活動は Product Fair が主でありました。
Product Fair を終えて 上述のとおり Product Fair の モデレーター を担当しました。今回の機会を賜りましたことに関係者の皆様へは心よりの御礼申しあげます。
過去のモデレーター経験というと エンジニアサポート CROSS 2015 での Python コミュニティの集いが印象深いです。
 「Webアプリケーションから機械学習まで ～ PythonとPythonコミュニティの2015年大展望 」レポート：エンジニアサポート CROSS 2015 レポート｜gihyo.</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-09-23 Fri
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/09/pyconjp-2016-report/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/07/elasticsearch-rebuild-index/">Go言語で Elasticsearch Index の再構築を行う</a></span>
            <p class="summary">Elasticsearch で Index の再構築を行う場合、ダウンタイムを低減するために Alias 機能を利用するのが常道のようです。
 Index Aliases and Zero Downtime | Elasticsearch: The Definitive Guide [2.x] | Elastic Elasticsearch インデックス・エイリアス — Hello! Elasticsearch. — Medium  今回 Elasticsearch を Go言語で利用するにあたり、elastic を利用します。elastic は Elasticsearch の クライアントライブラリです。
 olivere/elastic: Elasticsearch client for Go. Go言語向け Elasticsearch クライアント Elastic の紹介とコントリビューション | カメリオ開発者ブログ  なお、Elasticsearch は REST API が整備されているので、ライブラリ や SDK がなくとも利用は平易です。JSON の処理を手間に感じるようであれば、ライブラリの利用を検討するとよいと思います。
アイデア概要 Alias を利用するにあたり、Index の命名を以下のようにします。
 Index名 = Alias名 - タイムスタンプ (などのなにか)  具体的な状態を以下に示します。</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-07-03 Sun
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/07/elasticsearch-rebuild-index/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/07/aws-lambda-environment/">AWS Lambda で本番/検証環境を切り替える</a></span>
            <p class="summary">AWS Lambda で本番/検証環境を切り替える場合、いくつかの手段があります。今回はContext オブジェクトから得られる関数名を利用するアプローチを紹介します。なおコード例は Python です。
前提： AWS Lambda に環境変数はない AWS Lambda に 環境変数はありません。機能追加が待ち望まれる今日この頃ですが、外部サービスのトークンなど、セキュリティ上の観点からソースコードに埋め込みたくない情報を利用する場合は、AWS KMS を利用するのが宜しいと思います。
本番/検証環境の切替方法 ところで、ソースコード中で $ENV などの環境変数の値に応じて、設定ファイルの読み込み先やログ出力のレベルを変更するなど、プログラムの動作を変更したい場合があります。
上述のとおり、AWS Lambda では環境変数は利用できないので、どこかから情報を取得する必要があります。
1つの方法として、Build/Deploy のプロセスの中で値を変更する策が考えられます。環境毎に設定ファイルを用意しておき、ファイル名を変更してもよいかも知れません。しかし、CI サービスを利用しない/できない場合や、その他要因でこの方法がとれない場合、以下の方法を検討してみてください。
context.function_name の利用  The Context Object (Python) - AWS Lambda  AWS Lambda の Entry Point (標準では lambda_handler()) へ渡される2つのオブジェクトのうち、context からは AWS Lambda の環境に関するさまざまな情報を取得できます。内容は上述の公式ドキュメントが詳しいです。
本番/検証環境それぞれで別の Function として Deploy している場合、動作の切替判定に context.function_name が利用できます。
def lambda_handler(event, context): if context.function_name == &quot;your-awesome-function&quot;: log_level = &quot;ERROR&quot; elif context.function_name == &quot;dev-your-awesome-function&quot;: log_level = &quot;INFO&quot; else: log_level = &quot;DEBUG&quot;  Unit Test AWS Lambda は特性上、手元に実行環境がないため、簡単なスクリプトでも Unit Test を準備しておくことをおすすめします。Unit Test では、Context オブジェクトは以下のように生成し、lambda_hanlder() に渡します。</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-07-02 Sat
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/07/aws-lambda-environment/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/04/python-vendoring-lambda-deploy/">Python で パッケージを vendoring しつつ AWS Lambda へデプロイ</a></span>
            <p class="summary">Glide で Go 言語のパッケージ管理と vendoring - Librabuch で書いた vendoring のプロセスは現状そこそこうまく回っています。
最近 AWS Lambda のコードを Python で書く機会が多いのですが、ここでも vendoring することにしました。
課題 AWS Lambda で Python の サードパーティ・パッケージを利用する場合、デプロイファイル群の中にパッケージを含める必要があります。よくサンプルでは、プロジェクト直下に pip install requests -t . などとしたのちにプロジェクトのディレクトリごと zip で固める方法が提示されます。
元々、関係無いファイルが含まれるディレクトリごとデプロイするのはあまり上品ではないなぁと思っていたので、対象物だけ明示的に指定するようにしていたのですが、依存パッケージに変化があった際にデプロイスクリプトを追従させるのも手間でした。
解決案 上述のとおり、Lambda へのアップロードにはパッケージを含める必要があるので、vendoring を行ったうえで、vendoring ディレクトリをデプロイファイル群に含めるようにします。
vendoring は以下のコマンドで実行できます。
mkdir ./vendor pip install -U -r requirements.txt -t ./vendor # もちろん個別指定でも OK # pip install -U requests -t ./vendor  vendor ディレクトリを認識させるために、lambda_function.py にコードを追加します。
import os import sys # 以下の行を追加 sys.</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-04-29 Fri
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/04/python-vendoring-lambda-deploy/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/04/aws-cognito-user-pools/">AWS Cognito User Pools は人類待望の IDaaS かも</a></span>
            <p class="summary">引き続き主語大きめでお届けしております。
人類に IDaaS は早すぎた話 で IDaaS について触れました。昨日、Amazon Web Service から関連するリリースが出ました。
 New – Your User Pools for Amazon Cognito | AWS Blog  これまでの Cognito これまでも Amazon Cognito は、モバイルアプリや JavaScript アプリケーションから、AWS のサービスにアクセスするための認可・認証の機能を提供していました。しかし、ユーザーのパスワードや属性情報を Cognito が保持できるわけではありませんでした。また、Webサービスにおける一般的な認可のための機能やフロー &ndash; パスワードの複雑性の管理や Emailアドレス確認のプロセス &ndash; は提供されていなかったため、いわゆる IDaaS とは同カテゴリながら少し異なる位置づけでした。
これからの Cognito User Pools の登場によって、Cognito を本格的な IDaaS として利用開始できることが期待されます。
他の IDaaS に対する優位性は、User Pools が AWS の中に存在するという点に尽きます。サービスの継続性や堅牢性については相当のレベルで担保されることになると考えて差し支えないでしょう。一方、SDK 以上のツールは今後も提供されないと考えられるため、Auth0 の Lock のようなエレガントな認証インターフェースを実現したければ自前で実装するしかありません。この点については他の IDaaS に優位性がありそうです。
IDaaS についての補足 IDaaS というワードで調べると、サービスの種類はそこまで多くありません。しかし色々調査した結果、 BaaS や mBaaS のプラットフォームの中にユーザー認証機能があり、IDaaS の役割の一部または全部を兼ねているケースのほうが多いことがわかりました。例えば、Firebase や ニフティクラウド mobile backend などが該当します。IDaaS の機能のみが必要であれば IDaaS を、BaaS的ななにかも必要であれば BaaS も含めて利用サービスを検討するのが良さそうです。</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-04-21 Thu
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/04/aws-cognito-user-pools/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/04/cloudfront-invalidations/">Amazon CloudFront Origin Path と Invalidations の関係</a></span>
            <p class="summary">Amazon CloudFront の Origin を Amazon S3 に設定し、かつ、Origin Path が root (S3 Bucket 直下) ではない場合、Invalidations の Path との関係が気になっていたのでその検証結果の備忘録です。
結論としては、Origin Path のディレクトリは含めずにその直下から Invalidation の Path を指定するのが正しいようです。
まとめると以下です。
 https://librabuch.jp/index.html に対して Invalidations を行う場合で S3 Bucket に www ディレクトリを作成し、CloudFront の Origin Path を www/ に設定している場合 Invalidations の Path は /www/index.html ではなく /index.html と指定する。  なお、/ と /index.html は当然異なるので、https://librabuch.jp に対して Invalidations を実行したい場合は path を / に指定する必要があります。</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-04-09 Sat
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/04/cloudfront-invalidations/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    
        <div class="col m12 l6">
    <div class="card white hoverable">
        <div class="card-content">
            <span class="card-title"><i class="material-icons small left grey-text text-darken-2">bookmark</i><a href="https://librabuch.jp/blog/2016/04/go-lang-vendoring-glide/">Glide で Go 言語のパッケージ管理と vendoring</a></span>
            <p class="summary">Go 言語の vendoring ツールとして Glide を使い始めました。
 Masterminds/glide: Package Management for Golang  vendoring とは vendoring とは、アプリケーションが依存する 3rd-Party パッケージ/ライブラリのソースコードそのものを自身のレポジトリに含めて管理する試みのこと、を指す用語の模様です（たぶん）。
Node.js における package.json に依存関係が書かれている状態だけでは vendoring ではないです。node_modules ディレクトリ自体をレポジトリの管理対象に含めることで vendoring ができている状態、と言えるようになります。
Node.js (というか npm) に限らず、node_modules 的な役割のディレクトリは .gitignore で無視するのがよくあるプロジェクトの管理方法です。vendoring 自体の厳密な定義の話や、vendoring することの是非については言及の対象外として、Go 言語で vendoring を行う話に進めます。
2点だけ補足をすると、Go 言語は外部パッケージを go get で Github などのレポジトリから直接ソースコードを取得してくる方式になっており、元来 vendoring とは相性がよいものでした。加え、npm の left-pad 問題もあり、多少プロジェクトのレポジトリが肥大化したとしても依存しているコードは自身の責任で保全できていたほうがいいだろうと考えたのが、vendoring を始めた動機です。
Go 1.6 のパッケージ管理について Go 1.6 からの標準機能として、コンパイラが $GOPATH 以外に ./vendor ディレクトリ配下を探索するようになりました。この点の歴史的経緯については既に情報が多いので割愛します。これから Go を始める方はそうなったことだけ把握していれば問題無いと思います。
 参考 : Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA  この標準機能に、いまでは主要な Go 言語の 3rd-Party パッケージが対応しています。人気があり現在もメンテナンスが続いていそうなパッケージをいくつか列挙します。</p>
        </div>
        <div class="card-action">
            <div class="left-align row">
            <i class="material-icons left">today</i>
                2016-04-09 Sat
            </div>
            <div class="center-align">
                <a href="https://librabuch.jp/blog/2016/04/go-lang-vendoring-glide/" class="waves-effect waves-light btn"><i class="material-icons right">open_in_new</i>READ</a>
            </div>
        </div>
    </div>
</div>
<script>
    $("p.summary").trunk8({
        lines: 3
    });
    $("span.card-title").trunk8({
        lines: 1
    });
</script>

    

    
<hr>
<div class="section pagenate center-align">

    

    
    <a class="next waves-effect waves-light btn grey lighten-4 grey-text text-darken-4" href="/blog/archive/2/"><i class="material-icons right">keyboard_arrow_right</i>NEXT</a>

    
</div>




</div>
</main>

<footer class="page-footer">
    <div class="container">
        <div class="row">
            <div class="col l6 s12">
                <h5 class="white-text">Today's Proverb</h5>
                <p class="grey-text text-lighten-4" style="font-style:italic;">Η ΑΛΗΘΕΙΑ ΕΛΕΥΘΕΡΩΣΕΙ ΥΜΑΣ</p>
            </div>
            <div class="col l4 offset-l2 s12">
                <h5 class="white-text">Links</h5>
                <ul>
                      <li><a class="grey-text text-lighten-3" href="https://twitter.com/iktakahiro">Twitter</a></li>
                      <li><a class="grey-text text-lighten-3" href="https://github.com/iktakahiro/iktakahiro">Github</a></li> 
                    <li><a class="grey-text text-lighten-3" href="https://www.facebook.com/iktakahiro">Facebook</a></li> 
                </ul>
            </div>
        </div>
    </div>
    <div class="footer-copyright">
        <div class="container">
            &copy; 2016 Librabuch
            - Powered by <a class="grey-text text-lighten-4" href="http://gohugo.io" target="_blank" rel="nofollow">Hugo</a>, Theme is <a href="https://github.com/iktakahiro/hugo_theme_material_hugo" class="grey-text text-lighten-4" target="_blank" rel="nofollow">Material Hugo</a>
        </div>
    </div>
</footer>

<script type="text/javascript">
    Prism.plugins.NormalizeWhitespace.setDefaults({
        'remove-trailing': true,
        'remove-indent': true,
        'left-trim': true,
        'right-trim': true,
        'remove-initial-line-feed': true

    });
    
    $("table").addClass("striped");
</script>


<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-37318190-1', 'auto');
    ga('send', 'pageview');
</script>


<script>

</script>
</body>
</html>