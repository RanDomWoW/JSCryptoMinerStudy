

<!DOCTYPE html>
<html lang="en-gb">
<head>
    <!-- META ******************************************************************************************************************* -->
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    
    
        <title>Avro Energy: Gas and Electricity Supplier&thinsp;&mdash;&thinsp;Simple Switch and Save</title>
        <meta name="description" content="Switch and Save on Gas and Electricity. Switch to Avro and save up to &pound;300 on your utilities. Get a quote from Avro Energy to find out how much you can save!" />
    

    <meta name="robots" content="Index, Follow" />
    <link rel="shortcut icon" type="image/x-icon" href='/favicon.ico' />
    <link rel="icon" type="image/x-icon" href='/favicon.ico' />
    <link type="text/plain" rel="author" href='/humans.txt' />
    <!-- CSS ******************************************************************************************************************** -->
    <link href='//fonts.googleapis.com/css?family=Ubuntu:300,300italic,700,700italic,400,400italic,500,500italic'
        rel='stylesheet' type='text/css' /> 
    
    
    <link href="Styles/CSS/Owl/owl.carousel.css" rel="stylesheet" type="text/css" />
    <link href="Styles/CSS/Owl/owl.theme.css" rel="stylesheet" type="text/css" />
    <link href="Styles/CSS/Owl/owl.transitions.css" rel="stylesheet" type="text/css" />
    <style type="text/css">
        div#body
        {
            padding-top: 10px;
        }
        div.company-point li
        {
            line-height: 2;
        }
        button, input[type="submit"], a.button
        {
            border-radius: 0px;
            font-weight: normal;
        }
        @media screen and (min-width:992px)
        {
            div.body div.container
            {
                min-height: 415px;
            }
            div.fix-height > div.row, div.fix-height > div.row > div
            {
                height: inherit;
            }
        }
    </style>

    <style type="text/css">
        @media (max-width:767px)
        {
            #homeEnergy
            {
                display: none;
            }
            #mobileContact, #mobileLogin
            {
                display: inline-block;
            }
        }
        @media (min-width: 767px)
        {
            #mobileContact, #mobileLogin
            {
                display: none;
            }
        }
        .navbar-default .navbar-toggle.no-border
        {
            border: none;
            margin-top: 20px;
            margin-top: 2rem;
        }
        .navbar-default .navbar-toggle.no-border:hover, .navbar-default .navbar-toggle.no-border:active, .navbar-default .navbar-toggle.no-border:focus
        {
            background: inherit;
        }
        @media (min-width: 768px max-width: 1280)
        {
            #hamburger
            {
                height: 50px;
                width: 50px;
            }
        }
        button#navBtn
        {
            width: auto;
        }
    </style>

    <!-- ************************************************************************************************************************ -->
    
    <link rel="stylesheet" type="text/css" href='/Styles/CSS/Vince.css?MOD=2017%2D09%2D05T13%3a42%3a32' />
    


</head>
<body>
    <div id="popUpMessage" class="master-message error">
        
    </div>
    
    
    <div id="mainContainer">
        <!-- BODY *********************************************************************************************************************** -->
        <!-- New Nav Bar *********************************************************************************************************************** -->
        <nav id="homeEnergy" class="navbar navbar-default arial" style="width: 100%; margin: 0px;
            border: none; z-index: 100; position: relative;">
            <div class="container">
                <div class="navbar-header">
                </div>
                <div>
                    <ul class="nav navbar-nav navbar-left" style="float: left;">
                        <li><a class="navbar-brand" href="/" style="text-decoration: none;
                            background-color: White; float: left;">Home Energy</a></li>
                    </ul>
                    <ul class="nav navbar-nav navbar-right" style="float: right;">
                        <li><a href="/Contact.aspx">Contact Us</a></li>
                        <li><a href="/Account/Login.aspx"><span style="color: gray;
                            padding: 20px 25px 20px 25px; background-color: #9f0; width: 0">Login</span></a></li>
                    </ul>
                </div>
            </div>
        </nav>
        <nav class="navbar navbar-default navbar-static-top arial" style="width: 100%; margin: 0px;
            background-color: White;">
            <div class="container">
                <div class="navbar-header">
                    <button id="navBtn" type="button" class="navbar-toggle no-border" data-toggle="collapse"
                        data-target="#navBar">
                        <img id="hamburger" alt="Toggle navigation" src='/images/hamburger.png' />
                        
                    </button>
                    <a class="navbar-brand new-padding" href='/Default2'>
                        <img src="/images/Logo/AVRO.png" alt="" style="width: 180px;
                            height: 60px;" /></a>
                </div>
                <div id="navBar" class="navbar-collapse collapse" style="background-color: White;
                    border: none;">
                    <ul id="mainDropDown" class="nav navbar-nav navbar-right" style="padding-top: 15px;
                        display: table; margin-left: auto; margin-right: auto; float: none;">
                        <li><a href="/Default.aspx">Home</a></li>
                        <li><a href="/Compare2.aspx">Get A Quote</a></li>
                        <li><a href="/Advice/Default.aspx">Help & Advice</a></li>
                        <li><a href="/EnergySaving.aspx">Energy Saving</a></li>
                        <li><a href="/About.aspx">About Us</a></li>
                        <li id="mobileContact"><a href="/Contact.aspx">
                            Contact Us</a></li>
                        <li id="mobileLogin"><a href="/Account/Login.aspx">
                            Login</a></li>
                    </ul>
                </div>
                
            </div>
        </nav>
        <!-- CONTENT********************************************************************************************************************* -->
        
    <div id="siteWarning" class="container-fluid arial hidden">
        <div class="row">
            <div class="col-md-12">
                <p>
                    </p>
            </div>
        </div>
    </div>
    <div id="body arial" class="default2">
        <div id="main">
            <div class="container">
                <div class="row">
                    <div class="col-md-5">
                        <h1 id="mainTitle">
                            Switch Gas <span class="lower">and</span> Electric</h1>
                        <div id="mainCarousel" class="owl-carousel">
                            <div>
                                <h2>
                                    <span class="bright">Simple</span> gas <span class="lower">and</span> electricity</h2>
                                <p>
                                    Our approach offers <span class="bright">simplicity</span> when you need it most
                                    and <span class="bright">savings</span> on your energy bills.</p>
                            </div>
                            <div>
                                <h2>
                                    <span class="bright">Save</span> up to &pound;300<a href="#starOne" class="to-note">*</a></h2>
                                <p>
                                    <span class="bright">Save money on energy</span> to spend on more of the important
                                    things that life has to offer.
                                </p>
                            </div>
                            <div>
                                <h2>
                                    UK <span class="bright">support</span> team</h2>
                                <p>
                                    The Avro Support team is <span class="bright">UK based</span> offering a friendly
                                    and convenient approach to customer service.
                                </p>
                            </div>
                            <div>
                                <h2>
                                    <span class="bright">No</span> exit <span class="lower">or</span> cancellation fees</h2>
                                <p>
                                    when you switch <span class="bright">direct</span> through us</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-7">
                        <div id="sliderHolder">
                            <img id="mainSlider" src="Images/MainSlider.jpg" alt="Lady working in call centre" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="pointsHolder">
            <div class="container">
                <section id="Points">
                    <div id="companyPoints" class="row">
                        <div class="col-md-4">
                            <div class="company-point">
                                <img alt="Shoping" src="Images/B1.jpg" />
                                <div>
                                    <h3>
                                        <span class="bright">Saving</span> you money</h3>
                                    <ul>
                                        <li>Low Priced Gas and Electricity tariffs</li>
                                        <li>No Exit or Cancellation Fees <br />when you switch direct </li>
                                        <li>Monthly statements for your usage</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="company-point">
                                <img alt="Relaxing with family" src="Images/B2.jpg" />
                                <div>
                                    <h3>
                                        <span class="bright">Simple</span> <span class="lower">and</span> easy</h3>
                                    <ul>
                                        <li>Simplicity to your Energy Supply</li>
                                        <li>Energy 24/7 via your online account</li>
                                        <li>Bills and Communication that’s easy</li>
                                        <li>to understand</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="company-point">
                                <img alt="Call centre" src="Images/B3.jpg" />
                                <div>
                                    <h3>
                                        UK Customer <span class="bright">Support</span></h3>
                                    <ul>
                                        <li>UK-based Customer Service</li>
                                        <li>Support via Telephone and Email</li>
                                        <li>Quick Responses to your Queries</li>
                                        <li>Clear and Concise Communication</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
        <div class="container-fluid" style="background-color: #e7e7e7;">
            <div class="row">
                <div class="col-md-12">
                    <div id="newSteps" class="container" style="background-color: #e7e7e7;">
                        <div class="row text-center" style="padding-top: 30px; padding-bottom: 50px;">
                            <h2>
                                Simplicity <span class="lower">in</span> Switching your Energy</h2>
                            <h5>
                                Quote <span class="lower">and</span> Switch your Gas <span class="lower">and</span>
                                Electricity <span class="lower">in</span> minutes</h5>
                        </div>
                        <div class="row" style="padding-bottom: 50px;">
                            <div class="col-md-3 text-center">
                                <img src="/images/magnify.png" alt="" style="height: 57px;" />
                                <h4>
                                    Step 1</h4>
                                <p>
                                    Get a quote, choose your tariff and apply online or over the phone</p>
                            </div>
                            <div class="col-md-3 text-center">
                                <img src="/images/mail.png" alt="" style="height: 57px;" />
                                <h4>
                                    Step 2</h4>
                                <p>
                                    Receive via Email your welcome pack containing your contract details and switch date</p>
                            </div>
                            <div class="col-md-3 text-center">
                                <img src="/images/arrows.png" alt="" style="height: 57px;" />
                                <h4>
                                    Step 3</h4>
                                <p>
                                    We’ll get in touch with your current supplier to arrange the switch</p>
                            </div>
                            <div class="col-md-3 text-center">
                                <img src="/images/tick.png" alt="" style="height: 57px;" />
                                <h4>
                                    Step 4</h4>
                                <p>
                                    Your switch is complete your supply is now with Avro Energy</p>
                            </div>
                        </div>
                    </div>
                    <br />
                    <br />
                </div>
            </div>
        </div>
        <!-- new Avro -->
        <div class="container fix-height" style="padding-top: 40px; padding-bottom: 40px;">
            <div class="row">
                <div id="divNoHassle" class="col-md-6 border-right-md">
                    <h1 class="bright" style="font-size: 60px; font-weight: normal;">
                        <span class="bright">No Installation <span class="lower">and</span> No Hassle</span></h1>
                    <p class="h4-font-size right-md">
                        There are no pipes, wires or meters to install. We don&rsquo;t even need to visit
                        your home to switch you to lower energy prices</p>
                </div>
                <div id="divQuoteSwitch" class="col-md-6 border-left-md">
                    <h1 style="font-size: 60px; font-weight: normal;">
                        Simple <span style="color: #969696">Switch <span class="lower">and</span></span>
                        <span class="bright">Save</span></h1>
                    <p style="text-align: left;" class="h4-font-size">
                        Get a quote and switch to see how much you could save with Avro Energy</p>
                </div>
            </div>
        </div>
    </div>

    </div>
    <!-- New FOOTER ***************************************************************************************************************** -->
    <footer class="footer">
        <div id="footer" style="padding-top: 20px;">
            <div class="container arial" style="padding-bottom: 50px">
                <div class="row">
                    <div class="col-md-2">
                        <img src="/images/Logo/AVRO_White.png" alt=""
                            style="width: 150px;" />
                    </div>
                    <div class="col-md-10">
                        <div class="row">
                            <div class="col-md-3">
                                <p>
                                    Switch to us</p>
                                <ul>
                                    <li><a href="/Compare2">Switch Gas and Electricity</a></li>
                                    <li><a href="/Compare2">Get A Quote</a></li>
                                </ul>
                            </div>
                            <div class="col-md-3">
                                <p>
                                    My Account</p>
                                <ul>
                                    <li><a href="/Account/Login">Login</a></li>
                                    <li><a href="/MyNewAvro/MeterReadings">Submit Meter
                                        Reading</a></li>
                                    <li><a href="/MyNewAvro/MyProfile">My profile</a></li>
                                </ul>
                            </div>
                            <div class="col-md-3">
                                <p>
                                    Help and Support</p>
                                <ul>
                                    <li><a href="/Help">Help and Advice</a></li>
                                    <li><a href="/Contact">Contact Us</a></li>
                                    <li><a href="/Advice?S=Emergency%20Numbers">Emergency
                                        Numbers</a></li>
                                    <li><a href="/Advice?S=Emergency">Power Cut or
                                        Gas Leak</a></li>
                                </ul>
                            </div>
                            <div class="col-md-3">
                                <p>
                                    Further Information</p>
                                <ul>
                                    <li><a href="/About">About Us</a></li>
                                    <li><a href="/Prices">Prices</a></li>
                                    <li><a href="/Complaints">If You Are Unhappy</a></li>
                                    <li><a href="/EnergySaving">Energy Saving</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="container arial">
                <div class="row">
                    <div class="col-md-5">
                        <p>
                            <a href="/Terms">Terms &amp; Conditions </a>
                            | <a href="/Privacy">Privacy Policy & Cookies</a></p>
                    </div>
                    <div class="col-md-2 text-md-centre">
                        <p>
                            Avro Energy Limited</p>
                    </div>
                    <div class="col-md-5 text-md-right">
                        <p>
                            Company No. 09174794</p>
                    </div>
                </div>
            </div>
        </div>
    </footer>

    <!-- SCRIPTS *************************************************************************************************************** -->
    <!-- Google Analytics -->
    <script type="text/javascript">
    
(function (i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
    }, i[r].l = 1 * new Date(); a = s.createElement(o),
m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

ga('create', 'UA-70810684-1', 'auto');
ga('send', 'pageview');
    </script>
    <!-- End Google Analytics -->
    <script src='/Scripts/Imported/jquery-1.11.3.min.js'
        type="text/javascript"></script>
    <script src='/Scripts/Imported/jquery-ui-1.11.4.min.js'
        type="text/javascript"></script>
    <script src='/Scripts/Imported/bootstrap.min.js'
        type="text/javascript"></script>
    <script src='/Scripts/bootstrap-select.js' type="text/javascript"></script>
    <script type="text/javascript">
    var aspxControlsMessageTimeOut;
var aspxControlsMessageTimeOutPeriod = 5000;

function AspxControlsWaitCursor() {
    try {
        document.body.style.cursor = 'wait';
    }
    catch (ex) { console.log(ex); }
}

$(document).ready(function () {
    var $masterMessage = $('div.master-message');

    var masterMessage = $masterMessage.text();
    if (!IsNullText(masterMessage) && !IsNullText($.trim(masterMessage))) {
        $masterMessage.fadeIn('fast');
        clearTimeout(aspxControlsMessageTimeOut);
        aspxControlsMessageTimeOut = setTimeout(AspxControlsHideMessage, aspxControlsMessageTimeOutPeriod);
    }

    $masterMessage.click(function () {
        clearTimeout(aspxControlsMessageTimeOut);
        $(this).fadeOut('slow', function () {
            $(this).text('');
        });
    });

    AspxControlsScrollLockStart();
});

function AspxControlsShowErrorMessage(message) {
    AspxControlsShowMessage(message, 'error');
}
function AspxControlsShowWarningMessage(message) {
    AspxControlsShowMessage(message, 'warning');
}
function AspxControlsShowSuccessMessage(message) {
    AspxControlsShowMessage(message, 'success');
}
function AspxControlsShowMessage(message, cssClass) {
    var $masterMessage = $('div.master-message');
    if ($masterMessage !== undefined && typeof ($masterMessage) !== typeof (undefined) && $masterMessage !== null && $masterMessage.length > 0 && $masterMessage !== 'null') {
        $masterMessage.text(message);
        $masterMessage.removeClass('success');
        $masterMessage.removeClass('warning');
        $masterMessage.removeClass('error');
        $masterMessage.addClass(cssClass);
        $masterMessage.fadeIn('fast', function () {
            clearTimeout(aspxControlsMessageTimeOut);
            aspxControlsMessageTimeOut = setTimeout(AspxControlsHideMessage, aspxControlsMessageTimeOutPeriod);
        });
    }
}
function AspxControlsHideMessage() {
    clearTimeout(aspxControlsMessageTimeOut);
    $('div.master-message').fadeOut('fast');
}

function AspxControlsScrollTo(control, duration, offset) {
    try {
        if (!IsNull(control)) {
            var $control = $(control);
            if (!IsNullText($control)) {
                if (IsNullNumber(offset)) { offset = 0; }
                if (IsNullNumber(duration)) { duration = 2000; }
                $('html, body').animate({
                    scrollTop: $control.offset().top - offset
                }, duration);
            }
        }
    }
    catch (ex) { console.log(ex); }
}

function AspxControlsScrollToOffset(control, duration) {
    var offset = 0;
    try {
        var $nav = $('nav.navbar-fixed-top');
        if (!IsNullText($nav)) {
            $nav.each(function () {
                offset += $(this).height();
            });
        }
        var $fixed = $('.fixed');
        if (!IsNullText($fixed)) {
            $fixed.each(function () {
                offset += $(this).height();
            });
        }
    }
    catch (ex) { console.log('AspxControlsScrollToOffset Exception: ' + ex); }
    AspxControlsScrollTo(control, duration, offset);
}

function AspxControlsScrollLockStart() {
    try {
        var $controls = $('.aspx-controls-scroll-lock');
        if (!IsNullText($controls)) {
            $controls.removeClass('aspx-controls-scroll-lock');
            AspxControlsScrollToOffset($controls[0], 500);
        }
    }
    catch (ex) { console.log('AspxControlsScrollLockStart Exception: ' + ex); }
}
    </script>
    <script type="text/javascript">
    var failedClass = 'failed';

function IsNullText(obj) {
    if (!IsNull(obj)) return !(obj.length > 0) || obj === 'null';
    else return true;
}
function IsNullNumber(obj) {
    if (!IsNull(obj)) return isNaN(obj);
    else return true;
}
function IsNull(obj) {
    return !(typeof (obj) !== typeof (undefined) && obj !== undefined && obj !== null);
}
function AspxControlsValidControl(control) {
    var isValid = false;
    var val = null;
    var errorMessage = '';

    var $control = $(control);

    if (!IsNullText($control)) {
        $control.removeClass(failedClass);

        isValid = true;
        val = $control.val();

        if ($control.is('[data-required]')) {
            if (!val || !$.trim(val)) {
                isValid = false;
                errorMessage += "required ";
            }
        }

        if (($control.is('[data-numeric]') || $control.is('[data-numeric-min]') || $control.is('[data-numeric-max]')) && val && $.trim(val)) {
            if (IsNullNumber(val)) {
                isValid = false;
                errorMessage += "Must be a number ";
            }
            else {
                var minValue = null;
                var maxValue = null;
                if ($control.is('[data-numeric]')) {
                    var range = $control.attr('data-numeric');
                    if (!IsNullText(range)) {
                        var parts = range.split('|');
                        for (var i = 0; i < parts.length; i++) {
                            if (!IsNullText(parts[i])) {
                                parts[i] = Number(parts[i]);
                            }
                            else {
                                parts[i] = NaN;
                            }
                        }
                        if (parts.length > 0 && !isNaN(parts[0])) { minValue = parts[0]; }
                        if (parts.length > 1 && !isNaN(parts[1])) { maxValue = parts[1]; }
                    }
                }

                if ($control.is('[data-numeric-min]')) { minValue = Number($control.attr('data-numeric-min')); }
                if ($control.is('[data-numeric-max]')) { maxValue = Number($control.attr('data-numeric-max')); }

                if (!IsNullNumber(minValue)) {
                    if (val < minValue) {
                        isValid = false;
                        errorMessage += 'Must be more than ' + minValue + ' ';
                    }
                }
                if (!IsNullNumber(maxValue)) {
                    if (val > maxValue) {
                        isValid = false;
                        errorMessage += 'Must be less than ' + maxValue + ' ';
                    }
                }
            }
        }
        if ($control.is('[data-email]') && val && $.trim(val)) {
            var regex = /^([A-Z0-9_%\.\+\-])+@(([A-Z0-9\-_])+\.)+([A-Z0-9]{2,10})+$/i;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid email address ";
            }
        }

        if ($control.is('[data-postcode]') && val && $.trim(val)) {
            var regex = /^([A-Z][A-Z0-9]{0,3}\s?[0-9][A-Z0-9]{2})$/i;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid UK postcode ";
            }
        }

        if (($control.is('[data-date]') || $control.is('[data-min-age]') || $control.is('[data-max-age]')) && val && $.trim(val)) {
            var date = ParseDate(val);
            if (IsNull(date)) {
                isValid = false;
                errorMessage = "Must be a date in dd/mm/yyyy format ";
            }
            else {

                if (isValid && $control.is('[data-max-age]')) {
                    var yy = Number($control.attr('data-max-age'));
                    if (!IsNullNumber(yy)) {
                        var minDate = AspxControlsGetDateXYearsAgo(yy);
                        if (date < minDate) {
                            isValid = false;
                            errorMessage = "Must be under " + yy + " years old. ";
                        }
                    }
                }

                if (isValid && $control.is('[data-min-age]')) {
                    var yy = Number($control.attr('data-min-age'));
                    if (!IsNullNumber(yy)) {
                        var maxDate = AspxControlsGetDateXYearsAgo(yy);
                        if (date > maxDate) {
                            isValid = false;
                            errorMessage = "Must be over " + yy + " years old. ";
                        }
                    }
                }

                if (isValid && $control.is('[data-date-from]')) {
                    $fromControl = $('#' + $control.attr('data-date-from'));
                    if (!IsNullText($fromControl)) {
                        var fromDate = ParseDate($fromControl.val());
                        if (!IsNull(fromDate)) {
                            if (date < fromDate) {
                                isValid = false;
                                errorMessage = "Must be more than From Date. ";
                                $fromControl.addClass('failed');
                            }
                        }
                    }
                }

                if (isValid && $control.is('[data-date-min]')) {
                    var fromDate = ParseDate($control.attr('data-date-min'));
                    if (!IsNull(fromDate)) {
                        if (date < fromDate) {
                            isValid = false;
                            errorMessage = "Must be after " + $control.attr('data-date-min') + ". ";
                        }
                    }
                }

                if (isValid && $control.is('[data-date-to]')) {
                    $toControl = $('#' + $control.attr('data-date-to'));
                    if (!IsNullText($toControl)) {
                        var toDate = ParseDate($toControl.val());
                        if (!IsNull(toDate)) {
                            if (date > toDate) {
                                isValid = false;
                                errorMessage = "Must be less than To Date. ";
                                $toControl.addClass('failed');
                            }
                        }
                    }
                }

                if (isValid && $control.is('[data-date-max]')) {
                    var toDate = ParseDate($control.attr('data-date-max'));
                    if (!IsNull(toDate)) {
                        if (date > toDate) {
                            isValid = false;
                            errorMessage = "Must be before " + $control.attr('data-date-max') + ". ";
                        }
                    }
                }
            }
        }

        if ($control.is('[data-mobile]') && val && $.trim(val)) {
            var regex = /^(\+|00)?(((44\s?|0){1}7\s?\d{3}\s?\d{3}\s?\d{3})|((353\s|0){1}8\d{8}))$/i;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid mobile phone number. ";
            }
        }

        if ($control.is('[data-phone]') && val && $.trim(val)) {
            var regex = /^\(?\(?(\+|00)?((44\s?|0|353\s?)(\)\s?)?\d{1,2}\s?\d{0,3}\)?\s?\d{3,4}\s?\d{3,4})$/i;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid phone number. ";
            }
        }

        if ($control.is('[data-bank-account]') && val && $.trim(val)) {
            var regex = /^\d{8}$/;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid bank account number. ";
            }
        }

        if (($control.is('[data-sortcode]') || $control.is('[data-sort-code]')) && val && $.trim(val)) {
            var regex = /^\d{2}(-|\s)?\d{2}(-|\s)?\d{2}$/;
            if ($control.is('[data-sort-code-numeric]')) {
                regex = /^\d{6}$/;
            }
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid sort code. ";
            }
        }

        if ($control.is('[data-currency]') && val && $.trim(val)) {
            var regex = /^[£$]?\d+(\.\d{2})?p?$/;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid amount. ";
            }
        }

        if (($control.is('[data-regex]') || $control.is['[data-regexp]']) && val && $.trim(val)) {
            var exp = null;
            if ($control.is('[data-regex]')) { exp = $control.attr('data-regex'); }
            else { exp = $control.attr('data-regexp'); }

            if (!IsNullText(exp)) {
                var patt = new RegExp(exp, "i");
                if (!patt.test(val)) {
                    isValid = false;

                    var regexMessage = '';
                    if ($control.is('[data-regex-message]')) { regexMessage = $control.attr('data-regex-message'); }
                    else if ($control.is('[data-regex-message]')) { regexMessage = $control.attr('data-regexp-message'); }
                    else { regexMessage = 'not valid'; }

                    errorMessage += regexMessage + ' ';
                }
            }
        }

        if ($control.is('[data-compare-id]') && val && $.trim(val) && isValid) {
            var compareId = $control.attr('data-compare-id');
            if (!IsNullText(compareId)) {
                var $compareControl = $('#' + compareId);
                if (!IsNullText($compareControl)) {
                    var compareVal = $compareControl.val();
                    if (!IsNullText(compareVal)) {
                        if (compareVal != val) {
                            isValid = false;
                            if ($control.is('[data-compare-message]')) {
                                errorMessage += $control.attr('data-compare-message') + ' ';
                            }
                            else {
                                errorMessage += 'Values must match ';
                            }
                        }
                    }
                }
            }
        }

        if ($control.is('data-compare-match') && val && $.trim(val) && isValid) {
            var compareID = $control.attr('data-compare-match');
            if (!IsNullText(compareId)) {
                var $compareControl = $('input[id*="' + compareId + '"]');
                if (!IsNullText($compareControl)) {
                    var compareVal = $compareControl.val();
                    if (!IsNullText(compareVal)) {
                        if (compareVal != val) {
                            isValid = false;
                            if ($control.is('[data-compare-message]')) {
                                errorMessage += $control.attr('data-compare-message') + ' ';
                            }
                            else {
                                errorMessage += 'Values must match ';
                            }
                        }
                    }
                }
            }
        }

        if ((($control.is('[data-password]') || $control.is('[data-new-password]')) && !$control.is('[data-min-length]')) && val && $.trim(val) && isValid) {
            var length = val.length;
            if (length < 6) {
                isValid = false;
                errorMessage += 'Password must be at least six characters long ';
            }
        }

        if ($control.is('[data-must-have-number]') && val && $.trim(val) && isValid) {
            var regex = /\d/;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage = 'Must contain a number. ';
            }
        }

        if ($control.is('[data-must-have-symbol]') && val && $.trim(val) && isValid) {
            var regex = /\w/g;
            var stripped = val.replace(regex, '');
            if (stripped.length < 1) {
                isValid = false;
                errorMessage = 'Must contain a symbol. ';
            }
        }

        if ($control.is('[data-min-length]') && val && $.trim(val) && isValid) {
            var length = $.trim(val).length;
            var minLength = $control.attr('data-min-length');
            if (length < minLength && length > 0) {
                isValid = false;
                errorMessage += 'Must be at least ' + minLength + ' characters long. ';
            }
        }

        if ($control.is('[data-length]') && val && $.trim(val) && isValid) {
            var length = $.trim(val).length;
            var reqLength = Number($control.attr('data-length'));
            if (!isNaN(reqLength) && length !== reqLength) {
                isValid = false;
                errorMessage = 'Must be ' + reqLength + ' characters long. ';
            }
        }

        if ($control.is('[data-mpan]') && val && $.trim(val) && isValid) {
            var regex = /^\d{21}$/;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid MPAN. ";
            }
        }

        if ($control.is('[data-mpan-core]') && val && $.trim(val) && isValid) {
            var regex = /^\d{13}$/;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid MPAN Core. ";
            }
        }

        if ($control.is('[data-mprn]') && val && $.trim(val) && isValid) {
            var regex = /^\d{6,10}$/;
            if (!regex.test(val)) {
                isValid = false;
                errorMessage += "Must be a valid MPRN. ";
            }
        }

        if (!isValid) { $control.addClass(failedClass); }
        else { $control.removeClass(failedClass); }
        if (!isValid) { console.log($control.attr('id') + ': ' + errorMessage); }

        var $validator = $('span[data-validator-for="' + $control.attr('id') + '"]');
        if (!IsNullText($validator)) {
            if (isValid) {
                $validator.text('');
                $validator.hide();
            }
            else {
                if ($control.is('[data-js-validator-text]')) {
                    var jsError = $control.attr('data-js-validator-text');
                    if (!IsNullText(jsError)) {
                        errorMessage = jsError;
                    }
                }
                $validator.text(errorMessage);
                $validator.show();
            }
        }
    }
    return { valid: isValid, value: val };
}


function AspxControlsValidEditor(editor, control) {
    var isValid = false;
    var val = null;
    var errorMessage = '';

    var $control = $(control);

    if (!IsNullText($control)) {
        $control.removeClass(failedClass);

        isValid = true;
        val = editor.getData();
        if ($control.is('[data-required]')) {
            if (!val || !$.trim(val)) {
                isValid = false;
                errorMessage += "required ";
            }
        }

        if (!isValid) { $control.addClass(failedClass); }
        else { $control.removeClass(failedClass); }
        if (!isValid) { console.log($control.attr('id') + ': ' + errorMessage); }

        var $validator = $('span[data-validator-for="' + $control.attr('id') + '"]');
        if (!IsNullText($validator)) {
            if (isValid) {
                $validator.text('');
                $validator.hide();
            }
            else {
                $validator.text(errorMessage);
                $validator.show();
            }
        }
    }
    return { valid: isValid, value: val };
}
function AspxControlsValidRadio(name) {
    var $radios = $('input[name="' + name + '"]');
    var isValid = !IsNullText($radios);
    var val = '';
    var errorMessage = '';

    if (isValid) {
        var $radio = $('input[name="' + name + '"]:checked');
        if (!IsNullText($radio)) {
            val = $radio.val();
        }
        if (IsNullText(val)) {
            if ($radios.eq(0).is('[data-required]')) {
                isValid = false;
                errorMessage = "required";
            }
        }
        if (!isValid) { $radios.addClass(failedClass); }
        else { $radios.removeClass(failedClass); }
        if (!isValid) { console.log(name + ': ' + errorMessage); }
    }

    var $validator = $('span[data-validator-for="' + name + '"]');
    if (!IsNullText($validator)) {
        if (isValid) {
            $validator.text('');
            $validator.hide();
        }
        else {
            $validator.text(errorMessage);
            $validator.show();
        }
    }
    return { valid: isValid, value: val };
}

function AspxControlsValidRadioList(ul) {
    var $ul = $(ul);
    var isValid = !IsNullText($ul);
    var val = '';
    var errorMessage = '';

    if (isValid) {
        var $radios = $ul.find('input[type="radio"]');
        isValid = !IsNullText($radios);
        if (isValid) {
            var $radio = $ul.find('input[type="radio"]:checked');
            if (!IsNullText($radio)) {
                val = $radio.val();
            }
            if (IsNullText(val)) {
                if ($ul.is('[data-required]')) {
                    isValid = false;
                    errorMessage = "required";
                }
            }
        }
        else {
            errorMessage = 'No options found.';
        }

        if (!isValid) { $ul.addClass(failedClass); }
        else { $ul.removeClass(failedClass); }
        if (!isValid) { console.log($ul.attr('id') + ': ' + errorMessage); }

        var $validator = $('span[data-validator-for="' + $ul.attr('id') + '"]');
        if (!IsNullText($validator)) {
            if (isValid) {
                $validator.text('');
                $validator.hide();
            }
            else {
                $validator.text(errorMessage);
                $validator.show();
            }
        }
    }
    return { valid: isValid, value: val };
}

function AspxControlsValidCheckBox(control) {
    var $control = $(control);
    var isValid = !IsNullText($control);
    var checked = false;
    var errorMessage = '';

    if (isValid) {
        checked = $control.is(':checked');

        if (!checked && $control.is('[data-required]')) {
            isValid = false;
            errorMessage += "required ";
        }
        else if (checked && $control.is('[data-not-required]')) {
            isValid = false;
            errorMessage += "must be unchecked ";
        }

        if (!isValid) { $control.addClass(failedClass); }
        else { $control.removeClass(failedClass); }
        if (!isValid) { console.log($control.attr('id') + ': ' + errorMessage); }

        var $validator = $('span[data-validator-for="' + $control.attr('id') + '"]');
        if (!IsNullText($validator)) {
            if (isValid) {
                $validator.text('');
                $validator.hide();
            }
            else {
                $validator.text(errorMessage);
                $validator.show();
            }
        }

        var $parent = $control.parent();
        if (!IsNullText($parent) && $parent.is("[data-required]")) {
            if (isValid) {
                $parent.removeClass(failedClass);
            }
            else {
                $parent.addClass(failedClass);
            }
        }
    }

    return { valid: isValid, value: checked };
}

function AspxControlsFireValidator(control, errorMessage) {
    var $control = $(control);
    if (!IsNullText($control)) {
        $control.addClass(failedClass);

        AspxControlsFireGroupValidator($control.attr('id'), errorMessage);
    }
}

function AspxControlsFireGroupValidator(validatorName, errorMessage) {
    var $validator = $('span[data-validator-for="' + validatorName + '"]');
    if (!IsNullText($validator)) {
        $validator.text(errorMessage);
        $validator.show();
    }
}

function AspxControlsFireRadioValidator(name, errorMessage) {
    var $radios = $('input[name="' + name + '"]');
    if (!IsNullText($radios)) { $radios.addClass(failedClass); }

    var $validator = $('span[data-validator-for="' + name + '"]');
    if (!IsNullText($validator)) {
        $validator.text(errorMessage);
        $validator.show();
    }
}

function AspxControlsResetValidator(control) {
    var $control = $(control);
    if (!IsNullText($control)) {
        $control.removeClass(failedClass);

        var $validator = $('span[data-validator-for="' + $control.attr('id') + '"]');
        if (!IsNullText($validator)) {
            $validator.text('');
            $validator.hide();
        }
    }
}

function ResetRadioValidator(name) {
    var $radios = $('input[name="' + name + '"]');
    if (!IsNullText($radios)) { $radios.removeClass(failedClass); }

    var $validator = $('span[data-validator-for="' + name + '"]');
    if (!IsNullText($validator)) {
        $validator.text('');
        $validator.hide();
    }
}

function ParseDate(str) {
    var returnValue = null;
    if (!IsNullText(str)) {
        var m = str.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
        if (m) {
            returnValue = new Date(m[3], m[2] - 1, m[1]);
            var isValid = true;
            isValid &= returnValue.getDate() == m[1] && returnValue.getMonth() == m[2] - 1 && returnValue.getFullYear() == m[3];
            if (!isValid) { returnValue = null; }
        }
    }
    return returnValue;
}

function TestDataLock() {
    function DataLock(control) {
        if (!IsNullText(control)) {
            var test = { value: '', valid: false };

            var type = $(control).attr('type');

            if (IsNullText(type)) {
                test = ValidControl(control);
            }
            else if (type.toLowerCase() == 'radio') {
                test = ValidRadio(control.attr('name'));
            }
            else if (type.toLowerCase() == 'checkbox') {
                test = ValidCheckBox(control);
            }
            else {
                test = ValidControl(control);
            }

            if (!IsNullText(test.value) && test.valid) {
                $(control).attr('disabled', 'disabled');
            }
        }
    }
    $('input[data-lock]').each(function () {
        DataLock($(this));
    });

    $('textarea[data-lock]').each(function () {
        DataLock($(this));
    });
}

function AspxControlsGetStandardResponse(panel, url, formData, successFunc, failureFunc, validationMessage) {
    if (!IsNullText(url)) {
        if (formData.valid) {

            var $actionContent;
            var $waitGraphic;

            var hasTarget = false;

            if (!IsNullText(panel)) {
                var $panel = $(panel);
                $actionContent = $panel.find('div.action-content');
                $waitGraphic = $panel.find('div.wait-graphic');
                $panel.show();
            }

            if (!IsNullText($actionContent) && !IsNullText($waitGraphic)) {
                $actionContent.hide();
                $waitGraphic.show();
            }

            $.ajax({
                type: 'POST',
                url: url,
                data: JSON.stringify({ data: formData.data }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (data) {
                    if (!IsNull(data) && !IsNull(data.d)) {
                        var returnMessage = data.d.message;

                        if (data.d.success) {
                            if (!IsNull(successFunc)) {
                                try {
                                    successFunc(data.d);
                                }
                                catch (ex) { console.log('Error in success function: ' + ex); }
                            }
                            else {
                                if (IsNullText(returnMessage)) {
                                    returnMessage = 'Success.';
                                }
                                if (panel.is('[data-clear-after-post]')) {
                                    var toClear = Boolean(panel.attr('data-clear-after-post'));
                                    if (IsNull(toClear)) {
                                        toClear = true;
                                    }
                                    if (toClear) {
                                        AspxControlsClearControls(panel);
                                    }
                                }
                                AspxControlsShowSuccessMessage(returnMessage);
                            }
                        }
                        else {
                            if (IsNullText(returnMessage)) {
                                returnMessage = 'Sorry, an error has occurred.';
                            }
                            if (!IsNullText(data.d.level)) {
                                if (data.d.level === 'Warning') {
                                    AspxControlsShowWarningMessage(returnMessage);
                                }
                                else {
                                    AspxControlsShowErrorMessage(returnMessage);
                                }
                            }
                            else {
                                AspxControlsShowErrorMessage(returnMessage);
                            }
                            if (!IsNull(failureFunc)) {
                                failureFunc(returnMessage, data.d);
                            }
                        }
                    }
                    else {
                        AspxControlsShowErrorMessage('Sorry, an error has occurred.');
                        if (!IsNull(failureFunc)) {
                            try {
                                failureFunc('No data was returned from server.');
                            }
                            catch (ex) { console.log('Error in failure function: ' + ex); }
                        }
                    }
                    if (!IsNullText($actionContent) && !IsNullText($waitGraphic)) {
                        $waitGraphic.hide('fast', function () {
                            $actionContent.show('fast');
                        });
                    }
                    if (!IsNullText($('#recaptcha_reload'))) {
                        $('#recaptcha_reload').click();
                    }
                },
                error: function (response) {
                    console.log(response);
                    AspxControlsShowErrorMessage('Sorry, an error has occurred.');
                    if (!IsNull(failureFunc)) {
                        failureFunc(response);
                    }
                    if (!IsNullText($('#recaptcha_reload'))) {
                        $('#recaptcha_reload').click();
                    }
                    if (!IsNullText($waitGraphic)) {
                        $waitGraphic.hide('fast');
                    }
                }
            });
        }
        else {
            console.log('Form has some errors.');
            if (IsNullText(validationMessage)) {
                validationMessage = 'Please correct any errors and try again.';
            }
            AspxControlsShowWarningMessage(validationMessage);
        }

    }
    else {
        AspxControlsShowErrorMessage('Could not find location to post data.');
        console.log('Url is empty.');
        if (!IsNull(failureFunc)) {
            failureFunc('No url to post data.');
        }
    }
}
function AspxControlsClearControls(panel) {
    try {
        if (!IsNullText(panel)) {
            $panel = $(panel);
            if (!IsNullText($panel)) {
                $panel.find('input[type="text"], textarea, select').each(function () {
                    $(this).val('');
                });
                $panel.find('input[type="checkbox"], input[type="radio"]').each(function () {
                    $(this).removeAttr('checked');
                });
            }
        }
    }
    catch (ex) {
        console.log(ex);
    }
}
function AspxControlsSendData(url, formData, successFunc, failureFunc) {
    if (!IsNullText(url)) {
        if (formData.valid) {

            $.ajax({
                type: 'POST',
                url: url,
                data: JSON.stringify({ data: formData.data }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (data) {
                    if (!IsNull(data) && !IsNull(data.d)) {
                        if (!IsNull(successFunc)) {
                            successFunc(data.d);
                        }
                    }
                    else {
                        AspxControlsShowErrorMessage('No data returned.');
                        if (!IsNull(failureFunc)) {
                            failureFunc('Sorry, an error has occurred.');
                        }
                    }
                },
                error: function (response) {
                    console.log(response);
                    AspxControlsShowErrorMessage('Sorry, an error has occurred.');
                    if (!IsNull(failureFunc)) {
                        failureFunc('Sorry, an error has occurred.');
                    }
                }
            });
        }
        else {
            console.log('Form has some errors.');
            AspxControlsShowWarningMessage('Please correct any errors and try again.');
        }

    }
    else {
        AspxControlsShowErrorMessage('Could not find location to post data.');
        console.log('Url is empty.');
        if (!IsNull(failureFunc)) {
            failureFunc('An error occurred. Your request could not be processed.');
        }
    }
}

function AspxControlsGetControlName(control) {
    var $control = $(control);
    var name = '';
    if (!IsNullText($control)) {
        name = $control.attr('data-form-name');
        if (IsNullText(name)) {
            name = $control.attr('id');
        }
        if (IsNullText(name)) {
            name = $control.attr('name');
        }
    }
    return name;
}

function AspxControlsFormValues(form) {
    var $form = $(form);
    var obj = new Object();
    var isValid = true;
    var focusSet = false;

    if (!IsNullText($form)) {
        $form.find('input[type="text"], input[type="password"], input[type="hidden"], textarea, select').each(function () {
            var v = AspxControlsValidControl($(this));
            isValid = isValid && v.valid;

            if (!isValid && !focusSet) {
                $(this).focus();
                focusSet = true;
            }

            var name = AspxControlsGetControlName($(this));
            obj[name] = v.value;
        });

        var formControlRadioNames = new Array();
        $form.find('ul.form-control.radio-list input[type="radio"]').each(function () {
            var name = $(this).attr('name');
            if (formControlRadioNames.indexOf(name) == -1) {
                formControlRadioNames.push(name);

                var $ul = $(this).closest('ul.radio-list');
                if (!IsNullText($ul)) {
                    var v = AspxControlsValidRadioList($ul);
                    isValid = isValid && v.valid;

                    if (!isValid && !focusSet) {
                        $ul.find('input[type="radio"]').eq(0).focus();
                        focusSet = true;
                    }

                    var name = AspxControlsGetControlName($ul);
                    obj[name] = v.value;
                }
            }
        });

        var radioNames = new Array();
        $form.find('input[type="radio"]').each(function () {
            var name = $(this).attr('name');
            if (radioNames.indexOf(name) == -1 && formControlRadioNames.indexOf(name) == -1) {
                radioNames.push(name);
            }
        });
        for (var i = 0; i < radioNames.length; i++) {
            var v = AspxControlsValidRadio(radioNames[i]);
            isValid = isValid && v.valid;

            if (!isValid && !focusSet) {
                $form.find('input[type="radio"][name="' + radioNames[i] + '"]').focus();
                focusSet = true;
            }

            obj[radioNames[i]] = v.value;
        }

        $form.find('input[type="checkbox"]').each(function () {
            var $parent = $(this).parent();
            if (!IsNullText($parent) && $parent.is('[data-required]')) {
                $(this).attr('data-required', $parent.attr('data-required'));
            }
            if (!IsNullText($parent) && $parent.is('[data-form-name]') && !$(this).is('[data-form-name]')) {
                $(this).attr('data-form-name', $parent.attr('data-form-name'));
            }
            var v = AspxControlsValidCheckBox($(this));
            isValid = isValid && v.valid;

            if (!isValid && !focusSet) {
                $(this).focus();
                focusSet = true;
            }

            var name = AspxControlsGetControlName($(this));
            obj[name] = v.value;
        });

        var $requiredGroups = $form.find('span.validator[data-required-group]');
        if (!IsNullText($requiredGroups)) {
            $requiredGroups.each(function () {
                var valid = AspxControlsRequiredGroup($(this), !focusSet);
                isValid = isValid && valid;
            });
        }
    }
    else {
        isValid = false;
    }
    return { data: obj, valid: isValid };
}

function AspxControlsRequiredGroup(validator, setFocus) {
    var isValid = true;
    var $validator = $(validator);
    if (!IsNullText($validator)) {
        if (!$validator.is('[disabled]')) {
            if (IsNull(setFocus)) { setFocus = true; }

            var requiredGroup = $validator.attr('data-required-group');
            var numRequired = Number($validator.attr('data-number-required'));

            if (!IsNullText(requiredGroup) && !IsNullNumber(numRequired)) {
                if (numRequired > 0) {
                    var $tb = $('input[type="text"][data-required-group="' + requiredGroup + '"]');
                    if (!IsNullText($tb)) {
                        var count = 0;
                        for (var i = 0; i < $tb.length; i++) {
                            if (!IsNullText($tb.eq(i).val())) {
                                count++;
                            }
                        }
                        isValid = count >= numRequired;
                        if (!isValid) {
                            isValid = count == $tb.length;
                        }
                        if (!isValid) {
                            $tb.each(function () {
                                if (IsNullText($(this).val())) {
                                    $(this).addClass(failedClass);
                                    if (setFocus) {
                                        $(this).focus();
                                        setFocus = false;
                                    }
                                }
                            });
                            $validator.css('visibility', 'visible').show();
                        }
                        else {
                            $validator.css('visibility', 'hidden').hide();
                        }
                    }
                }
            }
        }
    }
    return isValid;
}

function AspxControlsGetWindowFunction(funcName) {
    var returnValue = null;
    if (!IsNullText(funcName)) {
        var func = window[funcName];
        if (!IsNull(func) && typeof (func) === 'function') {
            returnValue = func;
        }
    }
    return returnValue;
}

function AspxControlsOverideActionPanel(panel) {
    try {
        var $panel = $(panel);
        if (!IsNullText($panel)) {
            var actionUrl = $panel.attr('data-action');
            if (!IsNullText(actionUrl)) {
                AspxControlsEnableAspValidators($panel, false, null);

                $panel.find('input[type="submit"]').click(function (e) {
                    if (!$(this).is('[data-no-submit]')) {
                        e.preventDefault();
                        var data = AspxControlsFormValues($panel);

                        var successFunc = AspxControlsGetWindowFunction($panel.attr('data-post-success-function'));
                        var failFunc = AspxControlsGetWindowFunction($panel.attr('data-post-fail-function'));
                        var validationMessage = $panel.attr('data-validation-message');

                        AspxControlsGetStandardResponse($panel, actionUrl, data, successFunc, failFunc, validationMessage);
                    }
                });
            }
        }
    }
    catch (ex) { console.log(ex); }
}

function AspxControlsOverideActionPanelTarget(panel, target) {
    try {
        var $panel = $(panel);
        var $target = $(target);
        if (!IsNullText($panel) && !IsNullText($target)) {
            var actionUrl = $panel.attr('data-action');
            if (!IsNullText(actionUrl)) {
                AspxControlsEnableAspValidators($panel, false, null);

                $panel.find('input[type="submit"]').click(function (e) {
                    e.preventDefault();
                    var data = AspxControlsFormValues($panel);

                    var successFunc = AspxControlsGetWindowFunction($panel.attr('data-post-success-function'));
                    var failFunc = AspxControlsGetWindowFunction($panel.attr('data-post-fail-function'));
                    var validationMessage = $panel.attr('data-validation-message');
                    AspxControlsGetStandardResponse($target, actionUrl, data, successFunc, failFunc, validationMessage);
                });
            }
        }
    }
    catch (ex) { console.log(ex); }
}

function AspxControlsAjaxActionPanel() {
    try {
        var $panels = $('div[data-action]');
        if (!IsNullText($panels)) {
            $panels.each(function () {
                if (!$(this).is('[data-action-target]')) {
                    $(this).html('<div class="action-content">' + $(this).html() + '</div><div class="wait-graphic" style="display:none;"></div>');
                    AspxControlsOverideActionPanel($(this));
                }
                else {
                    var target = $(this).attr('data-action-target');
                    if (!IsNullText(target)) {
                        var $target = $('div[id$="' + target + '"]');
                        if (IsNullText($target)) { $target = $('div[id*="' + target + '"]'); }
                        if (!IsNullText($target)) {
                            $target.html('<div class="action-content">' + $target.html() + '</div><div class="wait-graphic" style="display:none;"></div>');
                            AspxControlsOverideActionPanelTarget($(this), $target);
                        }
                    }
                }
            });
        }
    }
    catch (ex) { console.log(ex); }
}

function AspxControlsEnableRequired(control, enabled) {
    var $control = $(control);
    if (!IsNullText($control)) {
        if (enabled) {
            $control.attr('data-required', true);
            $control.addClass('required');
        }
        else {
            $control.removeAttr('data-required');
            $control.removeClass('required');
        }

        var $formGroup = $control.closest('div.form-group');
        if (!IsNullText($formGroup)) {

            var $form = $formGroup.closest('div.panel');

            if (!IsNullText($form)) {
                var dataAction = $form.attr('data-action');
                if (IsNullText(dataAction)) {
                    AspxControlsEnableAspValidators($formGroup, enabled, "required");
                }
            }
            else {
                AspxControlsEnableAspValidators($formGroup, enabled, "required");
            }
        }
    }
}

function AspxControlsEnableSection(panel, enable) {
    var $panel = $(panel);
    if (!IsNullText($panel)) {
        if (enable) {
            $panel.find('[data-disable-required]').each(function () {
                AspxControlsEnableRequired($(this), true);
                $(this).removeAttr('data-disable-required');
            });
        }
        else {
            $panel.find('[data-required]').each(function () {
                AspxControlsEnableRequired($(this), false);
                $(this).attr('data-disable-required', 'true');
            });
        }
        AspxControlsEnableAspValidators(panel, enable);

        var $vals = $panel.find('span[data-required-group].validator');
        if (!IsNullText($vals)) {
            $vals.each(function () {
                if (enable) {
                    $(this).removeAttr('disabled');
                }
                else {
                    $(this).attr('disabled', 'disabled');
                }
            });
        }
    }
}

function AspxControlsEnableAspValidators(panel, enable, type) {
    var $panel = $(panel);
    if (!IsNullText($panel)) {
        var $vals = null;
        if (IsNullText(type)) {
            $vals = $panel.find('span.validator');
        }
        else {
            $vals = $panel.find('span[id*="' + type + 'Validator"].validator');
        }
        if (!IsNullText($vals)) {
            $vals.each(function () {
                var aspValidator = document.getElementById($(this).attr('id'));
                if (!IsNull(aspValidator)) {
                    ValidatorEnable(aspValidator, enable);
                    aspValidator.isvalid = true;
                    aspValidator.enabled = enable;
                    ValidatorUpdateDisplay(aspValidator);
                }
            });
        }
    }
}

function AspxControlsValidateCheckBoxCombined(sender, args, mustBeChecked) {
    var ctl = document.getElementById(sender.controltovalidate);
    var valid = (ctl.checked === mustBeChecked);
    return valid;
}
function AspxControlsValidateCheckBox(sender, args) {
    var valid = AspxControlsValidateCheckBoxCombined(sender, args, true);
    args.IsValid = valid;
    return valid;
}
function AspxControlsValidateUnCheckBox(sender, args) {
    var valid = AspxControlsValidateCheckBoxCombined(sender, args, false);
    args.IsValid = valid;
    return valid;
}
function AspxControlsValidateHiddenField(sender, args) {
    var ctl = document.getElementById(sender.controltovalidate);
    args.valid = !IsNullText(ctl.value);
    return args.valid;
}
function AspxControlsValidateRequiredGroup(sender, args) {
    var isValid = true;
    var $sender = $(sender);
    if (!IsNullText($sender)) {
        var requiredGroup = $sender.attr('data-required-group');
        var numRequired = Number($sender.attr('data-number-required'));
        if (!IsNullText(requiredGroup) && !IsNullNumber(numRequired) && numRequired > 0) {
            var $tb = $('input[type="text"][data-required-group="' + requiredGroup + '"]');
            if (!IsNullText($tb)) {
                var count = 0;
                for (var i = 0; i < $tb.length; i++) {
                    if (!IsNullText($tb.eq(i).val())) {
                        count++;
                    }
                }
                isValid = count >= numRequired;
                if (!isValid) {
                    isValid = count == $tb.length;
                }
            }
        }
    }
    args.IsValid = isValid;
    return args.IsValid;
}

function AspxControlsGetDateXYearsAgo(yy) {
    var returnValue = null;
    if (!IsNullNumber(yy)) {
        var returnValue = new Date();
        returnValue.setFullYear(returnValue.getFullYear() - yy);
    }
    return returnValue;
}

$(document).ready(function () {
    AspxControlsAjaxActionPanel();
    $('input[data-date]').datepicker({ dateFormat: 'dd/mm/yy' });
    $('input[type="text"].date-time').datepicker({ dateFormat: 'dd/mm/yy' });
    //    $('textarea[data-html-input]').each(function () {
    //        var html = $(this).val();
    //        if (!IsNullText(html)) {
    //            //html = $.base64.decode(html);
    //            //$(this).val(html);
    //        }
    //    });
    try {
        $('textarea[data-html-input]').each(function () {
            var $ta = $(this);
            var $hn = $('<input type="hidden" name="' + $ta.attr('name') + '" value="' + $.base64.encode($ta.val()) + '"/>');
            $ta.before($hn);
            $ta.removeAttr('name');
            $ta.change(function () {
                $hn.val($.base64.encode($ta.val()));
            });
        });
    }
    catch (ex) { console.log(ex); }
});
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("input.date-time").datepicker({ dateFormat: 'dd/mm/yy' });

            $('div#hamburger img').click(function () {
                $('div#navRight').toggle('fast');
            });
        });
    </script>
    
    
    <script src='/Scripts/miniHeader.js' type="text/javascript"></script>
    <script src="Scripts/Imported/owl.carousel.min.js" type="text/javascript"></script>
    <script src="Scripts/carousel.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('button.navbar-toggle').click(function () {
                var value = $('div#body').css('padding-top');
                if (value == '10px') {
                    $('div#body').css('padding-top', '+=200');
                    console.log("Yes");
                }
                else {
                    $('div#body').removeAttr("style");
                    $('div#body').css('padding-top', '10');
                    console.log("No");
                }
            });
        });
    </script>


    <!-- *********************************************************************************************************************** -->
</body>
</html>