
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>shell-storm | Home</title>
    <meta name="Description" content=" The Jonathan Salwan's little corner. Low level stuff." />
    <meta name="Viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Author" content="Jonathan Salwan"/>
    <meta name="Robots" content="index,follow"/>

    <link rel="index" title="shell-storm" href="http://shell-storm.org/"/>

    <link rel="stylesheet" href="http://shell-storm.org/assets/css/pygments/perldoc.css"/>
    <link rel="stylesheet" href="http://shell-storm.org/assets/css/styles.css"/>
    <link rel="stylesheet" href="http://shell-storm.org/assets/css/bootstrap.css"/>

    <link rel="alternate" type="application/rss+xml" title="Shell-Storm's feed" href="http://shell-storm.org/rss.xml"/>
    <link rel="icon" type="image/x-ico" href="http://shell-storm.org/favicon.ico"/>

    <style>
      .profile {
        text-align: center;
      }
      .profile ul {
        text-align: left;
        list-style: none;
        margin-top: 10px;
      }
      .profile li a {
        padding-left: 6px;
        color: #333333;
      }
      .profile a {
        color: #333333;
      }
      .profile h4 a:hover {
        text-decoration: none;
      }
      body {
        padding-top: 60px; 
      }
      p {
        text-align: justify;
      }
    </style>

  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <div class="nav-collapse collapse">
            <ul class="nav pull-left">
	      <li><a href="http://shell-storm.org/"><b>Blog</b></a></li>
	      <!--<li><a href="http://shell-storm.org/shellcode/"><b>Shellcodes Database</b></a></li>--!>
	      <li><a href="http://shell-storm.org/repo/"><b>Repository</b></a></li>
            </ul>
            <ul class="nav pull-right">
	      <li><a target="_blank" href="http://triton.quarkslab.com/"><b>Triton, our dynamic binary analysis framework</b></a></li>
	      <li><a target="_blank" href="http://doar-e.github.io/"><b>Diary of a reverse-engineer</b></a></li>
            </ul>
          </div>
        </div>
      </div>
    </div>

    <p>&nbsp;</p>
    <div class="container">
            <div class="span2 profile">
                <!--<h4><a target="_blank" href="https://twitter.com/JonathanSalwan">Jonathan Salwan</a></h4>--!>
                <p>&nbsp;</p>
                <center>
                <!--<a href="http://shell-storm.org/JonathanSalwan.jpeg"><img width="120" height="120" alt="" src="http://shell-storm.org/JonathanSalwan.jpeg" /></a>--!>
                <img width="120" height="120" alt="" src="http://shell-storm.org/globe.png" />
                </center>
                <p>&nbsp;</p>
                <ul>
                    <li><i class="icon-user"></i><a target="_blank" href="https://twitter.com/JonathanSalwan">Twitter Profile</a></li>
                    <li><i class="icon-user"></i><a target="_blank" href="https://github.com/JonathanSalwan/">GitHub Profile</a></li>
                    <li><i class="icon-user"></i><a target="_blank" href="https://plus.google.com/+JonathanSalwan">Google+ Profile</a></li>
                    <li><i class="icon-user"></i><a target="_blank" href="http://www.linkedin.com/pub/jonathan-salwan/82/39b/4bb">Linkedin Profile</a></li>
                    <li><i class="icon-globe"></i><a target="_blank" href="http://shell-storm.org/rss.xml">RSS feeds</a></li>
                    <li><i class="icon-envelope"></i><a target="_blank" href="mailto:jonathan.salwan gmail com">Email</a></li>
                </ul>
            </div>
            <div class="span8">
            <!--Body content-->

	<h4><u>About me</u></h4>
        <p>
        I'm just a guy who has a strong interest in low-level computing, program analysis and software verification
        methods. My <i>"research"</i> is mostly focused on both static and dynamic program analysis. I also enjoy doing things in various
        fields like: OSdev, reverse engineering, bugs exploitation and others low-level stuffs. You will find the results of my different
        researches on this blog.</p>

    	<p>&nbsp;</p>
        <hr>
	<h4><u>Short blog posts</u></h4>
	<ul>
                <b>Binary analysis</b>
		<li>2016-10-28 - <a href="https://github.com/JonathanSalwan/Tigress_protection">Automatic deobfuscation of the Tigress binary protection using symbolic execution and LLVM</a></li>
		<li>2016-05-18 - <a href="http://triton.quarkslab.com/blog/What-kind-of-semantics-information-Triton-can-provide/">What kind of semantics information Triton can provide?</a></li>
		<li>2015-10-12 - <a href="http://triton.quarkslab.com/blog/Code-coverage-using-dynamic-symbolic-execution/">Code coverage using a dynamic symbolic execution</a></li>
		<li>2015-06-10 - <a href="http://triton.quarkslab.com/blog/first-approach-with-the-framework/">Triton (concolic execution framework) under the hood</a></li>
		<li>2013-10-14 - <a href="/blog/Stack-and-heap-overflow-detection-at-runtime-via-behavior-analysis-and-PIN/">Stack and heap overflow detection at runtime via behavior analysis and Pin</a></li>
		<li>2013-08-28 - <a href="/blog/Binary-analysis-Concolic-execution-with-Pin-and-z3/">Binary analysis: Concolic execution with Pin and z3</a></li>
		<li>2013-08-17 - <a href="/blog/In-Memory-fuzzing-with-Pin/">In-Memory fuzzing with Pin</a></li>
		<li>2013-08-08 - <a href="/blog/Taint-analysis-and-pattern-matching-with-Pin/">Taint analysis and pattern matching with Pin</a></li>
		<li>2013-06-10 - <a href="/blog/Concolic-execution-taint-analysis-with-valgrind-and-constraints-path-solver-with-z3/">Concolic execution - Taint analysis with Valgrind and constraints path solver with Z3</a></li>
		<li>2013-05-02 - <a href="/blog/A-binary-analysis-count-me-if-you-can/">A binary analysis, count me if you can</a></li>

                <p></p>
                <b>Linux Kernel</b>
		<li>2013-05-26 - <a href="/blog/Trace-and-debug-the-Linux-Kernel-functons/">Trace and debug the Linux kernel functions</a></li>
		<li>2013-03-25 - <a href="/blog/Linux-runtime-unpacker-and-binary-signature">Linux Kernel runtime unpacker and binary signature</a></li>
		<li>2013-01-29 - <a href="/blog/Linux-process-execution-and-the-useless-ELF-header-fields">Linux process execution and the useless ELF header fields</a></li>
                <li>2013-01-23 - <a href="/blog/Simple-Hook-detection-Linux-module">Simple hook detection Linux module</a></li>
		<li>2013-01-19 - <a href="/blog/ASLR-implementation-in-Linux-Kernel-3.7">ASLR implementation in Linux Kernel 3.7</a></li>

                <p></p>
                <b>Operating System</b>
		<li>2013-02-03 - <a href="/blog/Physical-page-frame-allocation-with-bitmap-algorithms">Physical page frame allocation with bitmap algorithms</a></li>
		<li>2012-12-25 - <a href="/blog/Paging-modes-for-the-x86-32-bits-architectures">Paging modes for the x86 32-bits architectures</a></li>
		<li>2012-12-24 - <a href="/blog/Classical-memory-access-optimization-with-the-TLB">Classical memory access optimization with the TLB</a></li>

                <p></p>
                <b>CTF Write-up</b>
		<li>2017-02-06 - <a href="https://github.com/JonathanSalwan/Triton/blob/master/src/examples/python/ctf-writeups/hackover-ctf-2015-r150/solve.py">Hackover 2015 r150 <i>(outdated solving for Triton use cases)</i></a></li>
		<li>2016-08-02 - <a href="https://github.com/JonathanSalwan/Triton/blob/master/src/examples/python/ctf-writeups/defcamp-2015-r100/solve.py">Defcamp 2015 r100 <i>(outdated solving for Triton use cases)</i></a></li>
		<li>2016-08-01 - <a href="https://github.com/JonathanSalwan/Triton/blob/master/src/examples/python/ctf-writeups/defcon-2016-baby-re/solve.py">Defcon Quals 2016 baby-re <i>(outdated solving for Triton use cases)</i></a></li>
		<li>2013-06-23 - <a href="/blog/Write-up-NDH2k13-Final-K1986">Write-up NDH2k13 Final K1986</a></li>
		<li>2012-06-04 - <a href="/blog/Write-up-Defcon-20-quals-2012-Forensic-400">Defcon 20 quals 2012 - Forensic 400</a></li>
		<li>2012-06-04 - <a href="/blog/Write-up-Defcon-20-quals-2012-Forensic-300">Defcon 20 quals 2012 - Forensic 300</a></li>
		<li>2011-09-21 - <a href="/blog/Write-up-Hack.lu-2011-Antique-Space-Shuttle-300">Hack.lu 2011 Antique Space Shuttle (300)</a></li>
		<li>2011-05-30 - <a href="/blog/Write-up-RSSIL-2011-RCE-encrypted-file">RSSIL 2011 - RCE encrypted file</a></li>
		<li>2011-05-29 - <a href="/blog/Write-up-RSSIL-2011-RCE-chimay_rouge">RSSIL 2011 - RCE chimay_rouge</a></li>
		<li>2011-04-25 - <a href="/blog/Write-up-PlaidCTF-2011-Another-small-bug">PlaidCTF 2011 - Another small bug</a></li>
		<li>2011-04-25 - <a href="/blog/Write-up-PlaidCTF-2011-Calculator">PlaidCTF 2011 - Calculator</a></li>
		<li>2011-03-06 - <a href="/blog/Write-up-Insomnihack-2011-Reverse-2">Insomni'hack 2011 - Reverse 2</a></li>

                <p></p>
                <b>CVE exploitation</b>
		<li>2011-07-04 - <a href="/blog/PHP-5.3.6-Buffer-Overflow-PoC-ROP">Analysis of CVE-2011-1938 - ROP exploitation in PHP 5.3.6</a></li>

                <p></p>
                <b>MISC</b>
		<li>2011-10-02 - <a href="/blog/Polymorphism-and-Return-Oriented-Programming">Polymorphism and Return Oriented Programming</a></li>
		<li>2011-04-12 - <a href="/blog/Return-Oriented-Programming-and-ROPgadget-tool">Return Oriented Programming and ROPgadget tool</a></li>
		<li>2010-11-25 - <a href="/blog/Shellcode-On-ARM-Architecture">Shellcode on ARM architecture</a></li>
	</ul>

    	<p>&nbsp;</p>
        <hr>
	<h4><u>Online services</u></h4>
	    <li><a href="/online/Online-Assembler-and-Disassembler/">Online Assembler and Disassembler</a></li>
	    <li><a href="/shellcode/">Shellcodes database for study cases</a></li>
	<ul>
	</ul>

    	<p>&nbsp;</p>
        <hr>
	<h4><u>Presentations and publications</u></h4>
	<ul>
	    <li><b>Deobfuscation of VM based software protection</b>
            </br>Talk at SSTIC, Rennes, 2017. [<a href="/talks/SSTIC2017-Article-desobfuscation_binaire_reconstruction_de_fonctions_virtualisees-salwan_potet_bardin.pdf">french paper</a>] [<a href="/talks/SSTIC2017_Deobfuscation_of_VM_based_software_protection.pdf">english slide</a>] [<a href="https://static.sstic.org/videos2017/SSTIC_2017-06-07_P08.mp4">french video</a>] [<a href="/files/DeobfuscationSSTIC2017.txt">bibtex</a>]
            </br><p><u>Abstract:</u> <i>In this presentation we describe an approach which consists to automatically analyze virtual
            machine based software protections and which recompiles a new version of the binary without such protections. This
            automated approach relies on a symbolic execution guide by a taint analysis and some concretization policies, then
            on a binary rewriting using LLVM transition.
            </i></p></li>

	    <li><b>How Triton can help to reverse virtual machine based software protections</b>
            </br>Talk at CSAW SOS, NYC, 2016. [<a href="/talks/csaw2016-sos-rthomas-jsalwan.pdf">slide</a>]
            </br><p><u>Abstract:</u> <i>The first part of the talk is going to be an introduction to the Triton framework
            to expose its components and to explain how they work together. Then, the second part will include demonstrations
            on how it's possible to reverse virtual machine based protections using taint analysis, symbolic execution, SMT
            simplifications and LLVM-IR optimizations.
            </i></p></li>

	    <li><b>Dynamic Binary Analysis and Obfuscated Codes</b>
            </br>Talk at St'Hack, Bordeaux, 2016. [<a href="/talks/sthack2016-rthomas-jsalwan.pdf">slide</a>]
            </br><p><u>Abstract:</u> <i>At this presentation we will talk about how a DBA (Dynamic Binary Analysis) may help
            a reverse engineer to reverse obfuscated code. We will first introduce some basic obfuscation techniques
            and then expose how it's possible to break some stuffs (using our open-source DBA framework - Triton)
            like detect opaque predicates, reconstruct CFG, find the original algorithm, isolate sensible data and
            many more... Then, we will conclude with a demo and few words about our future work.
            </i></p></li>

            <p></p>
            <li><b>How Triton may help to analyse obfuscated binaries</b>
            </br>MISC magazine 82, 2015. [<a href="http://triton.quarkslab.com/files/misc82-triton.pdf">french article</a>]
            </br><p style="text-align: justify;"><u>Abstract:</u> <i>Binary obfuscation is used to protect software's intellectual property.
            There exist different kinds of obfucation but roughly, it transforms a binary structure into another binary structure by preserving the same semantic. 
            The aim of obfuscation is to ensure that the original information is "drown" in useless information that will make reverse engineering harder. 
            In this article we will show how we can analyse an ofbuscated program and break some obfuscations using the Triton framework.</i></p></li>

            <p></p>
	    <li><b>Triton: A Concolic Execution Framework</b>
            </br>Talk at SSTIC, Rennes, 2015. [<a href="/talks/SSTIC2015_French_Paper_Triton_Framework_dexecution_Concolique_FSaudel_JSalwan.pdf">french paper</a>] [<a href="/talks/SSTIC2015_English_slide_detailed_version_Triton_Concolic_Execution_FrameWork_FSaudel_JSalwan.pdf">detailed english slide</a>] [<a href="/talks/SSTIC2015_French_slide_light_version_Triton_Concolic_Execution_FrameWork_FSaudel_JSalwan.pdf">light french slide</a>] [<a href="/files/TritonSSTIC2015.txt">bibtex</a>]
            </br><p><u>Abstract:</u> <i>This talk is about the release of Triton, a concolic execution framework based on Pin. 
            It provides components like a taint engine, a dynamic symbolic execution engine, a snapshot engine, 
            translation of x64 instruction to SMT2, a Z3 interface to solve constraints and Python bindings. 
            Based on these components, Triton offers the possibility to build tools for vulnerabilities research or 
            reverse-engineering assistance.</i></p></li>

            <p></p>
	    <li><b>Dynamic Behavior Analysis Using Binary Instrumentation</b>
            </br>Talk at St'Hack, Bordeaux, 2015. [<a href="/talks/StHack2015_Dynamic_Behavior_Analysis_using_Binary_Instrumentation_Jonathan_Salwan.pdf">slide</a>]
            </br><p><u>Abstract:</u> <i>This talk can be considered like the part 2 of my talk at SecurityDay. 
            In the previous part, I talked about how it was possible to cover a targeted 
            function in memory using the DSE (Dynamic Symbolic Execution) approach. Cover 
            a function (or its states) doesn't mean find all vulnerabilities, some vulnerability 
            doesn't crashes the program. That's why we must implement specific analysis to 
            find specific bugs. These analysis are based on the binary instrumentation and 
            the runtime behavior analysis of the program. In this talk, we will see how it's 
            possible to find these following kind of bugs : off-by-one, stack / heap overflow, 
            use-after-free, format string and {write, read}-what-where.</i></p></li>

            <p></p>
	    <li><b>Covering a function using a Dynamic Symbolic Execution approach</b>
            </br>Talk at Security Day, Lille, 2015. [<a href="/talks/SecurityDay2015_dynamic_symbolic_execution_Jonathan_Salwan.pdf">slide</a>]
            </br><p><u>Abstract:</u> <i>This talk is about binary analysis and instrumentation. We will see how it's possible to 
            target a specific function, snapshot the context memory/registers before the function, translate the instrumentation 
            into an intermediate representation,apply a taint analysis based on this IR, build/keep formulas for a Dynamic 
            Symbolic Execution (DSE), generate a concrete value to go through a specific path, restore the context memory/register and 
            generate another concrete value to go through another path then repeat this operation until the target function is covered.</i></p></li>

            <p></p>
	    <li><b>An introduction to the Return Oriented Programming and ROP-chain generation</b>
            </br>Course lecture at Bordeaux University, 2014. [<a href="/talks/ROP_course_lecture_jonathan_salwan_2014.pdf">slide</a>]
            </br><p><u>Abstract:</u> <i>This course lecture is about an introduction to the return oriented programming and its variants 
            like JOP, SOP... It also describes some techniques and active works about ROP-chain generation 
            based on backtracking or symbolic execution.</i></p></li>

            <p></p>
	    <li><b>An introduction to the Return Oriented Programming</b>
            </br>MISC Magazine HS-09, 2014. [<a href="http://boutique.ed-diamond.com/misc-hors-series/584-misc-hs-9.html">link</a>]
            </br><p><u>Abstract:</u> <i>This article is about an introduction to the return oriented programming. In this article
            we describe the Operating Systems' protections in detail and explains why the ROP exploitation is 
            useful. We also provides a detailled step-by-step example of the ROP exploitation on the 
            CVE-2011-1938 vulnerability.</i></p></li>

            <p></p>
	    <li><b>Software testing and concolic execution</b>
            </br>Talk at LSE Summer Week, Paris, 2013. [<a href="/talks/Software_testing_and_concolic_execution_Jonathan_Salwan_LSE_2013.pdf">slide</a>]
            </br><p><u>Abstract:</u> <i>This talk is about an introduction to the concolic execution using Valgrind 
            and Z3. Concolic execution is a technique that uses both symbolic and concrete execution.
            In this talk we introduce a little tool which breaks a dumb crackme.</i></p></li>

	</ul>

    	<p>&nbsp;</p>
        <hr>
	<h4><u>Mini projects</u></h4>
	<ul>
	    <li><a href="http://triton.quarkslab.com"><b>Triton - A Dynamic Binary Analsyis Framework</b></a>, <i>2015-06-03</i>
            </br><p><u>Abstract:</u> <i>Triton is a dynamic binary analysis (DBA) framework. It provides internal components like
            a Dynamic Symbolic Execution (DSE) engine, a Taint Engine, an intermediate representation based on SMT2-Lib of the x86
            and x86-64 instructions set, SMT simplification passes, an SMT Solver Interface and, the last but not least, Python
            bindings. Based on these components, you are able to build program analysis tools, automate reverse engineering and
            perform software verification. .</i></p></li>

            <p></p>
	    <li><a href="/project/Kaminou-Kernel"><b>Kaminou-Kernel - Another (unfinished) mini Kernel from scratch</b></a>, <i>2012-11-11</i>
            </br><p><u>Abstract:</u> <i>Just another (unfinished) kernel from scratch... At first I didn't plan on releasing this project, 
            but it's dying in a directory. This project was just for understanding how the kernel works and contains these following features: 
            Protected mode 32 bits, Multitasking, Paging, Memory Allocation, Interrupts, Exceptions, Syscalls.</i></p></li>

            <p></p>
	    <li><a href="/project/Useless-emulator-for-fun-VMNDH-2k12"><b>Useless emulator for fun (VMNDH-2k12)</b></a>, <i>2012-03-26</i>
            </br><p><u>Abstract:</u> <i>This emulator is totally useless, but it was created for the CTF NDH 2012. Some challenges 
            was on the NDH architecture. The NDH architecture is a new architecture which look like a mix between ARM and x86. The project contains
            a compiler, a debugger and a virtual machine.</i></p></li>

            <p></p>
	    <li><a href="/project/ROPgadget"><b>ROPgadget - Gadgets finder and auto-roper</b></a>, <i>2011-03-12</i>
            </br><p><u>Abstract:</u> <i>This tool lets you search your gadgets on your binaries to facilitate your ROP exploitation. ROPgadget 
            supports the ELF, PE and Mach-O format on x86, x64, ARM, ARM64, PowerPC, SPARC and MIPS architectures. 
            It also offers a dumb ROP-chain generation.</i></p></li>
	</ul>

    	<p>&nbsp;</p>
        <hr>
	<h4><u>Vulnerabilities publicly disclosed</u></h4>
	<ul>
            <li><a target="_blank" href="http://www.openwall.com/lists/oss-security/2015/09/21/4">CVE-2015-1801</a> - Samsung S4 (GT-I9500) - Multiple Kernel memory corruption in the video driver</li>
            <li><a target="_blank" href="http://www.openwall.com/lists/oss-security/2015/09/21/4">CVE-2015-1800</a> - Samsung S4 (GT-I9500) - Kernel memory disclosure in the video driver</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-6392">CVE-2013-6392</a> - Kernel MSM &lt; 3.10 - Kernel memory disclosure in the Genlock driver</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-6122">CVE-2013-6122</a> - Goodix gt915 Android touchscreen driver - Kernel race condition</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-4740">CVE-2013-4740</a> - Goddix gt915 Android touchscreen driver - Multiple Kernel memory corruption</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-4739">CVE-2013-4739</a> - Android Kernel msm-3.4/jb_3* - Kernel memory disclosure in the Gemini JPEG/Jpeg1.0 engines</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-4738">CVE-2013-4738</a> - Android Kernel msm-3.4/jb_3* - Kernel Stack overflow in camera post processing driver (CPP)</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-2239">CVE-2013-2239</a> - OpenVZ kernel 2.6.32 (042stab080.1) - Multiple kernel memory disclosure</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2013-2164">CVE-2013-2164</a> - Linux Kernel 3.9.5 - Kernel memory disclosure in cdrom driver</li>
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2009-4800">CVE-2009-4800</a> - Sysax FTP server 4.5 - DELE request handling Traversal arbitrary file deletion 
            <li><a target="_blank" href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2009-1031">CVE-2009-1031</a> - Serv-U FTP server 7.4 - MKD request handling Traversal arbitrary directory creation
	</ul>
    </div> <!-- /container -->
    </div>

   <footer class="footer">
      <div class="container">
        <p class="text-center">shell-storm - 2008-2018</p>
        <ul class="footer-links">
          <li><a target="_blank" href="http://shell-storm.org/rss.xml">RSS</a></li>
          <li class="muted">&middot;</li>
          <li><a target="_blank" href="https://twitter.com/JonathanSalwan">Twitter</a></li>
          <li class="muted">&middot;</li>
          <li><a target="_blank" href="https://github.com/JonathanSalwan">Github</a></li>
        </ul>
      </div>
    </footer>

  <script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
    try {
         var pageTracker = _gat._getTracker("UA-6809519-1");
         pageTracker._trackPageview();
    } catch(err) {}
  </script>

  </body>
</html>