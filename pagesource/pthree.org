<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head profile="http://gmpg.org/xfn/11">
        <link rel="shortcut icon" href="https://pthree.org/favicon.png" />
	<title>Aaron Toponce : Linux.  GNU.  Freedom.</title>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
	<link rel="stylesheet" type="text/css" media="screen,projection" href="https://pthree.org/wp-content/themes/barthelme/style.css" title="Barthelme" />
	<link rel="stylesheet" type="text/css" media="print" href="https://pthree.org/wp-content/themes/barthelme/print.css" />
	<link rel="alternate" type="application/rss+xml" href="https://pthree.org/feed/" title="Aaron Toponce RSS feed" />
	<link rel="alternate" type="application/rss+xml" href="https://pthree.org/comments/feed/" title="Aaron Toponce comments RSS feed" />
	<link rel="pingback" href="https://pthree.org/xmlrpc.php" />

<link rel='dns-prefetch' href='//s.w.org' />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/pthree.org\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.0-alpha-42199"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55358,56794,8205,9794,65039],[55358,56794,8203,9794,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='codecolorer-css'  href='https://pthree.org/wp-content/plugins/codecolorer/codecolorer.css?ver=0.9.11' type='text/css' media='screen' />
<link rel='https://api.w.org/' href='https://pthree.org/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://pthree.org/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://pthree.org/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.0-alpha-42199" />

	<!-- Added By Democracy Plugin. Version 2.0.1 -->
	<script type='text/javascript' src='https://pthree.org/wp-content/plugins/democracy/democracy.js'></script>
	<link rel='stylesheet' href='https://pthree.org/wp-content/plugins/democracy/basic.css' type='text/css' />
	<link rel='stylesheet' href='https://pthree.org/wp-content/plugins/democracy/style.css' type='text/css' />
    <link rel="shortcut icon" href="https://pthree.org/wp-content/themes/barthelme/images/favicon.png" >
    
<style type="text/css" media="screen,projection">
/*<![CDATA[*/
/* CSS inserted by Barthelme theme options */
	body{font-family:verdana,geneva,sans-serif;font-size:75%;}
	div#content h2,div#content h3,div#content h4,div#content h5,div#content h6,body.archive div.archive-meta,body.attachment div.entry-content div.attachment-content p.attachment-name,body.home div#content div.entry-meta span,body.archive div#content div.entry-meta span,body.search div#content div.entry-meta span,body.single div.entry-date,body.single div.entry-meta,div#content blockquote,div.comments ol.commentlist li div.comment-meta,div.entry-content div.page-link,div.entry-content span.tag-links,body.page div.archive-meta,div.formcontainer form#commentform div.form-input input,div.formcontainer form#commentform div.form-textarea textarea#comment,input#s,div.entry-content div.entry-caption{font-family:verdana,geneva,sans-serif;}
	body div#content div.hentry{text-align:left;}
	body div#wrapper{width:auto;}
	div#header,div#header h1#blog-title a,div#header h1#blog-title a:link,div#header h1#blog-title a:visited{color:#fefefe;outline:none;text-decoration:none;}
	body div#header{background:#bbc8d9 url("https://pthree.org/wp-content/themes/barthelme/images/header-img.php?upper=8999b0&lower=bbc8d9") repeat-x left top;}
/*]]>*/
</style>

</head>

<body class="wordpress y2018 m03 d18 h06 home">

<div id="wrapper">
        <img src="https://pthree.org/wp-content/uploads/glider.png" alt="Image of the glider from the Game of Life by John Conway" align="left" hspace="15" vspace="14"/>
	<div id="header" onclick="location.href='https://pthree.org/';">
		<h1 id="blog-title"><a href="https://pthree.org/" title="Aaron Toponce">Aaron Toponce</a></h1>
		<div id="blog-description">Linux.  GNU.  Freedom.</div>
	</div><!-- #header -->
	
	<div class="access"><span class="content-access"><a href="#content" title="Skip to content">Skip to content</a></span></div>

<div id="globalnav"><ul id="menu"><li class="page_item page-item-5"><a href="https://pthree.org/author-colophon/">Author Colophon</a></li><li class="page_item page-item-407"><a href="https://pthree.org/site-license/">Site License</a></li><li class="page_item page-item-298"><a href="https://pthree.org/contact/">Contact</a></li><li class="page_item page-item-1736"><a href="https://pthree.org/my-pgp-key-signing-policy/">PGP Keysigning Policy</a></li><li class="page_item page-item-3025"><a href="https://pthree.org/donate/">Donate</a></li></ul></div>

	<div id="container">
		<div id="content" class="hfeed">


			<div id="post-4928" class="hentry p1 post publish author-admin category-cryptology y2017 m12 d21 h07">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2017/12/22/the-entropy-of-a-digital-camera-ccd-cmos-sensor/" title="Permalink to The Entropy of a Digital Camera CCD/CMOS Sensor" rel="bookmark">The Entropy of a Digital Camera CCD/CMOS Sensor</a></h2>
						<div class="entry-content">
<p>Recently, Vault12 released an app for iOS that uses the <a href="https://medium.com/vault12/how-to-get-true-randomness-from-your-apple-device-with-particle-physics-and-thermal-entropy-a9d47ca80c9b">mobile device's camera as a source of randomness</a>. Unfortunately, when putting the generated binary files through the Dieharder tests, it comes out pretty bad. I get 20 "PASSED", 13 "WEAK", and 81 "FAILED" results. For a TRNG, it should be doing much better than that. Now, to be clear, I'm not writing this post to shame Vault12. I actually really love the TrueEntropy app, and am eagerly waiting for it to hit Android, so I can carry around a TRNG in my pocket. However, things can get better, and that is what this post is hopefully addressing.</p>
<p>Using a camera as a TRNG is nothing new. SGI created a patent for <a href="https://en.wikipedia.org/wiki/Lavarand">pointing a webcam at a lava lamp</a>, using the chaotic nature of the lava lamp itself as the source of entropy. Later, it was realized that this was unnecessary. <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.479.4689&rep=rep1&type=pdf">The CCD/CMOS in the camera was experiencing enough noise</a> from external events to be more than sufficient. This noise is shown in the photo itself, and is appropriately referred to as "image noise".</p>
<p>The primary sources of noise come from the following:</p>
<ul>
<li><strong>Thermal noise</strong>- Caused by temperature fluctuations due to electrons flowing across resistant mediums.</li>
<li><strong>Photon noise</strong>- Caused by photons hitting the CCD/CMOS and releasing energy to neighboring electronics.</li>
<li><strong>Shot noise</strong>- Caused by current flow across diodes and bipolar transistors.</li>
<li><strong>Flicker noise</strong>- Caused by traps due to crystal defects and contaniments in the CCD/CMOS chip.</li>
<li><strong>Radiation noise</strong>- Caused by alpha, beta, gamma, x-ray, and proton decay from radioactive sources (such as outer-space) interacting with the CCD/CMOS.</li>
</ul>
<p>Some of these noise sources can be manipulated. For example, <a href="https://www.thorlabs.com/newgrouppage9.cfm?objectgroup_id=10773">by cooling the camera</a>, we can limit thermal noise. A camera at 0 degrees Celsius will experience less noise than one at 30 degrees Celsius. A camera in a dark room with less photons hitting the sensor will experience less noise than a bright room. Radiation noise can be limited by isolating the sensor in a radiation-protective barrier.</p>
<p>Let's put this to the test, and see if we can actually calculate the noise in a webcam. To do this, we'll look at a single frame with the lens cap covered, where the photo is taken in a dark room, and the web cam is further encompassed in a box. We'll take the photo at about 20 degrees Celsius (cool room temperature).</p>
<p>In order to get a basis for the noise in the frame, we'll use <a href="https://en.wikipedia.org/wiki/Entropy_(information_theory)">Shannon Entropy from information theory</a>. Thankfully, understanding Shannon Entropy isn't that big of a deal. My frame will be taken with OpenCV from a PlayStation 3 Eye webcam, which means the frame itself is just a big multidimensional array of numbers between 0 and 255 (each pixel only provides 8 bits of color depth). So, to calculate the Shannon Entropy of a frame, we'll do the following:</p>
<ol>
<li>Place each number in its own unique bin of 0 through 255.</li>
<li>Create an observed probability distribution (histogram) by counting the numbers in each bin.</li>
<li>Normalize the distribution, creating 256 p-values (the sum of which should equal "1").</li>
<li>For each of the 256 bins, calculate: -p_i*log_2(p_i).</li>
<li>Sum the 256 values.</li>
</ol>
<p>Thankfully, I don't have all of this by hand- numpy provides a function for me to call that does a lot of the heavy lifting for me.</p>
<p>So, without further ado, let's look at the code, then run it:</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br /></div></td><td><div class="python codecolorer"><span class="co1">#!/usr/bin/python</span><br />
<br />
<span class="kw1">import</span> cv2<br />
<span class="kw1">import</span> <span class="kw3">math</span><br />
<span class="kw1">import</span> numpy<br />
<br />
<span class="kw1">def</span> max_brightness<span class="br0">&#40;</span>frame<span class="br0">&#41;</span>:<br />
&nbsp; &nbsp; hsv <span class="sy0">=</span> cv2.<span class="me1">cvtColor</span><span class="br0">&#40;</span>frame<span class="sy0">,</span> cv2.<span class="me1">COLOR_BGR2HSV</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; h<span class="sy0">,</span> s<span class="sy0">,</span> v <span class="sy0">=</span> cv2.<span class="me1">split</span><span class="br0">&#40;</span>hsv<span class="br0">&#41;</span><br />
&nbsp; &nbsp; v<span class="br0">&#91;</span>v <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">255</span><br />
&nbsp; &nbsp; v<span class="br0">&#91;</span>v <span class="sy0">&lt;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#93;</span> +<span class="sy0">=</span> <span class="nu0">255</span><br />
&nbsp; &nbsp; final_hsv <span class="sy0">=</span> cv2.<span class="me1">merge</span><span class="br0">&#40;</span><span class="br0">&#40;</span>h<span class="sy0">,</span> s<span class="sy0">,</span> v<span class="br0">&#41;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; frame <span class="sy0">=</span> cv2.<span class="me1">cvtColor</span><span class="br0">&#40;</span>final_hsv<span class="sy0">,</span> cv2.<span class="me1">COLOR_HSV2BGR</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> frame<br />
<br />
<span class="kw1">def</span> get_entropy<span class="br0">&#40;</span>frame<span class="br0">&#41;</span>:<br />
&nbsp; &nbsp; histogram <span class="sy0">=</span> numpy.<span class="me1">histogram</span><span class="br0">&#40;</span>frame<span class="sy0">,</span> bins<span class="sy0">=</span><span class="nu0">256</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><br />
&nbsp; &nbsp; histogram_length <span class="sy0">=</span> <span class="kw2">sum</span><span class="br0">&#40;</span>histogram<span class="br0">&#41;</span><br />
&nbsp; &nbsp; samples_probability <span class="sy0">=</span> <span class="br0">&#91;</span><span class="kw2">float</span><span class="br0">&#40;</span>h<span class="br0">&#41;</span> / histogram_length <span class="kw1">for</span> h <span class="kw1">in</span> histogram<span class="br0">&#93;</span><br />
&nbsp; &nbsp; entropy <span class="sy0">=</span> -<span class="kw2">sum</span><span class="br0">&#40;</span><span class="br0">&#91;</span>p * <span class="kw3">math</span>.<span class="me1">log</span><span class="br0">&#40;</span>p<span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw1">for</span> p <span class="kw1">in</span> samples_probability <span class="kw1">if</span> p <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="kw1">return</span> entropy<br />
<br />
cap <span class="sy0">=</span> cv2.<span class="me1">VideoCapture</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><br />
cap.<span class="kw2">set</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">640</span><span class="br0">&#41;</span><br />
cap.<span class="kw2">set</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">480</span><span class="br0">&#41;</span><br />
<br />
ret<span class="sy0">,</span> frame1 <span class="sy0">=</span> cap.<span class="me1">read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
ret<span class="sy0">,</span> frame2 <span class="sy0">=</span> cap.<span class="me1">read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
frame_diff <span class="sy0">=</span> cv2.<span class="me1">absdiff</span><span class="br0">&#40;</span>frame1<span class="sy0">,</span> frame2<span class="br0">&#41;</span><br />
<br />
cv2.<span class="me1">imwrite</span><span class="br0">&#40;</span><span class="st0">'/tmp/frame1.bmp'</span><span class="sy0">,</span> frame1<span class="br0">&#41;</span><br />
cv2.<span class="me1">imwrite</span><span class="br0">&#40;</span><span class="st0">'/tmp/frame2.bmp'</span><span class="sy0">,</span> frame2<span class="br0">&#41;</span><br />
cv2.<span class="me1">imwrite</span><span class="br0">&#40;</span><span class="st0">'/tmp/frame_diff.bmp'</span><span class="sy0">,</span> frame_diff<span class="br0">&#41;</span><br />
<br />
frame1_max <span class="sy0">=</span> max_brightness<span class="br0">&#40;</span>frame1<span class="br0">&#41;</span><br />
frame2_max <span class="sy0">=</span> max_brightness<span class="br0">&#40;</span>frame2<span class="br0">&#41;</span><br />
frame_diff_max <span class="sy0">=</span> max_brightness<span class="br0">&#40;</span>frame_diff<span class="br0">&#41;</span><br />
<br />
cv2.<span class="me1">imwrite</span><span class="br0">&#40;</span><span class="st0">'/tmp/frame1_max.bmp'</span><span class="sy0">,</span> frame1_max<span class="br0">&#41;</span><br />
cv2.<span class="me1">imwrite</span><span class="br0">&#40;</span><span class="st0">'/tmp/frame2_max.bmp'</span><span class="sy0">,</span> frame2_max<span class="br0">&#41;</span><br />
cv2.<span class="me1">imwrite</span><span class="br0">&#40;</span><span class="st0">'/tmp/frame_diff_max.bmp'</span><span class="sy0">,</span> frame_diff_max<span class="br0">&#41;</span><br />
<br />
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Entropies:&quot;</span><span class="br0">&#41;</span><br />
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot; &nbsp; &nbsp;frame1: {}&quot;</span>.<span class="me1">format</span><span class="br0">&#40;</span>get_entropy<span class="br0">&#40;</span>frame1<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot; &nbsp; &nbsp;frame2: {}&quot;</span>.<span class="me1">format</span><span class="br0">&#40;</span>get_entropy<span class="br0">&#40;</span>frame2<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot; &nbsp; &nbsp;frame_diff: {}&quot;</span>.<span class="me1">format</span><span class="br0">&#40;</span>get_entropy<span class="br0">&#40;</span>frame_diff<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot; &nbsp; &nbsp;frame1_max: {}&quot;</span>.<span class="me1">format</span><span class="br0">&#40;</span>get_entropy<span class="br0">&#40;</span>frame1_max<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot; &nbsp; &nbsp;frame2_max: {}&quot;</span>.<span class="me1">format</span><span class="br0">&#40;</span>get_entropy<span class="br0">&#40;</span>frame2_max<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />
<span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot; &nbsp; &nbsp;frame_diff_max: {}&quot;</span>.<span class="me1">format</span><span class="br0">&#40;</span>get_entropy<span class="br0">&#40;</span>frame_diff_max<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></div></td></tr></tbody></table></div>
<p>Let's look over the code before running it. First, I'm actually capturing two frames right next to each other, then taking their composite difference. We know that a photo consists of its signal (the data most people are generally interested in) and its noise (the data they're not). By taking the composite difference between the two, I'm attempting to remove the signal. Because the frames were taken in rapid succession, provided nothing was drastically changing between the frames, most of the data will be nearly identical. So the signal should disappear.</p>
<p>But what about the noise? Well, as discussed above, the noise is a bit unpredictable and slightly unmanageable. Unlike my signal, the noise will be drastically different between the two frames. So, rather than removing noise, I'll actually be adding noise in the difference. </p>
<p>The next thing you'll notice is that I'm either maximizing or completely removing the luminosity in an HSV color profile. This is done just as a visual demonstration of what the noise actually "looks like" in the frame. You can see this below (converted to PNG for space efficiency).</p>
<p><center></p>
<table>
<tr>
<td>
<div id="attachment_4931" style="max-width: 310px" class="wp-caption aligncenter"><a href="https://pthree.org/wp-content/uploads/2017/12/frame1.png"><img src="https://pthree.org/wp-content/uploads/2017/12/frame1-300x225.png" alt="" width="300" height="225" class="size-medium wp-image-4931" srcset="https://pthree.org/wp-content/uploads/2017/12/frame1-300x225.png 300w, https://pthree.org/wp-content/uploads/2017/12/frame1.png 640w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Frame 1</p></div>
</td>
<td>
<div id="attachment_4933" style="max-width: 310px" class="wp-caption aligncenter"><a href="https://pthree.org/wp-content/uploads/2017/12/frame2.png"><img src="https://pthree.org/wp-content/uploads/2017/12/frame2-300x225.png" alt="" width="300" height="225" class="size-medium wp-image-4933" srcset="https://pthree.org/wp-content/uploads/2017/12/frame2-300x225.png 300w, https://pthree.org/wp-content/uploads/2017/12/frame2.png 640w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Frame 2</p></div>
</td>
<td>
<div id="attachment_4935" style="max-width: 310px" class="wp-caption aligncenter"><a href="https://pthree.org/wp-content/uploads/2017/12/frame_diff.png"><img src="https://pthree.org/wp-content/uploads/2017/12/frame_diff-300x225.png" alt="" width="300" height="225" class="size-medium wp-image-4935" srcset="https://pthree.org/wp-content/uploads/2017/12/frame_diff-300x225.png 300w, https://pthree.org/wp-content/uploads/2017/12/frame_diff.png 640w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Difference of frames 1 & 2</p></div>
</td>
</tr>
<tr>
<td>
<div id="attachment_4932" style="max-width: 310px" class="wp-caption aligncenter"><a href="https://pthree.org/wp-content/uploads/2017/12/frame1_max.png"><img src="https://pthree.org/wp-content/uploads/2017/12/frame1_max-300x225.png" alt="" width="300" height="225" class="size-medium wp-image-4932" srcset="https://pthree.org/wp-content/uploads/2017/12/frame1_max-300x225.png 300w, https://pthree.org/wp-content/uploads/2017/12/frame1_max.png 640w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Frame 1 maxed luminosity</p></div>
</td>
<td>
<div id="attachment_4934" style="max-width: 310px" class="wp-caption aligncenter"><a href="https://pthree.org/wp-content/uploads/2017/12/frame2_max.png"><img src="https://pthree.org/wp-content/uploads/2017/12/frame2_max-300x225.png" alt="" width="300" height="225 class="size-medium wp-image-4934" srcset="https://pthree.org/wp-content/uploads/2017/12/frame2_max-300x225.png 300w, https://pthree.org/wp-content/uploads/2017/12/frame2_max.png 640w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Frame 2 maxed luminosity</p></div>
</td>
<td>
<div id="attachment_4936" style="max-width: 310px" class="wp-caption aligncenter"><a href="https://pthree.org/wp-content/uploads/2017/12/frame_diff_max.png"><img src="https://pthree.org/wp-content/uploads/2017/12/frame_diff_max-300x225.png" alt="" width="300" height="225" class="size-medium wp-image-4936" srcset="https://pthree.org/wp-content/uploads/2017/12/frame_diff_max-300x225.png 300w, https://pthree.org/wp-content/uploads/2017/12/frame_diff_max.png 640w" sizes="(max-width: 300px) 100vw, 300px" /></a><p class="wp-caption-text">Difference of frames 1 & 2 maxed luminosity</p></div>
</td>
</tr>
</table>
<p></center><br />
Running the Python script in my 20 degrees Celsius dark room with the lens cap on and all light removed as much as possible, I get:</p>
<pre>$ python frame-entropy.py
Entropies:
    frame1: 0.0463253223509
    frame2: 0.0525489364555
    frame_diff: 0.0864590940377
    frame1_max: 0.0755975713815
    frame2_max: 0.0835428883103
    frame_diff_max: 0.134900632254</pre>
<p><a href="http://www.fourmilab.ch/random/">The "ent(1)" userspace utility</a> confirms these findings when saving the frames as uncompressed bitmaps:</p>
<pre>$ for I in frame*.bmp; do printf "$I: "; ent "$I" | grep '^Entropy'; done
frame1.bmp: Entropy = 0.046587 bits per byte.
frame1_max.bmp: Entropy = 0.076189 bits per byte.
frame2.bmp: Entropy = 0.052807 bits per byte.
frame2_max.bmp: Entropy = 0.084126 bits per byte.
frame_diff.bmp: Entropy = 0.086713 bits per byte.
frame_diff_max.bmp: Entropy = 0.135439 bits per byte.</pre>
<p>It's always good to use an independent source to confirm your findings.</p>
<p>So, in the standard frames, I'm getting about 0.05 bits per byte of entropy. However, when taking the composite difference, that number almost doubles to about 0.09 bits per byte. This was expected, as you remember, we're essentially taking the noise from both frames, and composing them in the final frame. Thus, the noise is added in the final frame.</p>
<p>What was actually surprising to me were the entropy values after setting the extreme luminosity values. This may be due to the fact that there are larger deltas between adjacent pixels when creating our histogram. When taking the difference of the two adjusted frames, the entropy jumps up to about 0.13 bits per byte. So, we could safely say that a composed frame with maxed luminosity that is the difference of two frames has about 0.11 bits of entropy per byte, plus or minus 0.02 bits per byte.</p>
<p>What does this say about the frame as a whole though? In my case, my frame is 640x480 pixels. Knowing that each pixel in my PS3 Eye webcam only occupies 1 byte or 8 bits, we can calculate the entropy per frame:</p>
<pre>(640*480) pixels/frame * 1 byte/pixel = 307200 bytes/frame
307200 bytes/frame * 0.11 entropy bits/byte = 33792 entropy bits/frame</pre>
<p>Each frame in my 640x480 PS3 Eye webcame provides about 33,792 bits of entropy. For comparison SHA-256 theoretically provides a maximum of 256-bits of entropic security. Of course, we should run millions of trials, collecting the data, calculate the standard deviation, and determine a more true average entropy. But, this will suffice for this post.</p>
<p>So, now that we know this, what can we do with this data? Well, we can use it as a true random number generator, but we have to be careful. Unfortunately, as the frame is by itself, it's heavily biased. In the frame, there exists spatial correlation with adjacent pixels. In the frame difference, there exists both spatial and time correlations. This isn't sufficient as a secure true random number generator. As such, we need to remove the bias. There are a few ways of doing this, called "randomness extraction", "software whitening", "decorrelation", or "debiasing". Basically, we want to take a biased input, and remove any trace of bias in the output.</p>
<p>We could use John von Neumann decorrelation, where we look at two non-overlapping consecutive bits. If the two bits are identical, then both bits are discarded. If they are different, then the most significant bit is output, while the least significant bit is discarded. This means that at a best, you are discarding half of your data, but how much is discarded all depends on how badly biased the data is. We know that our frame is only providing 0.11 bits of entropy per 8 bits. So we're keeping 11 bits out of 800. That's a lot of data that is discarded. One drawback with this approach, however, is if one or more bits are "stuck", such is an a dead pixel. Of course, this will lower the overall entropy of the frame, but will also drastically impact the extractor.</p>
<p>A different approach would be to use chaos machines. This idea is relatively new and not thoroughly studied; at least I'm struggling to find good research papers on the topic. The idea is taking advantage of the chaotic behavior of certain dynamical systems, such as a double pendulum. Due to the nature of chaos, small fluctuations in initial conditions lead to large changes in the distant future. The trick here is selecting your variables, such as the time distance and chaotic process correctly. Unlike John von Neumann decorrelation, that automatically discovers the bias and discards it for you, care has to be taken to make sure that the resulting output is debiased.</p>
<p>A better approach is using cryptographic primitives like one-way hashing or encryption, sometimes called "Kaminsky debiasing". Because most modern crytographic primitives are designed to emulate theoretical uniform unbiased random noise, the security rests on whether or not that can be achieved. In our case, we could encrypt the frame with AES and feed the ciphertext as our TRNG output. Unfortunately, this means also managing a key, which doesn't necessarily have to be kept secret. A better idea would be to use cryptographic hashing functions, like SHA-2, or even better, extendable output functions (XOFs).</p>
<p>Obviously, it should go without stating, that encrypting or hashing your biased input isn't increasing the entropy. This means that we need to have a good handle on what our raw entropy looks like (as we did above) beforehand. We know in our case that we're getting about 35 kilobits of entropy per frame, so hashing with SHA-256 is perfectly acceptable, even if we're losing a great deal of entropy in the output. However, if we were only getting 200-bits of security in each frame, while SHA-256 is debiasing the data, we still only have 200-bits of entropy in the generated output.</p>
<p>Really though, the best approach is an XOF. We want to output as much of our raw entropy as we can. Thankfully, <a href="https://en.wikipedia.org/wiki/SHA-3#Instances">NIST has 2 XOFs standardized as part of the SHA-3</a>: SHAKE128 and SHAKE256. An XOF allows you to output a digest of any length, where SHA-256 for example, only allows 256-bits of output. The security margin of the SHAKE128 XOF function is the minimum of half of the digest or 128-bits. If I have an entropy 35 kilobits, I would like to have all of that entropy available in the output. As such, I can output 4 KB in the digest knowing full well that's within my entropy margin. Even though I'm losing as much data as the John von Neumann extractor, I'm not vulnerable to "stuck pixels" being a problem manipulating the extractor.</p>
<p><a href="https://github.com/atoponce/scripts/blob/master/webcam_rng.py">When I put all this code together in Python</a>:</p>
<ol>
<li>Take the difference of two consecutive overlapping frames.</li>
<li>Maximize the luminosity of the new composed frame.</li>
<li>Hash the frame with SHAKE128.</li>
<li>Output 4 KB of data as our true random noise.</li>
</ol>
<p>At 30 frames per second for a resolution of 640x480, outputting 4 KB per frame will provide 120 KBps of data per second, and this is exactly what I see when executing the Python script. The PS3 Eye camera also supports 60 fps at a lower resolution, so I could get 240 KBps if I can keep the same security margin of 4 KB per frame. I haven't tested this, but intuition tells me I'll have a lower security margin at the lower resolution.</p>
<p>Coming full circle, when we put our TRNG to the Dieharder test, things come out vastly different than Vault12's results:</p>
<ul>
<li><strong>Vault12 TrueEntropy</strong>:
<ol>
<li>PASSED: 20</li>
<li>WEAK: 13</li>
<li>FAILED: 81</li>
</ol>
</li>
<li><strong>My webcam TRNG</strong>:
<ol>
<li>PASSED: 72</li>
<li>WEAK: 12</li>
<li>FAILED: 30</li>
</ol>
</li>
</ul>
<p></code></p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2017-12-22T01:21:00-0600">2017 12 22</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2017/12/22/the-entropy-of-a-digital-camera-ccd-cmos-sensor/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2017/12/22/the-entropy-of-a-digital-camera-ccd-cmos-sensor/" title="Permalink to The Entropy of a Digital Camera CCD/CMOS Sensor">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4928" title="Shortlink to The Entropy of a Digital Camera CCD/CMOS Sensor">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4902" class="hentry p2 post publish author-admin category-general y2017 m09 d26 h06 alt">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2017/09/27/1000-books-read-in-one-year-no-not-by-a-long-shot/" title="Permalink to 1,000 Books Read In One Year? No, Not By A Long Shot" rel="bookmark">1,000 Books Read In One Year? No, Not By A Long Shot</a></h2>
						<div class="entry-content">
<p>Recently, <a href="https://twitter.com/goodreads/status/912481864929116160">Goodreads sent out a tweet</a> about how to remove social media and the Internet from your life, so you can focus on reading <a href="http://www.travelandleisure.com/culture-design/books/how-much-you-could-read-without-social-media">1,000 books in one year</a>. The post follows this sort of math:</p>
<ol>
<li>The average person reads 400 words per minute.</li>
<li>The typical non-fiction books have around 50,000 words.</li>
<li>Reading 200 books will take you 417 hours.</li>
<li>The average person spends 608 hours on social media annually.</li>
<li>The average person spends 1,642 hours watching TV annually.</li>
<li>Giving up 2,250 hours annually will allow you to read 1,000 books in one year.</li>
</ol>
<p>This blew my mind. I'm a very avid reader. Since signing up for Goodreads in 2013, <a href="https://www.goodreads.com/review/stats/47945427#pages">I've been hitting at least 20,000 pages read every year</a>, and I'm on track to read 25,000 pages this year. But, I'm only putting down 75 books each year. Now granted, a spare 2,250 hours per year ÷ 365 days per year is just over 6 hours per day of reading. I'm not reading 6 hours per day. I don't watch TV, I have a job, kids and a wife to take care of, and other things that keep me off the computer most of my time at home (I'm writing this blog post after midnight).</p>
<p>No doubt, 6 hours per day is a <em>lot of reading</em>. But I average 2 hours per day, and I'm only putting down 75 books annually. 6 hours of reading per day would only put me <strong>around 225 books each year</strong>, a far cry from the 1,000 I should be hitting. What gives?</p>
<p>Well, it turns out, Charles Chu is being a bit ... liberal with his figures. First off, the average person does not read 400 words per minute. Try about half, <a href="https://www.irisreading.com/the-average-reading-speed/">at only 200 words per minute</a>, according to Iris Reading, a company that sells a product on improving your reading speed and memory comprehension. <strong>This cuts our max books from 1,000 in a year to 500</strong>.</p>
<p>Second, Chu claims the average non-fiction book is 50,000 words in length. I can tell you that 50,000 words is a very slim novel. This feels like a Louis L'Amour western length to me. Most books that I have read are probably closer to twice that length. However, according to <a href="http://www.huffingtonpost.com/2012/03/09/book-length_n_1334636.html">HuffPost which quotes Amazon Text Stats</a>, the average book is 64,000 words in length. But, <a href="http://www.writersworkshop.co.uk/blog/average-novel-wordcount/">according to this blog post by Writers Workshop</a>, the average "other fiction" novel length is 70,000 to 120,000 words. This feels much more in line with what I've read personally, so I'll go with about 100,000 words in a typical non-fiction novel.</p>
<p>So now that brings our annual total down from 500 <strong>to 250 books</strong>. That's reading 200 words per minute, for 6 hours every day, with non-fiction books that average 100,000 words in length. I claimed that I would probably come in around 225 books, so this seems to be a much closer ballpark figure.</p>
<p>But, does it line up? Let's look at it the another way, and see if we can agree that 200-250 books annually, reading 6 hours per day, is more realistic.</p>
<p>I claimed I'm reading about 2 hours per day. I read about 3 hours for 4 of the 7 days in a week while commuting to work. For the other three days in the week, I can read anywhere from 1 hour to 3 hours, depending on circumstances. So my week can see anywhere from 13 hours to 15 hours on average. That's about 2 hours per day.</p>
<p>During 2016, I read 24,048 pages. That's about 65 pages per day, which feels right on target. But, how many words are there per page? According to <a href="http://answers.google.com/answers/threadview?id=608972">this Google Answers answer</a>, which offers a couple citations, a novel averages about 250 words per page. </p>
<p>But, <a href="http://readinglength.com">readinglength.com</a> shows that many books I've read are over 300 words per page, and some denser at 350 words per page, with the average sitting around 310. So 250 words per page at 65 pages per day is 16,250 words per day, and 310 words per page at 65 pages per day 20,150 pages that I'm reading.</p>
<p>Because I'm only reading about 2 hours per day, that means I'm reading at a meager 135 to 168 words per minute, based on the above stats. I guess I'm a slow reader.</p>
<p>If I highball it at 168 words per minute, then in 6 hours, I will have read 60,480 words. After a year of reading, that's 22,075,200 words. <a href="http://www.megcabot.com/about-meg-cabot/frequently-asked-questions-getting-published/">An independent blog post</a> confirms this finding of 250-300 words per page, but also uses that to say that most adult books are 90,000 - 100,000 words in length (additional confirmation from earlier), and young adult novels target the 55,000 word length that Chu cited (maybe Chu likes reading young adult non-fiction?).  As such, I can expect to read 22,075,200 words per year ÷ 100,000 words per book, or <strong>about 220 books in a year</strong> of reading 6 hours every day.</p>
<p>Bingo.</p>
<p>So, what can we realistically expect from reading?</p>
<ol>
<li>Readers average 200 words per minute.</li>
<li>A page averages 250 words.</li>
<li>A novel averages 100,000 words.</li>
<li>One hour of reading per day can hit 30-40 books per year.</li>
<li>Six hours of reading per day can hit 200-250 books per year.</li>
<li>To read 1,000 books in a year, <strong>you need to read 22 hours per day.</strong></li>
</ol>
<p>This is reading average length adult non-fiction books at an average speed of 200 words per minute. The calculus completely changes if your average reading speed is faster than 200 wpm, you read primarily graphic novels with little text, or read shorter non-fiction novels. Fourth-grade chapter books? Yeah, I could read 1,000 of those in a year. 🙂</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2017-09-27T00:34:31-0600">2017 09 27</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/general/" rel="category tag">General</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2017/09/27/1000-books-read-in-one-year-no-not-by-a-long-shot/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2017/09/27/1000-books-read-in-one-year-no-not-by-a-long-shot/" title="Permalink to 1,000 Books Read In One Year? No, Not By A Long Shot">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4902" title="Shortlink to 1,000 Books Read In One Year? No, Not By A Long Shot">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4882" class="hentry p3 post publish author-admin category-passwords category-security y2017 m09 d18 h01">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2017/09/18/password-best-practices-i-the-generator/" title="Permalink to Password Best Practices I - The Generator" rel="bookmark">Password Best Practices I - The Generator</a></h2>
						<div class="entry-content">
<p>This is the first in a series of posts about password best practices. The series will cover best practices from a few different angles- the generator targeted at developers creating those generators, the end user (you, mom, dad, etc.) as you select passwords for accounts from those generators, and the service provider storing passwords in the database for accounts that your users are signing up for.</p>
<h2>Motivation</h2>
<p>When end users are looking for passwords, they may turn to password generators, whether they be browser extensions, websites, or offline installable executables. Regardless, as a developer, you will need to ensure that the passwords you your providing for your users are secure. Unfortunately, that's a bit of a buzzword, and can be highly subjective. So, we'll motivate what it means to be "secure" here:</p>
<ul>
<li>The generator is downloaded via HTTPS, whether it's a website, executable ZIP, or browser extension.</li>
<li>The generator uses a cryptographically secure random number generator.</li>
<li>The generator provides at least 70-bits of entropy behind the password.</li>
<li>The generator is open source.</li>
<li>The generator generates passwords client-side, not server-side.</li>
<li>The generator does not serve any ads or client-side tracking software.</li>
</ul>
<p>I think most of us can agree on these points- the software should be downloaded over HTTPS to mitigate man-in-the-middle attacks. A cryptographically secure RNG should be used to ensure unpredictability in the generated password. In addition to that, the CRNG should also be uniformly distributed across the set, so no elements of the password are more likely to appear than any other. Creating an open source password generator ensures that the software can be audited for correctness and instills trust in the application. Generating passwords client-side, means the server hos now possible way of knowing what passwords were generated, unless the client is also calling home (the code should be inspected). And of course, we don't want any adware or malware installed in the password generating application to further compromise the security of the generator.</p>
<p>Okay. That's all well and good, but what about this claim to generate passwords from at least 70-bits in entropy? Let's dig into that.</p>
<h2>Brute force password cracking</h2>
<p>Password cracking is all about reducing possibilities. Professional password crackers will have access to extensive word lists of previously compromised password databases, they'll have access to a great amount of hardware to rip through the password space, and they'll employ clever tricks in the password cracking software, such as Hashcat or MDXFind, to further reduce the search space, to make finding the passwords more likely. In practice, 90% of leaked hashed password databases are reversed trivially. With the remaining 10%, half of that space takes some time to find, but those passwords are usually recovered. The remaining few, maybe 3%-5%, contain enough entropy that the password cracking team likely won't recover those passwords in a week, or a month, or even a year.</p>
<p>So the question is this- what is that minimum entropy value that thwarts password crackers? To answer this question, let's look at some real-life brute force searching to see if we can get a good handle on the absolute minimum security margin necessary to keep your client's leaked password hash out of reach.</p>
<h2>Bitcoin mining</h2>
<p>Bitcoin mining is the modern-day version of the 1849 California Gold Rush. As of right now, Bitcoin is trading at $3,665.17 per BTC. As such, people are fighting over each other to get in on the action, purchasing specialized mining hardware, called "Bitcoin ASICs", to find those Bitcoins as quickly as possible. These ASICs are hashing blocks of data with SHA-256, and checking a specific difficulty criteria to see if it meets the requirements as a valid Bitcoin block. If so, the miner that found that block is rewarded that Bitcoin and it's recorded in the never-ending, ever-expanding, non-scalable blockchain.</p>
<p>How many SHA-256 hashes is the word at large  calculating? As of this writing, the current rate is 7,751,843.02 TH/s, which is 7,751,843,020,000,000,000 SHA-256 hashes per second. At one point, it peaked at 8,715,000 THps, and there is no doubt in my mind that it will pass 10,000,000 THps before the end of the year. So let's run with that value, of 10,000,000,000,000,000,000 SHA-256 hashes per second, or <strong>10<sup>19</sup> SHA-256 hashes per second</strong>.</p>
<p>If we're going to talk about that in terms of bits, we need to convert it to a base-2 number, rather than base-10. Thankfully, this is easy enough. All we need to calculate is the log<sub>2</sub>(X) = log(X)/log(2). Doing some math, we see that Bitcoin mining is roughly flipping every combination of bits in a:</p>
<ul>
<li>63-bit number every second.</li>
<li>69-bit number every minute.</li>
<li>74-bit number every hour.</li>
<li>79-bit number every day.</li>
<li>84-bit number every month.</li>
<li>88-bit number every year.</li>
</ul>
<p>What does this look like? Well, the line is nearly flat. Here in this image, the x-axis is the number of days spent mining for Bitcoin, starting from 0 through a full year of 365 days. The y-axis is the search space exhaustion in bits. So, you can see that in roughly 45 days, Bitcoin mining have calculated enough SHA-256 hashes to completely exhaust an 85-bit search space (click to enlarge):</p>
<p><a href="https://pthree.org/wp-content/uploads/2017/09/bitcoin.png"><img src="https://pthree.org/wp-content/uploads/2017/09/bitcoin-300x200.png" alt="Plot showing log(x*10^19*86400)/log(2) for Bitcoin mining." width="300" height="200" class="aligncenter size-medium wp-image-4884" srcset="https://pthree.org/wp-content/uploads/2017/09/bitcoin-300x200.png 300w, https://pthree.org/wp-content/uploads/2017/09/bitcoin-768x512.png 768w, https://pthree.org/wp-content/uploads/2017/09/bitcoin-1024x683.png 1024w, https://pthree.org/wp-content/uploads/2017/09/bitcoin.png 1200w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h2>Real-world password cracking</h2>
<p>That's all fine and dandy, but I doubt professional password crackers have access to that sort of hardware. Instead, let's look at a more realistic example.</p>
<p>Recently, Australian security researcher Troy Hunt, the guy that runs <a href="https://haveibeenpwned.com/">https://haveibeenpwned.com/</a>, <a href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/">released a ZIP of 320 million SHA-1 hashed passwords</a> that he's collected over the years. Because the passwords were hashed with SHA-1, recovering them should be like shooting fish in a barrel. Sure enough, a team of password crackers got together, and <a href="https://cynosureprime.blogspot.co.uk/2017/08/320-million-hashes-exposed.html">made mincemeat of the dataset</a>.</p>
<p>In the article, it is mentioned that they had a peak password cracking speed of 180 GHps, or 180,000,000,000 SHA-1 hashes per second, or <strong>18*10<sup>10</sup> SHA-1 hashes per second</strong>. The article mentions that's the equivalent of 25 NVidia GTX1080 GPUs working in concert. To compare this to Bitcoin mining, the team was flipping every combination of bits in a:</p>
<ul>
<li>41-bit number every second.</li>
<li>47-bit number every minute.</li>
<li>53-bit number every hour.</li>
<li>58-bit number every day.</li>
<li>63-bit number every month.</li>
<li>66-bit number every year.</li>
</ul>
<p>As we can see, this is a far cry from the strength of Bitcoin mining. But, are those numbers larger than you expected? Let's see how it looks on the graph, compared to Bitcoin (click to enlarge):</p>
<p><a href="https://pthree.org/wp-content/uploads/2017/09/professionals.png"><img src="https://pthree.org/wp-content/uploads/2017/09/professionals-300x200.png" alt="Plot showing log(x*18*10^10*86400)/log(2) for this cluster of password cracking hobbyists." width="300" height="200" class="aligncenter size-medium wp-image-4887" srcset="https://pthree.org/wp-content/uploads/2017/09/professionals-300x200.png 300w, https://pthree.org/wp-content/uploads/2017/09/professionals-768x512.png 768w, https://pthree.org/wp-content/uploads/2017/09/professionals-1024x683.png 1024w, https://pthree.org/wp-content/uploads/2017/09/professionals.png 1200w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>So, it seems clear that our security margin is somewhere above that line. Let's look at one more example, a theoretical one.</p>
<h2>Theoretical password cracking by Edward Snowden</h2>
<p>Before Edward Snowden became known to the world as Edward Snowden, he was known to Laura Poitras as "Citizenfour". <a href="https://www.wired.com/2014/10/snowdens-first-emails-to-poitras/">In emails back-and-forth between Laura and himself, he told her</a> (emphasis mine):</p>
<blockquote><p>"Please confirm that no one has ever had a copy of your private key and that it uses a strong passphrase. Assume your adversary is capable of <strong>one trillion guesses per second</strong>. If the device you store the private key and enter your passphrase on has been hacked, it is trivial to decrypt our communications."</p></blockquote>
<p>But one trillion guesses per second is only about 5x the collective power of our previous example of a small team of password cracking hobbyists. That's only about 125 NVidia GTX1080 GPUs. Certainly interested adversaries would have more money on hand to invest in more computing power than that. So, let's increase the rate to 10 trillion guesses per second. 1,250 NVidia GTX1080 GPUs would cost our adversary maybe $500,000. A serious investment, but possibly justifiable, and certainly not outside the <a href="http://www.washingtonpost.com/wp-srv/special/national/black-budget/">$10 billion annual budget of the NSA</a>. So let's roll with it.</p>
<p>At <strong>10<sup>13</sup> password hashes per second</strong>, we are flipping every combination of bits in a:</p>
<ul>
<li>43-bits every second.</li>
<li>49-bits every minute.</li>
<li>54-bits every hour.</li>
<li>59-bits every day.</li>
<li>64-bits every month.</li>
<li>68-bits every year.</li>
</ul>
<p>Plotting this on our chart with both Bitcoin mining and clustered hobbyist password cracking, we see (click to enlarge):</p>
<p><a href="https://pthree.org/wp-content/uploads/2017/09/snowden.png"><img src="https://pthree.org/wp-content/uploads/2017/09/snowden-300x200.png" alt="Plot of log(x*86400*10^13)/log(2)" width="300" height="200" class="aligncenter size-medium wp-image-4889" srcset="https://pthree.org/wp-content/uploads/2017/09/snowden-300x200.png 300w, https://pthree.org/wp-content/uploads/2017/09/snowden-768x512.png 768w, https://pthree.org/wp-content/uploads/2017/09/snowden-1024x683.png 1024w, https://pthree.org/wp-content/uploads/2017/09/snowden.png 1200w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h2>The takeaway</h2>
<p>What does all this math imply? That as a developer of password generator software, you should be targeting a minimum of 70-bits of entropy with your password generator. This will give your users the necessary security margins to steer clear of well-funded adversaries, should some service provider's password database get leaked to the Internet, and they find themselves as a target.</p>
<p>As a general rule of thumb, for password generator developers, these are the sort of security margins your can expect with entropy:</p>
<ul>
<li>70-bits or more: Very secure.</li>
<li>65-69 bits: Moderately secure.</li>
<li>60-64 bits: Weakly secure.</li>
<li>59 bits or less: Not secure.</li>
</ul>
<p><a href="https://pthree.org/wp-content/uploads/2017/09/recommended.png"><img src="https://pthree.org/wp-content/uploads/2017/09/recommended-300x200.png" alt="Colored recommendation of the previous plot showing all brute force attempts." width="300" height="200" class="aligncenter size-medium wp-image-4890" srcset="https://pthree.org/wp-content/uploads/2017/09/recommended-300x200.png 300w, https://pthree.org/wp-content/uploads/2017/09/recommended-768x512.png 768w, https://pthree.org/wp-content/uploads/2017/09/recommended-1024x683.png 1024w, https://pthree.org/wp-content/uploads/2017/09/recommended.png 1200w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>What does this mean for your generator then? This means that the number of size of the password or passphrase that you are giving users should be at least:</p>
<ul>
<li>Base-94: 70/log<sub>2</sub>(94)=11 characters</li>
<li>Base-64: 70/log<sub>2</sub>(64)=12 characters</li>
<li>Base-32: 70/log<sub>2</sub>(32)=14 characters</li>
<li>Base-16: 70/log<sub>2</sub>(16)=18 characters</li>
<li>Base-10: 70/log<sub>2</sub>(10)=22 characters</li>
<li>Diceware: 70/log<sub>2</sub>(7776)=6 words</li>
</ul>
<p>Now, there is certainly nothing wrong with generating 80-bit, 90-bit, or even 128-bit entropy. The only thing you should consider with this, is the size of the resulting password and passphrases. For example, if you were providing a minimum of 128-bit security for your users with the password generator, then things would look like:</p>
<ul>
<li>Base-94: 128/log<sub>2</sub>(94)=20 characters</li>
<li>Base-64: 128/log<sub>2</sub>(64)=22 characters</li>
<li>Base-32: 128/log<sub>2</sub>(32)=26 characters</li>
<li>Base-16: 128/log<sub>2</sub>(16)=32 characters</li>
<li>Base-10: 128/log<sub>2</sub>(10)=39 characters</li>
<li>Diceware: 128/log<sub>2</sub>(7776)=10 words</li>
</ul>
<p>As you can see, as you increase the security for your users, the size of the generated passwords and passphrases will also increase.</p>
<h2>Conclusion</h2>
<p>It's critical that we are doing right by our users when it comes to security. I know Randall Munroe of XKCD fame created the "correct horse battery staple" comic, advising everyone to create 4-word passphrases. This is fine, provided that those 4 words meets that minimum 70-bits of entropy. In order for that to happen though, the word list needs to be:</p>
<pre>
   4 = 70/log<sub>2</sub>(x)
=> 4 = 70/log(x)/log(2)
=> 4 = 70*log(2)/log(x)
=> 4*log(x) = 70*log(2)
=> log(x) = 70/4*log(2)
=> x = 10<sup>70/4*log(2)</sup>
=> x ~= 185,364
</pre>
<p>You would need a word list of at least 185,364 words to provide at least 17.5-bits of entropy per word, which brings us to required 70-bits of total entropy for 4 words. All too often, I see generators providing four words, but the word list is far too small, like around Diceware size, which is only around 51-bits of entropy. As we just concluded, that's not providing the necessary security for our users.</p>
<p>So, developers, when creating password and passphrase generators, make sure they are at least targeting the necessary 70-bits of entropy, in addition to the other qualifications that we outlined at the beginning of this post.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2017-09-18T07:00:46-0600">2017 09 18</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/passwords/" rel="category tag">Passwords</a><br/><a href="https://pthree.org/category/security/" rel="category tag">Security</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2017/09/18/password-best-practices-i-the-generator/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2017/09/18/password-best-practices-i-the-generator/" title="Permalink to Password Best Practices I - The Generator">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4882" title="Shortlink to Password Best Practices I - The Generator">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4872" class="hentry p4 post publish author-admin category-passwords category-security y2017 m09 d15 h01 alt">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2017/09/15/colorful-passphrases/" title="Permalink to Colorful Passphrases" rel="bookmark">Colorful Passphrases</a></h2>
						<div class="entry-content">
<p><a href="https://pthree.org/2017/09/04/a-practical-and-secure-password-and-passphrase-generator/">Since the development of my passphrase and password generator</a>, I started working toward improving the other online generators out there on the web. <a href="https://docs.google.com/spreadsheets/d/1ucaqJ4U3X3nNEbAAa06igbBkITHaA98blftOwT8u0I4/edit?usp=sharing">I created a Google Spreadsheet</a> to work toward that goal, by doing reasonable audits to "rank" each generator, and see how they stacked up against the rest. Then, I started submitting patches in hopes of making things better.</p>
<p>One passphrase generator that was brought to my attention was <a href="https://passplum.com/">Pass Plum</a>. Pass Plum supplies <a href="https://github.com/maxbeatty/passplum/blob/master/packages/web/example-seed-data.json">an example word list</a> to use for generating your passphrases, if you choose to install the software on your own server. Unfortunately, the list is only 140 words in size, so if you choose to use that for your word list, then you only get about 7.13-bits of entropy per word. Sticking to the default configuration 4 words given to the user, that's a scant 28-bits of security on your passphrase, which is trivially reversed. <a href="https://github.com/maxbeatty/passplum/pull/14">I submitted a pull request to extend it to 4,096 words</a>, providing exactly 13-bits of entropy per word, or about 52-bits of entropy for a 4-word passphrase- a significant improvement.</p>
<p>I noticed, however, that the default list was nothing but color names, and that got me thinking- what if not only the generator provided color names for passphrases, but also colored the word that color name? Basically, a sort of false <a href="https://en.wikipedia.org/wiki/Synesthesia">visual synesthesia</a>. What I want to know is this, is it easier to remember passphrases when you can associate each word with a visual color?</p>
<p>So, over the past several nights, and during weekends, I've been putting this together. So, here is is- colorful passphrases.</p>
<p><img src="https://pthree.org/wp-content/uploads/2017/09/colorful.png" alt="Collage of 4 separate screenshots of what the color passphrase generator looks like." width="797" height="429" class="aligncenter size-full wp-image-4874" srcset="https://pthree.org/wp-content/uploads/2017/09/colorful.png 797w, https://pthree.org/wp-content/uploads/2017/09/colorful-300x161.png 300w, https://pthree.org/wp-content/uploads/2017/09/colorful-768x413.png 768w" sizes="(max-width: 797px) 100vw, 797px" /></p>
<p><a href="https://ae7.st/g/">Head over to my site to check it out</a>. If a color is too light (its luma value is very high), then the word is outlined with CSS. Every word is bold, to make the word even more visible on the default white background.</p>
<p>As I mentioned, the idea is simple: people struggle remembering random meaningless strings of characters for passwords, so passphrases are a way to make a random series of words easier to recall. After all, it should be easier to remember "gnu hush gut modem scamp giddy" than it is to remember "$5hKXuE[\NK". It's certainly easier to type on mobile devices, and embedded devices without keyboards, like smart TVs and video game consoles.</p>
<p>But, even then, there is nothing that is really tying "gnu hush gut modem scamp giddy" together, so you force yourself in some sort of mnemonic to recall it. Visually stimulated color passphrases have the benefit of not only using a mnemonic to recall the phrase, but an order of colors as well. For example, you might not recall "RedRobin Pumpkin Revolver DeepPuce Lucky Crail TealDeer", but you may remember its color order of roughly "red orange black purple gold brown teal". "A RedRobin is red. A pumpkin is orange. A revolver (gun) is black. DeepPuce is a purple. Lucky coins are gold. Crail, Soctand has brown dirt. TealDeer are teal."</p>
<p>However, it also comes with a set of problems. First, what happens if you actually have visual synesthesia? Will seeing these colors conflict with your mental image of what the color should be for that word? Second, many of the words are very obscure, such as "Crail" or "Tussock" or "Tuatara" (as all seen in the previous screenshot collage). Finally, what happens when you have a color passphrase where two similar colors are adjacent to each other? Something like "Veronica Affair Pipi DeepOak Atoll BarnRed RedOxide"? Both "BarnRed" and "RedOxide" are a deep reddish color. Will it be more difficult to recall which comes first?</p>
<p><img src="https://pthree.org/wp-content/uploads/2017/09/color_collision.png" alt="A screenshot showing a color collision between &quot;BarnRed&quot; and &quot;RexOxide&quot;" width="386" height="202" class="aligncenter size-full wp-image-4876" srcset="https://pthree.org/wp-content/uploads/2017/09/color_collision.png 386w, https://pthree.org/wp-content/uploads/2017/09/color_collision-300x157.png 300w" sizes="(max-width: 386px) 100vw, 386px" /></p>
<p>As someone who is interested in password research, I wanted to see what sort of memory potential visually colorful passphrases could have. As far as I know, this has never been investigated before (at least I could find any research done in this area, and I can't find any passphrase generators doing it). <a href="https://www.wired.com/2014/07/forget-your-pets-name-what-if-your-password-came-from-this-color-wheel/">This post from Wired</a> investigates alternatives to text entry for password support, such as using color wheels, but doesn't say anything about visual text. <a href="https://github.com/carmebar/unicornpass">Here is a browser extension</a> that colors password form fields on websites, with the SHA-1 hash of your password as you type it. You know if it's correct, by recognizing if the pattern is the same it always is when logging in.</p>
<p>Long story short, I think I'm wading into unknown territory here. If you find this useful, or even if you don't, I would be very interested in your feedback.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2017-09-15T07:00:03-0600">2017 09 15</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/passwords/" rel="category tag">Passwords</a><br/><a href="https://pthree.org/category/security/" rel="category tag">Security</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2017/09/15/colorful-passphrases/#comments">Comments (1)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2017/09/15/colorful-passphrases/" title="Permalink to Colorful Passphrases">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4872" title="Shortlink to Colorful Passphrases">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4787" class="hentry p5 post publish author-admin category-general y2017 m09 d04 h05">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2017/09/04/a-practical-and-secure-password-and-passphrase-generator/" title="Permalink to A Practical and Secure Password and Passphrase Generator" rel="bookmark">A Practical and Secure Password and Passphrase Generator</a></h2>
						<div class="entry-content">
<h2>The TL;DR</h2>
<p>Go to <a href="https://ae7.st/g/">https://ae7.st/g/</a> and check out my new comprehensive password and passphrase generator. Screenshots and longer explanation below.</p>
<h2>Introduction</h2>
<p>Sometime during the middle of last summer, I started thinking about password generators. The reason for this, was that I noticed a few things when I used different password generators, online or offline:</p>
<ol>
<li>The generator created random meaningless strings.</li>
<li>The generator created XKCD-style passphrases.</li>
<li>The generator gave the user knobs and buttons galore to control
<ul>
<li>Uppercase characters</li>
<li>Lowercase characters</li>
<li>Digits</li>
<li>Nonalphanumeric characters</li>
<li>Pronounceable passwords</li>
<li>Removing ambiguous characters</li>
<li>Password Length</li>
</ul>
</li>
</ol>
<h2>The Problem</h2>
<p><a href="http://passwordsgenerator.net/">Here is just one example</a> of what I'm talking about:</p>
<div id="attachment_4789" style="max-width: 764px" class="wp-caption aligncenter"><img style="border: 1px black solid;" src="https://pthree.org/wp-content/uploads/2016/12/secure-password-generator.png" alt="Screenshot showing a &quot;secure&quot; password generator from a website." width="754" height="576" class="size-full wp-image-4789" srcset="https://pthree.org/wp-content/uploads/2016/12/secure-password-generator.png 754w, https://pthree.org/wp-content/uploads/2016/12/secure-password-generator-300x229.png 300w" sizes="(max-width: 754px) 100vw, 754px" /><p class="wp-caption-text">This password generator has a lot of options for tweaking your final password.</p></div>
<p>Ever since Randal Munroe published <a href="https://xkcd.com/936/">https://xkcd.com/936/</a>, people started creating "XKCD-style" passphrase generators. <a href="http://preshing.com/20110811/xkcd-password-generator/">Here's a very simple one</a> that creates a four-word passphrase. No knobs, bells, or whistles. Just a button to generate a new XKCD passphrase. Ironically, the author provides an XKCD passphrase generator for you to use, then tells you not to use it. 🙂</p>
<p>On the other hand, why not make the XKCD password generation as complex as possible? Here at <a href="https://xkpasswd.net/s/">https://xkpasswd.net/s/</a>, not only do you have an XKCD password generator, but you have all the bells, whistles, knobs, buttons, and control to make it as ultimately complex as possible. Kudos to the generator even make entropy estimates about the generated passwords!</p>
<div id="attachment_4793" style="max-width: 807px" class="wp-caption aligncenter"><img src="https://pthree.org/wp-content/uploads/2016/12/xkpasswd.png" alt="Screenshot showing a very complex control board of an XKCD style password generator." width="797" height="953" class="size-full wp-image-4793" srcset="https://pthree.org/wp-content/uploads/2016/12/xkpasswd.png 797w, https://pthree.org/wp-content/uploads/2016/12/xkpasswd-251x300.png 251w, https://pthree.org/wp-content/uploads/2016/12/xkpasswd-768x918.png 768w" sizes="(max-width: 797px) 100vw, 797px" /><p class="wp-caption-text">Why not add all the complexity of password generation to XKCD passwords?</p></div>
<p>What bothers me about the "XKCD password" crowd, however, is that no one knows that <a href="http://world.std.com/~reinhold/diceware.html">Diceware was realized back in 1995</a>, making passphrases commonplace. Arnold Reinhold created a list of 7,776 words, enough for every combination of a 6-sided die rolled 5 times. Arnold explains that the passphrase needs to be chosen from a true random number generator (thus the dice) and as a result each word in the list will have approximately 12.9-bits of entropy. Arnold recommends throwing the dice enough times to create a five-word Diceware passphrase. That would provide about 64-bits of entropy, a modestly secure result.</p>
<p>A five-word Diceware passphrase could be:</p>
<ul>
<li>soot laid tiger rilly feud pd</li>
<li>31 al alibi chick retch bella</li>
<li>woven error rove pliny dewey quo</li>
</ul>
<h2>My Solution</h2>
<p>While these password generators are all unique, and interesting, and maybe even secure, it boils down to the fact that my wife, never mind my mom or grandma, isn't going to use them. They're just too complex. But worse, they give the person using them a false sense of security, and in most cases, they're not secure at all. I've talked with my wife, family, and friends about what it requires to have a strong password, and I've asked them to give me examples. You can probably guess what I got.</p>
<ul>
<li>Spouse's first name with number followed by special character. EG: "Alan3!"</li>
<li>Favorite sports team in CamelCase. EG: "UtahUtes"</li>
<li>Keyboard patterns. EG: "qwertyasdf"</li>
</ul>
<p>The pain goes on and on. Usually, the lengths of each password is somewhere around 6-7 characters. However, when you start talking about some of these generators, and they see passwords like "(5C10#+b" or "V#4I5'4c", their response is usually "I'm never going to remember that!". Of course, this is a point of discussion about password managers, but I'll save that for another post.</p>
<p>So I wanted to create a password and passphrase generator that met everyone's needs:</p>
<ul>
<li>Simplicity of use</li>
<li>Length and complexity</li>
<li>Provably secure</li>
<li>Desktop and mobile friendly</li>
</ul>
<p>If you've been a subscriber to my blog, you'll know that I post a lot about Shannon entropy. Entropy is maximized when a uniform unbiased random function controls the output. Shannon entropy is just a fancy way for estimating the total number of possibilities something could be, and it's measured in bits. So, when I say a Diceware passphrase as approximately 64-bits of entropy, I'm saying that the passphrase that was generated is 1 in 2^64 or 18,446,744,073,709,551,616 possibilities. Again, this is only true if the random function is uniform and unbiased.</p>
<p>So, I built a password generator around entropy, and entropy only. The question became, what should the range be, and what's my threat model? I decided to build my threat model after offline brute force password cracking. A single computer with a few modest GPUs can work through every 8-character password built from all 94 graphical characters on the ASCII keyboard hashed with SHA-1 in about a week. That's 94^8 or 6,095,689,385,410,816 total possibilities. If chosen randomly, Shannon entropy places any password built from that set at about 52-bits. If the password chosen randomly from the same set of 94 graphical characters was 9 characters long, then the password would have about 59-bits of Shannon entropy. This would also take that same GPU password cracking machine 94 weeks to fully exhaust every possibility.</p>
<p>This seemed like a good place to start the range. So, for simplicity sake, I started the entropy range at 55-bits, then incremented by 5 bits until the maximum of 80-bits. As you can see from the screenshot of the entropy toolbar, 55-bits is red as we are in dangerous territory of an offline password cracker with maybe a cluster of GPUs finding the password. But things get exponentially expensive very quickly. Thus, 60-bits is orange, 65-bits is yellow, and 70-bits and above are green. Notice that the default selection is 70-bits.</p>
<div id="attachment_4807" style="max-width: 408px" class="wp-caption aligncenter"><img src="https://pthree.org/wp-content/uploads/2016/12/entropy-toolbar.png" alt="Screenshot showing the entropy toolbar of my password generator." width="398" height="34" class="size-full wp-image-4807" srcset="https://pthree.org/wp-content/uploads/2016/12/entropy-toolbar.png 398w, https://pthree.org/wp-content/uploads/2016/12/entropy-toolbar-300x26.png 300w" sizes="(max-width: 398px) 100vw, 398px" /><p class="wp-caption-text">The entropy toolbar of my password generator, with 70-bits as the default.</p></div>
<p>When creating the generator, I realized that some sites will have length restrictions on your password, such as not allowing more than 12 characters, or not allowing certain special characters, or forcing at least one uppercase character and one digit, and so forth. Some service providers, like Google, will allow you any length with any complexity. But further, people remember things differently. Some people don't need to recall the passwords, as they are using password managers on all their devices, with a synced database, and can just copy/paste. Others want to remember the password, and others yet want it easy to type.</p>
<p>So, it seemed to me that not only could I build a password generator, but also a passphrase generator. However, I wanted this to be portable, so rather than create a server-side application, I made a client-side one. This does mean that you download the wordlists as you need them to generate the passphrases, and the wordlists are anything but light. However, you only download them as you need them, rather than downloading all on page load.</p>
<p>To maximize Shannon entropy, I am using the cryptographically secure pseudorandom number generator from the <a href="https://github.com/bitwiseshiftleft/sjcl">Stanford Javascript Crypto Library</a>. I'm using this, rather than the web crypto API, because I use some fairly obscure browsers, that don't support it. It's only another 11KB download, which I think is acceptable. SJCL does use the web crypto API to seed its generator, if the browser supports it. If not, a entropy collector listener event is launched, gathering entropy from mouse movements. The end result, is that Shannon entropy is maximized.</p>
<h2>Passphrases</h2>
<p>There are 5-types of passphrases in my generator:</p>
<ul>
<li>Alternate</li>
<li>Bitcoin</li>
<li>Diceware</li>
<li>EFF</li>
<li>Pseudowords</li>
</ul>
<h3>Diceware</h3>
<p>For the Diceware generator, I support <a href="http://world.std.com/~reinhold/diceware.html#Diceware in Other Languages|outline">all the languages that you'll find on the main Diceware page</a>, in addition to the Beale word list. As of this writing, that's Basque, Bulgarian, Catalan, Chinese, Czech, Danish, Dutch, English, Esperanto, Finnish, French, German, Italian, Japanese (Romaji), Maori, Norwegian, Polish, Portuguese, Russian, Slovenian, Spanish, Swedish, and Turkish. There are 7,776 words in each word list, providing about 12.9248-bits of entropy per word.</p>
<h3>EFF</h3>
<p>For the EFF generator, I support <a href="https://www.eff.org/deeplinks/2016/07/new-wordlists-random-passphrases">the three word lists that the EFF has created</a>- the short word list, the long word list, and the "distant" word list, where every work has an edit distance of at least three from the others in the list. The long list is similar to the Diceware list, in that it is 7,776 words providing about 12.9248-bits of entropy per word. However, the number of characters in each word in the word list are longer on average, at around 7 characters per word than the Diceware word list, at around 4.3 characters per word. So, for the same entropy estimate, you'll have a longer EFF passphrase than a Diceware passphrase. The short word list contains only 1,296 words, to be used with 4 dice, instead of 5, and the maximum character length of any word is 5 characters. The short word list provides about 10.3399-bits of entropy per word. Finally, the "distant" word list is short in number of words also at 1,296 words, but longer in character count, averaging 7 characters per word.</p>
<h3>Bitcoin</h3>
<p>For the Bitcoin generator, I am using the <a href="https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md">BIP-0039 word lists</a> to create the passphrase. These lists are designed to be a mnemonic code or sentence for <a href="https://bitcoinbips.org/bip/bip-0039">generating deterministic Bitcoin wallets</a>. However, because they are a list of words, they can be used for building passphrases too. Each list is 2,048 words, providing exactly 11-bits of entropy per word. Like Diceware, I support all the languages of the BIP-0039 proposal, which as of this writing includes Simplified Chinese, Traditional Chinese, English, French, Italian, Japanese (Hiragana), Korean (Hangul), and Spanish.</p>
<h3>Alternate</h3>
<h4>Elvish</h4>
<p>In the Alternate generator, I have a few options that provide various strengths and weaknesses. The Elvish word list is for entertainment value only. The word list consists of 7,776 words, making it suitable for Diceware, and provides about 12.9248-bits of entropy per word. However, because the generator is strictly electronic, and I haven't assigned dice roll values to each word, I may bump this up to 8,192 words providing exactly 13-bits of entropy per word. The word list was built from the <a href="http://eldamo.org/index.html">Eldamo lexicon</a>.</p>
<h4>Klingon</h4>
<p>Another passphrase generator for entertainment value is the Klingon generator. This word list comes from the <a href="http://klingonska.org/dict/dict.zdb">Klingon Pocket Dictionary</a>, and my word list provides exactly 2,604 unique words from the 3,028 words in the Klingon language. Thus, each word provides about 11.3465-bits of entropy.</p>
<h4>PGP</h4>
<p>The <a href="https://en.wikipedia.org/wiki/PGP_word_list">PGP word list</a> was created to make reading hexadecimal strings easier to speak and phonetically unambiguous. It comprises of exactly 256 words providing exactly 8-bits of entropy per word. This generator works well in noisy environments, such as server rooms, where passwords need to be spoken from one person to another to enter into a physical terminal.</p>
<h4>Simpsons</h4>
<p>The Simpson's passphrase generator <a href="https://github.com/PeerioTechnologies/peerio-web-passphrase-generator/blob/master/src/dict/simpsons.txt">consists of 5,000 words</a>, providing about 12.2877-bits of entropy per word. The goal of this generator is not only educational to show that any source of words can be used for a password generator, such as a television series of episodes, but also more memorable. Because this list contains the most commonly spoken 5,000 words from the Simpson's episodes, a good balance of verbs, nouns, adjectives, etc. are supplied. As such, the generated passphrases seem to be easier to read, and less noun-heavy than the Diceware or EFF word lists. These passphrases may just be the easiest to recall, aside from the Trump word list.</p>
<h4>Trump</h4>
<p>And now my personal favorite. The Trump generator was initially built for entertainment purposes, but ended up having the advantage of providing a good balanced passphrase of nouns, verbs, adjectives, etc. much like the Simpson's generator. As such, these passphrases may be easier to recall, because they are more likely to read as valid sentences than the Diceware or EFF generators. This list is pulled from <a href="https://twitter.com/realDonaldTrump">Donald J. Trump's Twitter account</a>. The list is always growing, currently at 5,343 words providing about 12.3404-bits of entropy per word.</p>
<h2>Pseudowords</h2>
<p>The pseudowords generator is a cross between unreadable/unpronounceable random strings and memorable passphrases. They are pronounceable, even if the words themselves are gibberish. They are generally shorter in practice than passphrases, and longer than pure random strings. The generators are here to show what you can do with random pronounceable strings.</p>
<h3>Bubble Babble</h3>
<p><a href="http://www.wiki.yak.net/589">Bubble Babble is a hexadecimal encoder</a>, with builtin checksumming, initially created Antti Huima, and implemented in the original proprietary SSH tool (not the one by the OpenSSH developers). Part of the specification is that every encoded string begins and ends with "x". However, rather than encode data from the RNG, it is randomly generating 5-characters words in the syntax of "". As such, each 5-character word, except for the end points, provides 21521521=231,525 unique combinations, or about 17.8208-bits of entropy. The end points are in the syntax of "x" or "x, which is about 21521*5=11,025 unique combinations, or about 13.4285-bits of entropy.</p>
<h3>Secret Ninja</h3>
<p>This generator comes from a <a href="http://ninjaname.net/">static character-to-string assignment</a> that produces pronounceable Asian-styled words. As such, there are only 26 assignments, providing about 4.7004-bits of entropy per string. There are three strings concatenated together per hyphenated word.</p>
<h3>Cosby Bebop</h3>
<p>I was watching this <a href="https://www.youtube.com/watch?v=f8uwhgFkTEE">YouTube video with Bill Cosby and Stewie from Family Guy</a>, and about half-way through the skit, Bill Cosby starts using made-up words as part of his routine. I've seen other skits by comedians where they use made-up words to characterize Bill Cosby, so I figured I would create a list of these words, and see how they fell out. There are 32 unique words, providing exactly 5-bits of entropy per word. Unlike the Bubble Babble and Secret Ninja generators, this generator uses both uppercase and lowercase Latin characters.</p>
<h3>Korean K-pop</h3>
<p>In following with the Bill Cosby Bebop generator, I created a Korean "K-pop" generator that used the 64-most common male and female Korean names, providing exactly 6-bits of entropy per name. I got the list of names from various sites listing common male and female Korean names.</p>
<h2>Random</h2>
<p>These are random strings provided as a last resort for sites or accounting software that have very restrictive password requirements. These passwords will be some of the shortest generated while meeting the same minimum entropy requirement. Because these passwords are not memorable, they should be absolutely stored in a password manager (you should be using one anyway).</p>
<ul>
<li><strong>Base-94</strong>: Uses all graphical U.S. ASCII characters (does not include horizontal space). Each character provides about 6.5546-bits of entropy. This password will contain ambiguous characters.</li>
<li><strong>Base-64</strong>- Uses all digits, lowercase and uppercase Latin characters, and the "+" and "/". Each character provides exactly 6-bits of entropy. This password will contain ambiguous characters.</li>
<li><strong>Base-32</strong>: Uses the characters defined in RFC 4648, which strives to use an unambiguous character set. Each character provides exactly 5-bits of entropy.</li>
<li><strong>Base-16</strong>: Uses all digits and lowercase characters "a" through "f". Each character provides exactly 4-bits of entropy. This password will contain fully unambiguous characters.</li>
<li><strong>Base-10</strong>: Uses strictly the digits "0" through "9". This is mostly useful for PINs or other applications where only digits are required. Each digits provides about 3.3219-bits of entropy. This password will contain fully unambiguous characters.</li>
<li><strong>Emoji</strong>: There are 881 emoji glyphs provided by that font, yielding about 9.7830-bits per glyph. One side-effect, is that even though there is a character count in the generator box, each glyph may be more than 1 byte, so some input forms may count that glyph as more than 1 character. Regardless, the minimum entropy is met, so the emoji password is still secure.</li>
</ul>
<p>I want to say something a bit extra about the Emoji generator. With the rise of Unicode and the UTF-8 standard, and the near ubiquitous popularity of smartphones and mobile devices, having access to non-Latin character sets is becoming easier and easier. As such, password forms are more likely supporting UTF-8 on input to allow Cyrillic, Coptic, Arabic, and East Asian ideographs. So, if Unicode is vastly becoming the norm, why not take advantage of it while having a little fun?</p>
<p>I opted for the black-and-white font, as opposed to the color font, to stay consistent with the look and feel of the other generators. This generator uses the emoji character sets provided by Google's Noto Emoji fonts, as that makes it easy for me to support the font in CSS 3, allowing every browser that supports CSS 3 to take advantage of the font and render the glyphs in a standard fashion. The license is also open so that I can redistribute the font without paying royalties, and others can do the same.</p>
<h2>Screenshots</h2>
<p>The post wouldn't be complete without some screenshots. The generator is both desktop friendly, fitting comfortably in a 1280x800 screen resolution, as well a mobile friendly, working well on even some of the oldest mobile devices.</p>
<div id="attachment_4856" style="max-width: 1290px" class="wp-caption aligncenter"><img src="https://pthree.org/wp-content/uploads/2017/09/desktop.png" alt="Desktop screenshot of my password generator." style="border: 1px black solid;" /><p class="wp-caption-text">Desktop screenshot.</p></div>
<p><center></p>
<table>
<tr>
<td>
<div id="attachment_4857" style="max-width: 422px" class="wp-caption aligncenter"><img src="https://pthree.org/wp-content/uploads/2017/09/mobile1.png" alt="First mobile screenshot of my password generator." style="border: 1px black solid;" /><p class="wp-caption-text">First mobile screenshot.</p></div>
</td>
<td>
<div id="attachment_4858" style="max-width: 422px" class="wp-caption aligncenter"><img src="https://pthree.org/wp-content/uploads/2017/09/mobile2.png" alt="Second mobile screenshot of my password generator." style="border: 1px black solid;" /><p class="wp-caption-text">Second mobile screenshot.</p></div>
</td>
</tr>
</table>
<p></center></p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2017-09-04T11:59:59-0600">2017 09 04</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/general/" rel="category tag">General</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2017/09/04/a-practical-and-secure-password-and-passphrase-generator/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2017/09/04/a-practical-and-secure-password-and-passphrase-generator/" title="Permalink to A Practical and Secure Password and Passphrase Generator">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4787" title="Shortlink to A Practical and Secure Password and Passphrase Generator">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4841" class="hentry p6 post publish author-admin category-passwords category-security y2017 m08 d03 h11 alt">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2017/08/03/random-passphrases-work-even-if-theyre-built-from-known-passwords/" title="Permalink to Random Passphrases Work, Even If They&#039;re Built From Known Passwords" rel="bookmark">Random Passphrases Work, Even If They're Built From Known Passwords</a></h2>
						<div class="entry-content">
<p>Just this morning, security researcher <a href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/">Troy Hunt released a ZIP containing 306 million passwords</a> that he's collected over the years from his <a href="https://haveibeenpwned.com/">';--have i been pwned?</a> service. As an extension, he created a service to provide either a password or a SHA-1 hash to see if your password has been pwnd.</p>
<p><img src="https://pthree.org/wp-content/uploads/2017/08/pwnd.png" alt="Screenshot showing the entry text field to test your password from the new password checking service Troy Hunt has provided." class="aligncenter size-full wp-image-4842" srcset="https://pthree.org/wp-content/uploads/2017/08/pwnd.png 997w, https://pthree.org/wp-content/uploads/2017/08/pwnd-300x129.png 300w, https://pthree.org/wp-content/uploads/2017/08/pwnd-768x331.png 768w" sizes="(max-width: 997px) 100vw, 997px" /></p>
<p>In 2009, the social network RockYou was breached, and 32 million accounts of usernames and passwords was released to the public Internet. No doubt those 32 million passwords are included in Troy Hunt's password dump. What's interesting, and the point of this post, is individually, each password from the RockYou breach will fail.</p>
<p><img src="https://pthree.org/wp-content/uploads/2017/08/rockyou-2.png" alt="Collage of six screenshots of individual RockYou passwords failing Troy Hunt's password check. They were: caitlin, peachy, keeley, doreen, ursulet, & juggalo." class="aligncenter size-full wp-image-4845" srcset="https://pthree.org/wp-content/uploads/2017/08/rockyou-2.png 2926w, https://pthree.org/wp-content/uploads/2017/08/rockyou-2-300x62.png 300w, https://pthree.org/wp-content/uploads/2017/08/rockyou-2-768x157.png 768w, https://pthree.org/wp-content/uploads/2017/08/rockyou-2-1024x210.png 1024w" sizes="(max-width: 2926px) 100vw, 2926px" /></p>
<p>However, what would happen if you took 6 random RockYou passwords, and created a passphrase? Below is screenshot demonstrating just that using the above 6 randomly chosen RockYou passwords. Individually, they all fail. Combined, they pass.</p>
<p><img src="https://pthree.org/wp-content/uploads/2017/08/pwnd7.png" alt="Screenshot showing how creating the passphrase 'caitlinpeachykeeleydoreenursuletjuggalo' passes Troy Hunt's check." class="aligncenter size-full wp-image-4846" srcset="https://pthree.org/wp-content/uploads/2017/08/pwnd7.png 972w, https://pthree.org/wp-content/uploads/2017/08/pwnd7-300x90.png 300w, https://pthree.org/wp-content/uploads/2017/08/pwnd7-768x229.png 768w" sizes="(max-width: 972px) 100vw, 972px" /></p>
<p>Now, to be fair, I'm choosing these passwords from <a href="https://ae7.st/g/">my personalized password generator</a>. The list is the top 7,776 passwords from the 32 million RockYou dump. As such, you could use this list as a Diceware replacement with 5 dice. Regardless, each password is chosen at random from that list, and enough passwords are chosen to reach a 70-bits of entropy target, which happen to be 6 passwords. Mandatory screenshot below:</p>
<p><img src="https://pthree.org/wp-content/uploads/2017/08/rockyou-combined.png" alt="Screenshot showing my password generator using the RockYou passwords as a source for a strong passphrase. One screenshot is hyphenating the passwords, the other is not." class="aligncenter size-full wp-image-4850" srcset="https://pthree.org/wp-content/uploads/2017/08/rockyou-combined.png 860w, https://pthree.org/wp-content/uploads/2017/08/rockyou-combined-300x60.png 300w, https://pthree.org/wp-content/uploads/2017/08/rockyou-combined-768x154.png 768w" sizes="(max-width: 860px) 100vw, 860px" /></p>
<p>The point of this post, is that you can actually build a secure password for sites and services using previously breached passwords for your word list source, in this case, RockYou. The only conditions is that you have a word list large enough create a reasonable passphrase with few selections, and that the process picking the passwords for you is cryptographically random.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2017-08-03T17:40:23-0600">2017 08 03</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/passwords/" rel="category tag">Passwords</a><br/><a href="https://pthree.org/category/security/" rel="category tag">Security</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2017/08/03/random-passphrases-work-even-if-theyre-built-from-known-passwords/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2017/08/03/random-passphrases-work-even-if-theyre-built-from-known-passwords/" title="Permalink to Random Passphrases Work, Even If They're Built From Known Passwords">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4841" title="Shortlink to Random Passphrases Work, Even If They're Built From Known Passwords">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4834" class="hentry p7 post publish author-admin category-cryptology category-security y2017 m02 d17 h06">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2017/02/17/electronic-slot-machines-and-pseudorandom-number-generators/" title="Permalink to Electronic Slot Machines and Pseudorandom Number Generators" rel="bookmark">Electronic Slot Machines and Pseudorandom Number Generators</a></h2>
						<div class="entry-content">
<h2>TL;DR</h2>
<p>An Austrian casino company used a predictable pseudorandom number generator, rather than a cryptographically secure one, and people are taking advantage of it, and cashing out big.</p>
<h2>The Story</h2>
<p><a href="https://www.wired.com/2017/02/russians-engineer-brilliant-slot-machine-cheat-casinos-no-fix/">Wired reported on an article about an amazing operation at beating electronic slot machines</a>, by holding your phone to the slot machine screen for a time while playing, leaving the slot machine, then coming back an additional time, and cashing in big.</p>
<blockquote><p>Unlike most slots cheats, he didn’t appear to tinker with any of the machines he targeted, all of which were older models manufactured by Aristocrat Leisure of Australia. Instead he’d simply play, pushing the buttons on a game like Star Drifter or Pelican Pete while furtively holding his iPhone close to the screen.</p>
<p>He’d walk away after a few minutes, then return a bit later to give the game a second chance. That’s when he’d get lucky. The man would parlay a $20 to $60 investment into as much as $1,300 before cashing out and moving on to another machine, where he’d start the cycle anew.</p></blockquote>
<p>These machines were made by Austrian company Novomatic, and when Novomatic engineers learned of the problem, after a deep investigation, the best thing they could come up with, was that the random number generator in the machine was predictable:</p>
<blockquote><p>Novomatic’s engineers could find no evidence that the machines in question had been tampered with, leading them to theorize that the cheaters had figured out how to predict the slots’ behavior. “Through targeted and prolonged observation of the individual game sequences as well as possibly recording individual games, it might be possible to allegedly identify a kind of ‘pattern’ in the game results,” the company admitted in a February 2011 notice to its customers.</p></blockquote>
<p>The article, focused on a single incident in Missouri, mentions that the state vets the machines before they go into production:</p>
<blockquote><p>Recognizing those patterns would require remarkable effort. Slot machine outcomes are controlled by programs called pseudorandom number generators that produce baffling results by design. Government regulators, such as the Missouri Gaming Commission, vet the integrity of each algorithm before casinos can deploy it.</p></blockquote>
<h2>On random number generators</h2>
<p>I'll leave you to read the rest of the article. Suffice it to say, the Novomatic machines were using a predictable pseudorandom number generator after observing its output for a period of time. This poses some questions that should immediately start popping up in your head:</p>
<ol>
<li>What is the vetting process by states to verify the quality of the pseudorandom number generators in solt machines?</li>
<li>Who is on that vetting commission? Is it made up of mathematicians and cryptographers? Or just a board of executives and politicians?</li>
<li>Why aren't casino manufacturers using cryptographically secure pseudorandom number generators?</li>
</ol>
<p>For me, that third item is the most important. No doubt, as the Wired article states, older machines just cannot be fixed. They need to be taken out of production. So long as they occupy casinos, convenience stores, and gas stations, they'll be attacked, and the owner will lose money. So let's talk about random number generators for a second, and see what the gambling industry can do to address this problem.</p>
<p>You can categorize random number generators into <a href="https://twitter.com/AaronToponce/status/826086097016872960">four categories</a>:</p>
<ol>
<li>Nonsecure pseudorandom</li>
<li>Cryptographically secure pseudorandom</li>
<li>Chaotic true random</li>
<li>Quantum true random</li>
</ol>
<p>What I would be willing to bet, is that most electronic machines out there are of the "nonsecure pseudorandom" type of random number generator, and Novomatic just happened to pick a very poor one. Again, there likely isn't anything they can do about existing machines in production now, but what can they do moving forward? They should start using cryptographically secure pseudorandom number generators (CSPRNGs).</p>
<p>In reality, this is trivial. There are plenty of CSPRNGs to choose from. CSPRNGs can be broken down further into three subcategories:</p>
<ol>
<li>Designs based on cryptographic primitives.</li>
<li>Number theoretic designs.</li>
<li>Special-purpose designs.</li>
</ol>
<p>Let's look at each of these in turn.</p>
<h2>Designs based on cryptographic primitives.</h2>
<p>These are generators that use things like block ciphers, stream ciphers, or hashing functions for the generator. There are some NIST and FIPS standardized designs:</p>
<ul>
<li><a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf">NIST SP 800-90A rev. 1</a> (PDF): CTR_DRBG (a block cipher, such as AES in CTR mode), HMAC_DRBG (hash-based message authentication code), and Hash_DRBG (based on cryptographically secure hashing functions such as SHA-256).</li>
<li>ANSI X9.31 Appendix A.2.4: This is based on AES, and obsoletes ANSI X9.17 Appendix C, which is based on 3DES. It requires a high-precision clock to initially seed the generator. It was eventually obsoleted by ANSI X9.62-1998 Annex A.4.</li>
<li><a href="http://webstore.ansi.org/RecordDetail.aspx?sku=ANSI+X9.62%3a2005">ANSI X9.62-2005 Annex D</a>: This standard is defines an HMAC_DRBG, similar to NIST SP 800-90A, using an HMAC as the cryptographic primitive. It obsoletes ANSI X9.62-1998 Annex A.4, and also requires a high-precision clock to initially seed the generator.</li>
</ul>
<p>It's important that these designs are backtracking resistant, meaning that if you know the current state of the RNG, you cannot construct all previous states of the generator. The above standards are backtracking resistant.</p>
<h2>Number theoretic designs</h2>
<p>There are really only two current designs, that are based on either the factoring problem or the discrete logarithm problem:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Blum_Blum_Shub">Blum-Blum-Shub</a>: This is generator based on the fact that it is <a href="https://en.wikipedia.org/wiki/Integer_factorization#Difficulty_and_complexity">difficult to compute the prime factors</a> of very large composites (on the order of 200 or more digits in length). Due to the size of the prime factors, this is a <em>very slow</em> algorithm, and not practical generally.</li>
<li><a href="https://en.wikipedia.org/wiki/Blum-Micali_algorithm">Blum-Micali</a>: This is a generator based on the <a href="https://www.khanacademy.org/computing/computer-science/cryptography/modern-crypt/v/discrete-logarithm-problem">discrete logarithm problem</a>, when given two known integers "b" and "g", it is difficult to find "k" where "b^k = g". Like Blum-Blum-Shub, this generator is also <em>very slow</em>, and not practical generally.</li>
</ul>
<h2>Special-purpose designs</h2>
<p>Thankfully, there are a lot of special purpose designs designed by cryptographers that are either stream ciphers that can be trivially ported to a CSPRNG, or deliberately designed CSPRNGs:</p>
<ul>
<li><a href="https://www.schneier.com/academic/yarrow/">Yarrow</a>: Created by cryptographer Bruce Schneier (deprecated by Fortuna)</li>
<li><a href="https://www.schneier.com/academic/fortuna/">Fortuna</a>: Also created by Bruce Schneier, and obsoletes Yarrow.</li>
<li><a href="http://burtleburtle.net/bob/rand/isaacafa.html">ISAAC</a>: Designed to address the problems in RC4.</li>
<li><a href="https://cr.yp.to/chacha.html">ChaCha20</a>: Designed by cryptographer Daniel Bernstein, our crypto Lord and Savior.</li>
<li><a href="https://en.wikipedia.org/wiki/HC-256">HC-256</a>: The 256-bit alternative to HC-128, which is part of the eSTREAM portfolio.</li>
<li><a href="https://en.wikipedia.org/wiki/ESTREAM#eSTREAM_portfolio">eSTREAM portfolio</a>: (7 algorithms- 3 hardware, 4 software)</li>
<li><a href="http://www.thesalmons.org/john/random123/releases/latest/docs/index.html">Random123 suite</a>: Contains four highly parallelizable counter-based algorithms, only two of which are cryptographically secure.</li>
</ul>
<h2>The solution for slot machines</h2>
<p>So now what? Slot machine manufacturers should be using cryptographically secure algorithms in their machines, full stop. To be cryptographically secure, the generator:</p>
<ul>
<li>Must past the next-bit test (you cannot predict the next bit any better than 50% probability).</li>
<li>Must withstand a state compromise (you cannot reconstruct past states of the generator based on the current state).</li>
</ul>
<p>If those two properties are met in the generator, then the output will be indistinguishable from true random noise, and the generator will be unbiased, not allowing an adversary, such as someone with a cellphone monitoring the slot machine, to get the upperhand on the slot machine, and prematurely cash out.</p>
<p>However, the question should then be raised- "How do you properly seed the CSPRNG, so it starts in an unpredictable state, before release?" Easy, you have two options here:</p>
<ul>
<li>Seed the CSPRNG with a hardware true RNG (HWRNG), such as a USB HWRNG, or....</li>
<li>Build the machine such that it collects environmental noise as entropy</li>
</ul>
<p>The first point is much easier to achieve than the second. Slot machines likely don't have a lot of interrupts built into the system-on-a-chip (SoC). So aside from a microphone, video camera, or antenna recording external events, you're going to be hard-pressed to get any sort of high-quality entropy into the generator. USB TRNGs are available all over the web, and cheap. When the firmware is ready to be deployed, read 512-bits out of the USB generator, hash it with SHA-256, and save the resulting hash on disk as an "entropy file".</p>
<p>Then all that is left is when the slot machine boots up and shuts down:</p>
<ul>
<li>On startup, read the "entropy file" saved from the previous shutdown, to seed the CSPRNG.</li>
<li>On shutdown, save 256-bits of data out of the generator to disk as an "entropy file".</li>
</ul>
<p>This is how most operating systems have solved the problem with their built-in CSPRNGs. Provided that the very first "entropy file" was initially seeded with a USB true HWRNG, the state of every slot machine will be always be different, and will always be unpredictable. Also, 256-bits is more than sufficient to make sure the initial state of the generator is unpredictable; <a href="https://pthree.org/2016/06/19/the-physics-of-brute-force/">physics proves it</a>.</p>
<p>Of course, the SoC could have a HWRNG onboard, but then you run the risk of hardware failure, and the generator becoming predictable. This risk doesn't exist with software-based CSPRNGs, so provided you can always save the state of the generator on disk at shutdown, and read it on startup, you'll always have an unpredictable slot machine.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2017-02-17T12:22:53-0600">2017 02 17</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a><br/><a href="https://pthree.org/category/security/" rel="category tag">Security</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2017/02/17/electronic-slot-machines-and-pseudorandom-number-generators/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2017/02/17/electronic-slot-machines-and-pseudorandom-number-generators/" title="Permalink to Electronic Slot Machines and Pseudorandom Number Generators">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4834" title="Shortlink to Electronic Slot Machines and Pseudorandom Number Generators">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4766" class="hentry p8 post publish author-admin category-security y2016 m11 d30 h02 alt">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/11/30/adblockers-arent-part-of-the-problem-people-are/" title="Permalink to Adblockers Aren&#039;t Part Of The Problem- People Are" rel="bookmark">Adblockers Aren't Part Of The Problem- People Are</a></h2>
						<div class="entry-content">
<p>Troy Hunt, a well-respected security researcher, and public speaker, <a href="https://www.troyhunt.com/ad-blockers-are-part-of-the-problem/">wrote a blog post recently about how adblockers are part of the bad experience of the web</a>. His article is about a sponsorship banner he posts at the top of his site, just below the header. It's not flashy, intrusive, loud, obnoxious, or a security or privacy concern. He gets paid better for the sponsorship strip than he does for ads, and the strip is themed with the rest of his site. It's out of the way of the site content, and scrolls with the page. In my opinion, it's in perfectly good taste. See for yourself:</p>
<p><img src="https://pthree.org/wp-content/uploads/2016/11/troyhunt.png" alt="Screenshot of Troy Hunt's homepage, showing the sponsorship strip just below the header." class="aligncenter size-full"/></p>
<p>Troy was surprised to find out, however, that his sponsorship strip is not showing when AdBlock Plus or UBlock Origin ad blockers are installed and enabled in the browser. He is understandably upset, as he is avoiding everything that piss off the standard web user when it comes to ads. He reached out to ABP about whitelisting his strip, and they've agreed it's hardly violating web user experience. However, someone added it to the EasyList filters, which means any ad blocker outside of ABP, will filter the sponsorship strip.</p>
<p>So, here's my question- are users wrong in filtering it?</p>
<p>Let's look at the state of web ads over the past couple decades. First, there was the ad popup, where the web page you were visiting would popup an ad right in front of the page. Sometimes they were difficult to close, and sometimes closing one would open a different one. Some pages would open dozens of popups, some fullscreen. It wasn't long before browsers across the board blocked popups by default, baked right into the browser.</p>
<p><img src="https://pthree.org/wp-content/uploads/2016/11/pop-ups.jpg" alt="Screenshot showing a Windows XP desktop littered with ad popups." class="aligncenter size-full"/></p>
<p>After popups were unanimously blocked across every browser, advertisers turned to ad banners. These were just as obnoxious as the popups, even if you didn't have to close a window. The flashed, blinked, falsely promised free trips and gadgets, and even sometimes auto-played videos. They were rarely relevant to the site content, but web page owners were promised a revenue per click, regardless. So, the more you could fit on the page, the more likely someone would click on an ad, and you would get paid. Web page owners placed these obnoxious ads above the header, below the header, in the sidebars, in the middle of the pages breaking up paragraphs in posts, in the footers. In some cases, the screen real estate dedicated to ads was more than the actual content on the site.</p>
<p><img src="https://pthree.org/wp-content/uploads/2016/11/annoying-banner-ads.jpg" alt="An image showing a collection of annoying banner ads." class="aligncenter size-full"/></p>
<p>Some HTML5 and CSS3 solutions now include overlays, that have to be manually closed or escaped, in order to continue parsing the site content. Unfortunately, ad blockers don't do a great job at blocking these. While they're great at finding and filtering out elements, blocking CSS overlay popups seems to be too difficult, as they are prevalent on the web, much to the chagrin of many ad block users.</p>
<p><img src="https://pthree.org/wp-content/uploads/2016/11/digital-marketer-exit-overlay.png" alt="Screenshot showing a CSS overlay on a web page showing an ad." class="aligncenter size-full wp-image-4773" srcset="https://pthree.org/wp-content/uploads/2016/11/digital-marketer-exit-overlay.png 650w, https://pthree.org/wp-content/uploads/2016/11/digital-marketer-exit-overlay-300x264.png 300w" sizes="(max-width: 650px) 100vw, 650px" /></p>
<p>Ad blockers then became a mainstay. Web users were pissed off due to Flash crashing the browser (most ads were Flash-based), slowing down their connection to download additional content (at the time, most were on dial-up on slow DSL), and in general just getting in the way. It got so bad, that DoubleClick's "privacy chief" <a href="http://www.geek.com/news/doubleclick-attacks-ad-blocking-559226/">wrote a rant about ad blockers</a>, and how they were unethical, and ad blocker users were stealing revenue.</p>
<p>As web page analytics started becoming a thing, more and more website owners wanted to know how traffic was arriving at their site, so they could further increase that traffic, and in addition, increase ad revenue. Already, page counters like StatCounter existed, to help site owners understand partially how traffic was hitting them, where they came from, what time, what search engine they used, how long they stayed, etc. Well, advertisers started putting these analytics in their ads. So, not only did the website owner know who you were, the advertising company did too. And worse, while the website owner might not be selling that tracking data, the advertiser very likely is.</p>
<p>The advertiser also became a data broker.</p>
<p>But here's the tricky part- ad blocking was no longer enough. Now website owners were adding JavaScript trackers to their HTML. They're not visible on the page, so the ad blocker isn't hiding an element. It's not enough to block ads any longer. Privacy advocates begin warning about "browser fingerprinting" based on the specific details in your browser that can uniquely identify you. Those unique bits are then tracked with these tracking scripts, and set to advertisers and data brokers, which change many hands along the way. The EFF created a project to help users understand how unique they appeared on the web through the Panopticlick Project.</p>
<p><a href="https://pthree.org/wp-content/uploads/2016/11/fingerprint.png"><img src="https://pthree.org/wp-content/uploads/2016/11/fingerprint-260x300.png" alt="Screenshot of my browser results after testing at https://panopticlick.eff.org." width="260" height="300" class="aligncenter size-medium wp-image-4770" srcset="https://pthree.org/wp-content/uploads/2016/11/fingerprint-260x300.png 260w, https://pthree.org/wp-content/uploads/2016/11/fingerprint-768x887.png 768w, https://pthree.org/wp-content/uploads/2016/11/fingerprint.png 800w" sizes="(max-width: 260px) 100vw, 260px" /></a></p>
<p>As a result, other browser extensions dedicated to blocking trackers started showing up. Things like Ghostery, Disconnect, Privacy Badger, and more. Even extensions that completely disable JavaScript and Flash became popular. Popular enough, that browsers implemented a "click-to-play" setting, where flash and other plugin content was blocked by default, and you would need to click the element to display it. It's not uncommon now to visit a web page where you tracking blocker will block a dozen or more trackers.</p>
<p><img src="https://pthree.org/wp-content/uploads/2016/11/tracker-information.png" alt="Screenshot of Ghostery blocking 20 trackers on a web page." class="aligncenter size-full"/></p>
<p>I wish I could stop here, but alas, many advertisers have made a turn for the ugly. Now, web ads are the most common way to get malware installed on your computer. Known as "malvertising", it is more common at infecting your computer than shady porn sites. Even more worrisome, is that this trend is shifting away from standard desktops to mobile. Your phone is now more valuable than your desktop, and advertisers know it. Never mind shady apps that compromise your device, ads in legitimate "safe" apps are compromising devices as well.</p>
<p><a href="https://pthree.org/wp-content/uploads/2016/11/malvertising.png"><img src="https://pthree.org/wp-content/uploads/2016/11/malvertising-1024x569.png" alt="Infographic showing the threat of malvertising on mobile in 2014." width="1024" height="569" class="aligncenter size-large wp-image-4775" srcset="https://pthree.org/wp-content/uploads/2016/11/malvertising-1024x569.png 1024w, https://pthree.org/wp-content/uploads/2016/11/malvertising-300x167.png 300w, https://pthree.org/wp-content/uploads/2016/11/malvertising-768x427.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p>So, to summarize, the history of ads has been:</p>
<ol>
<li>Annoying popups.</li>
<li>Annoying banners.</li>
<li>Annoying CSS overlays.</li>
<li>Transparent trackers.</li>
<li>Malvertising.</li>
</ol>
<p>So, to Troy Hunt, here's my question: Given the awful history of advertisements on the web, are you honestly surprised that users don't trust a sponsorship strip?</p>
<p>Consider the following analogy: Suppose I brought a bunch of monkeys to your home, and they trashed the place. Smashed dishes, tore up furniture, destroyed computers and televisions, ruined floors, broke windows, and generally just destroyed anything and everything in sight. Then, after cleaning the place up, not only do I bring the monkeys back, but this time, they have digital devices (cameras, microphones, etc.) that report back to me about what your house looks like, where you live, what you're doing in response to the destruction. Again, you kick them out, clean up the place, and I return with everything as before, with some of them carrying a contagious disease that can get you and your family sick. I mean, honestly, one visit of these monkeys is enough, but they've made three visits, each worse than before.</p>
<p>Now, you show up at my doorstep, with a well-trained, leashed, groomed, clean, tame monkey, and I'm supposed to trust that it isn't anything like the past monkeys I've experienced before? As tame as it may be, call me rude, but I'm not trusting of monkeys right now. I've installed all sorts of alarm and monitoring systems, to warn me when monkeys are nearby, and nuke them with lasers. I've had too many bad experiences with monkeys in the past, to trust anyone bringing a new monkey to the premises.</p>
<p>So, you can see, it's not ad blockers that are the problem. It's the people behind the advertising firms and it's the people not trusting the Internet. The advertising c-level executives are trying to find ways to get their ad in front of your eyes, and are using any sort of shady means necessary to do it. The average web user is trying to find ways to have a pleasant experience on the web, without getting tracked, infected with malware, shouted at by a video, while still being able to consume the content.</p>
<p>People arguably don't trust ads. The people in the advertising firms have ruined that trust. You may have a clean privacy-aware non-intrusive sponsorship strip, but you can't blame <em>people</em> for not trusting it. We've just had too long of a history of bad ad experiences. So, while reaching out to the ad blocker developers to whitelist the sponsorship strip is a good first step, ultimately, if people don't trust it, and want to block, you can't blame them. Instead, continue focusing on what makes you successful, for your revenue from the ad blockers- blogging, speaking, developing, engaging. Your content, who you are, how you handle yourself is your most valuable ad.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-11-30T08:06:44-0600">2016 11 30</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/security/" rel="category tag">Security</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/11/30/adblockers-arent-part-of-the-problem-people-are/#comments">Comments (1)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/11/30/adblockers-arent-part-of-the-problem-people-are/" title="Permalink to Adblockers Aren't Part Of The Problem- People Are">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4766" title="Shortlink to Adblockers Aren't Part Of The Problem- People Are">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4749" class="hentry p9 post publish author-admin category-cryptology y2016 m07 d29 h01">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/07/29/breaking-hmac/" title="Permalink to Breaking HMAC" rel="bookmark">Breaking HMAC</a></h2>
						<div class="entry-content">
<p>Okay. The title might be click bait, just a little, but after you finish reading this post, I think you'll be a bit more careful picking your HMAC keys. After learning this, I know I will be. However, <strong><em>HMAC is not broken</em></strong>. It just has an interesting ... property that's worth knowing about.</p>
<p>First off, let's remind ourselves what HMAC is. HMAC, or Hashed Message Authentication Codes, are the ability to authenticate a cryptographic message. This is done through an asymmetric key agreement protocol, such as Diffie-Hellman, where two parties securely share symmetric keys. These keys are used to encrypt messages as well as authenticate data. HMAC tags prevent chosen plaintext attacks, where the attacker can insert malicious data into the payload (send $1,000,000 to my account), and HMAC tags prevent adaptive chosen ciphertext attacks where the attacker can send encrypted data to the server, and learn what is being protected (is "password" in the payload?).</p>
<p>Authenticated messages are absolutely essential to modern cryptographic software. If you're writing cryptographic software, and you're not authenticating your ciphertext, you're doing it wrong. It doesn't matter if the data is at rest or in motion. Authenticate your ciphertext. This is where HMAC fits in.</p>
<p>So, best practice, when not using native AEAD ciphers, such as AES-GCM, or ChaCha20-Poly1305, is to encrypt the plaintext then authenticate it with HMAC, and prepend or append the digest (called a "MAC tag" or just "tag") to the ciphertext.</p>
<p>Something like this pseudocode:</p>
<pre>ciphertext = AES-256-CTR(nonce, plaintext, key1)
tag = HMAC-SHA-512(ciphertext, key2)
ciphertext = tag || ciphertext</pre>
<p>Then we ship off the newly bundled ciphertext and MAC tag. When it arrives at our destination, the recipient can verify if the ciphertext is what it should be, before decrypting it, by verifying the MAC tag, which is the whole point:</p>
<pre>tag1 = ciphertext[:64]
data = ciphertext[64:]
tag2 = HMAC-SHA-512(ciphertext, key2)
hmac_check = 0

for char1, char2 in zip(tag1, tag2):
    hmac_check |= ord(char1) ^ ord(char2)

if hmac_check == 0:
    plaintext = AES-256-CTR(nonce, data, key1)
else:
    return False
return True
</pre>
<p>Notice that we're doing constant time comparison of the shipped tag and the calculated tag. Last thing we want is to introduce a timing attack by doing "if tag1 != tag2". However, after the constant time comparison, if tag1 and tag2 match, we can decrypt the data, and retrieve the plaintext.</p>
<p>So, now you have the background on HMAC, let's look at some examples with Python, and see where HMAC breaks. After all, that's the click bait title, no?</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> <span class="kw1">import</span> <span class="kw3">os</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw1">import</span> <span class="kw3">hmac</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw1">import</span> hashlib<br />
<span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">16</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'d5a94f051b1e6ff67065b6f4c3a60130'</span></div></td></tr></tbody></table></div>
<p>In this example, the default HMAC is HMAC-MD5. HMAC-MD5 is still considered cryptographically secure, even though vanilla MD5 is broken. Regardless, it'll suffice for this example, and we'll look at SHA-1 and SHA-2 also.</p>
<p>In RFC 2104, where HMAC is standardized, <a href="https://tools.ietf.org/html/rfc2104#section-3">section 3</a> has this odd little tidbit (emphasis mine):</p>
<blockquote><p>The key for HMAC can be of any length (<strong>keys longer than B bytes are<br />
first hashed using H</strong>).  However, less than L bytes is strongly<br />
discouraged as it would decrease the security strength of the<br />
function.  Keys longer than L bytes are acceptable but the extra<br />
length would not significantly increase the function strength. (A<br />
longer key may be advisable if the randomness of the key is<br />
considered weak.)</p></blockquote>
<p>The "B bytes" length is the block size of the underlying HMAC operations. If the key is shorter than this block size, zeroes need to be appended to the key. If the key is longer than this block size, then it is hashed with the HMAC cryptographic hash.</p>
<p>The block size is 64 bytes for the following HMACs:</p>
<ul>
<li>HMAC-MD5</li>
<li>HMAC-RIPEMD128</li>
<li>HMAC-RIPEMD160</li>
<li>HMAC-SHA1</li>
</ul>
<p>In other words, HMAC wants to key to be exactly one block in length. If it's longer, it's hashed with zeros appended to fit exactly into one block.</p>
<p>Can we test this?</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span> <span class="co1"># longer than one block</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'f887a4146e94ed47405c97931798885d'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="kw3">md5</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span>msg<span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'f887a4146e94ed47405c97931798885d'</span></div></td></tr></tbody></table></div>
<p>We have a collision. In other words:</p>
<pre>For:
* 'H' a cryptographic hash
* 'k' a private key
* 'm' a message
* 'B' an HMAC block size

    HMAC(k, m) == HMAC(H(k), m)

for all 'k', where len(k) > B</pre>
<p>Does this work with HMAC-SHA1?</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha1</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'1070312944223b36928382d7a53ca54f7204ad4a'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="me1">sha1</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha1</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'1070312944223b36928382d7a53ca54f7204ad4a'</span></div></td></tr></tbody></table></div>
<p>How about all the SHA-2 functions? (SHA-224, SHA-256, SHA-384, & SHA-512)?</p>
<p>SHA-224:</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha224</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'9ea8c3f667e55e6e9c5d63c5dd1b569ca69e2cc69f5e3fa3f87e94ba'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="me1">sha224</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha224</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><br />
<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'9ea8c3f667e55e6e9c5d63c5dd1b569ca69e2cc69f5e3fa3f87e94ba'</span></div></td></tr></tbody></table></div>
<p>SHA-256:</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha256</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'2aa02e678fcfe7ecaa1475efb70fe284fe91cc81e5a9c543433b70f5f5112c4b'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="me1">sha256</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha256</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><br />
<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'2aa02e678fcfe7ecaa1475efb70fe284fe91cc81e5a9c543433b70f5f5112c4b'</span></div></td></tr></tbody></table></div>
<p>SHA-384:</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha384</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'0941e6502233a72d01beeec729eaa7db2469f8ce96339cd5b3b2c9a4684501e6a7025fac<br />
6c9c20a511c48df76b453ec3'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="me1">sha384</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha384</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><br />
<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'5380905fb89fee68836be076ebfccff600e3b89c6554840fe61fed01b049d6a6a77423d2<br />
f5f4be1afb9d1c6f63b8b7fc'</span></div></td></tr></tbody></table></div>
<p>SHA-512:</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">65</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha512</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'36063bdc2d02ce8ea4b01b40ba040094c640959e0cc5716f7a75f119cbc348aa93d555f8<br />
6bfcdaee5dad4ec2e5d53ed4362f9df0720ec0e1272288d49a912f7e'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="me1">sha512</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha512</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><br />
<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'8bfe675e3ca35a8680243d3747b5d3ce7ded1731e1a307cf5d1b00ae9243395ab94039f2<br />
2585b417d7cbdf09f3d8dcf39c85ce147ff77c901c1a21f8de981b6a'</span></div></td></tr></tbody></table></div>
<p>So it appears that the block size is indeed 64 bytes for MD5, SHA-1, SHA-224, and SHA-256, but for SHA-384 and SHA-512, it doesn't appear to be working. That is because the block size has changed to 128 bytes for these two functions. So, if our key is 129 bytes, we should be able to replicate collisions:</p>
<p>SHA-384 with a 129-byte key:</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">129</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha384</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'bda2b586637e3bd73a27919601d7d5a1c1743f1f9f5cb72a0aa874f832046f4bc396ff8e<br />
307f9318dc404c4b432ca491'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="me1">sha384</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha384</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><br />
<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'bda2b586637e3bd73a27919601d7d5a1c1743f1f9f5cb72a0aa874f832046f4bc396ff8e<br />
307f9318dc404c4b432ca491'</span></div></td></tr></tbody></table></div>
<p>SHA-512 with a 129-byte key:</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br /></div></td><td><div class="python codecolorer"><span class="sy0">&gt;&gt;&gt;</span> key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">129</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> msg <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">256</span><span class="br0">&#41;</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>key<span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha512</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'d0153f8bb6a549539abbcff8ee5ac7592c48c082bbbb7b3cc95dcb2166f162e5c59bb7bb<br />
3316e65d1481bd8697e8d3bc91deb46ad44845b972c57766f45c54bd'</span><br />
<span class="sy0">&gt;&gt;&gt;</span> <span class="kw3">hmac</span>.<span class="kw3">new</span><span class="br0">&#40;</span>hashlib.<span class="me1">sha512</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span>.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> msg<span class="sy0">,</span> hashlib.<span class="me1">sha512</span><span class="br0">&#41;</span>.<span class="me1">hexdigest</span><br />
<span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="st0">'d0153f8bb6a549539abbcff8ee5ac7592c48c082bbbb7b3cc95dcb2166f162e5c59bb7bb<br />
3316e65d1481bd8697e8d3bc91deb46ad44845b972c57766f45c54bd'</span></div></td></tr></tbody></table></div>
<p>This isn't a poor Python implementation of HMAC. Try it in your favorite language, and you should be able to replicate the collisions. This is a "bug" in HMAC. If the key is longer than the block size, it's hashed with the HMAC cryptographic hash, then appended with zeros to fit the single block.</p>
<p>So what does this mean? It means that when choosing your HMAC keys, you should stay within one block size of bytes- 64 bytes or less for MD5, RIPEMD-128/160, SHA-1, SHA-224, SHA-256, and 128-bytes or less for SHA-384 and SHA-512. If you do this, you'll be fine.</p>
<p>Then again, you should probably be using NaCl or libsodium rather than piecing these cryptographic primitives manually yourself. These sorts of pitfalls are already handled for you.</p>
<p>This post is the result of a Twitter discussion between Scott Arciszewski, myself, and some others.</p>
<blockquote class="twitter-tweet" data-width="500">
<p lang="en" dir="ltr"><a href="https://twitter.com/adamcaudill">@adamcaudill</a> <a href="https://twitter.com/ErrataRob">@ErrataRob</a> Aside from the fact that HMAC-MD5(m, k) and HMAC-MD5(m, MD5(k)) collide, when len(k) &gt; 16</p>
<p>&mdash; Scott Arciszewski (@CiPHPerCoder) <a href="https://twitter.com/CiPHPerCoder/status/758800017553448960">July 28, 2016</a></p></blockquote>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p><strong>UPDATE:</strong> I'm not aware of any actual security implications where this is a problem that two distinct inputs produce the same HMAC digest. Ultimately, what are you trying to get out of HMAC? It's used as an authentication and integrity mechanism. So what if a long key, and the hash of that key produce the same HMAC digest? At 64 bytes, or 512-bits, the amount of work required at guessing the right key is anything but practical. Still, this is interesting.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-07-29T07:56:46-0600">2016 07 29</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/07/29/breaking-hmac/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/07/29/breaking-hmac/" title="Permalink to Breaking HMAC">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4749" title="Shortlink to Breaking HMAC">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4717" class="hentry p10 post publish author-admin category-cryptology category-passwords y2016 m06 d29 h04 alt">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/06/29/further-investigation-into-scrypt-and-argon2-password-hashing/" title="Permalink to Further Investigation Into Scrypt and Argon2 Password Hashing" rel="bookmark">Further Investigation Into Scrypt and Argon2 Password Hashing</a></h2>
						<div class="entry-content">
<h2>Introduction</h2>
<p><a href="https://pthree.org/2016/06/28/lets-talk-password-hashing/">In my previous post</a>, I didn't pay close attention to the memory requirements of Argon2 when running my benchmarks. Instead, I just ran them until I got tired of waiting around. Further, I really didn't do justice to either scrypt nor Argon2 when showing the parallelization factor. So, as a result, I did <em>a lot</em> more benchmarks on both, so you could more clearly see how the cost affects the time calculating the password hash, and how parallelization can affect that time.</p>
<h2>More scrypt Benchmarks and Clarification</h2>
<p>So, let's run some more scrypt benchmarks, and take a closer look at what's going on. Recall that the cost parameters for scrypt are:</p>
<ul>
<li>N: The CPU and RAM cost</li>
<li>r: The mixing loop memory block size</li>
<li>p: The product factor</li>
</ul>
<p>The recommended cost factors from the Colin Percival are:</p>
<ul>
<li>N: 16384 (2<sup>14</sup>)</li>
<li>r: 8</li>
<li>p: 1</li>
</ul>
<p>To calculate the amount of memory used, we use the following equation:</p>
<pre>Memory in bytes = (N * r * 128) + (r * p * 128)</pre>
<p>So, according to the recommendation:</p>
<pre>(2<sup>14</sup> * 8 * 128) + (8 * 1 * 128) = 16,778,240 bytes</pre>
<p>Or, about 16 megabytes. <a href="http://blog.ircmaxell.com/2014/03/why-i-dont-recommend-scrypt.html">According to Anthony Ferrara</a>, you should be using at least 16 MiB with scrypt. At 4 Mib or less, it is demonstrably weaker than bcrypt. So, when you're looking at the images below, you'll notice that the first memory result is in red text, to show that 8 MiB is the weak point with those cost factors, and the 16 MiB  is green, showing cost factors from there up are preferred. As a result, anything between 8 MiB and 16 MiB is default black, in that you should probably be cautious using these cost factors. While you might be demonstrably stronger than bcrypt with these work loads, you're not at the developer's recommendation of 16 MiB.</p>
<p>So, knowing that, let's look at the results. Notice that when we increase our product factor, our execution time increases by that factor. Despite urban legend, this isn't a parallelization constant (well, it is, but it's not breaking up the problem into smaller ones- it's multiplying it). The idea is that once you've reached a reasonable memory cost, you can increase the execution time by creating more mixing loops with the same cost on each loop. So, instead of one mixing loop costing you 16 MiB, you can have two mixing loops costing you 16 MiB. We didn't divide the problem, we multiplied it. As such, our execution time will double from one mixing loop to two mixing loops.</p>
<p>This seems strange, and indeed it is, but you should start with "p=1" at the memory cost you can afford, then increase the proudct factor if you can donate more time to the execution. In other words, the product factor is designed for hardware limited scenarios. In general, you'll want to look at your execution time, and let the memory come in as an after thought (provided it's at or more than 16 MiB).</p>
<p>As in the last post, I have highlighted the green cells with interactive password sessions targeting half-of-a-second and red cells with symmetric key derivation targeting a full five seconds.</p>
<p><center><br />
<img src="https://pthree.org/wp-content/uploads/2016/06/scrypt_1.png" alt="Scrypt table showing memory block sizes of 1 and 2 with product multipliers of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/scrypt_2.png" alt="Scrypt table showing memory block sizes of 4 and 6 with product multipliers of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/scrypt_3.png" alt="Scrypt table showing memory block sizes of 8 and 10 with product multipliers of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/scrypt_4.png" alt="Scrypt table showing memory block sizes of 12 and 14 with product multipliers of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/scrypt_5.png" alt="Scrypt table showing memory block sizes of 16 and 18 with product multipliers of 1, 2, and 4." /><br />
</center></p>
<h2>More Argon2 Benchmarks</h2>
<p>When showing Argon2 in my last post, I did a poor job demonstrating several additional cost factors, and I didn't make it clear how the parallelization played a roll when keeping the same cost factor. As a result, I ran additional benchmarks to make it more clear exactly how CPU and RAM play with each other in your work load.</p>
<p>As a reminder, the cost parameters for Argon2 are as follows:</p>
<ul>
<li>n: The number of iterations on the CPU.</li>
<li>m: The memory work load.</li>
<li>p: The parallelization factor.</li>
</ul>
<p>Unlike scrypt, where a single factor manipulates both the CPU and RAM cost, Argon2 separates them out. You deliberately have two knobs to play with- "n" for the CPU and "m" for the RAM. But, one affects the other. If you are targeting a specific execution time, and you increase your memory factor by two, then your CPU work factor will be decreased by half. On the reverse, if you increase your CPU work factor by two, then your memory work factor will be decreased by half. So, affecting one work factor affects the other.</p>
<p>Why is this important? Well, let's consider setting your memory requirement into the gigabyte range. At 1 GiB, for an interactive login session of .5 seconds, you would need at least both cores working on the hash, and you would only get a single iteration. In other words, your work is entirely memory dependent without any significant CPU cost. Maybe you're trying to thwart FPGAs or ASICs with the large memory requirement. However, is it possible that an adversary has 1 GiB of on-die cache? If so, because you're entirely memory-dependent, and no CPU work load, you've been able to cater to the adversary, without significant hardware cost.</p>
<p>On the reverse, you could get CPU heavy with 2048 iterations to hit your .5 seconds execution time, but then you would only be using 256 KiB of memory. You're likely not defeating the FPGAs and ASICs that Argon2 is designed for, as you're almost entirely processor-driven.</p>
<p>So, what to do? It would probably be a good idea to target a balance- require a significant amount of memory, even if it doesn't break the on-die cache barrier, while also requiring a significant amount of processor work. Sticking with Colin's recommendation of 16 MiB (2<sup>14</sup>) of memory and 32 iterations on 4 cores for interactive logins is probably a good balance. Then again, it will all depend on your hardware, what you can expect in customer execution time, load, and other variables.</p>
<p>However, here are additional timings of Argon2, just like with scrypt, so you can see how parallelization affects identical costs. Again, green cells are targeting .5 seconds for interactive logins, and red cells are targeting 5 seconds for symmetric key derivation.</p>
<p><center><br />
<img src="https://pthree.org/wp-content/uploads/2016/06/argon2_1.png" alt="Argon2 table showing memory requirements of 256 KiB and 512 KiB with parallel factors of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/argon2_2.png" alt="Argon2 table showing memory requirements of 1 MiB and 2 MiB with parallel factors of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/argon2_3.png" alt="Argon2 table showing memory requirements of 4 MiB and 8 MiB with parallel factors of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/argon2_4.png" alt="Argon2 table showing memory requirements of 16 MiB and 32 MiB with parallel factors of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/argon2_5.png" alt="Argon2 table showing memory requirements of 64 MiB and 128 MiB with parallel factors of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/argon2_6.png" alt="Argon2 table showing memory requirements of 256 MiB and 512 MiB with parallel factors of 1, 2, and 4." /><br />
<br />
<img src="https://pthree.org/wp-content/uploads/2016/06/argon2_7.png" alt="Argon2 table showing memory requirements of 1 GiB and 2 GiB with parallel factors of 1, 2, and 4." /><br />
</center></p>
<h2>Conclusion</h2>
<p>Hopefully, this will help you make a more educated decision about your cost factors when deploying either scrypt or Argon2 as your password hash or symmetric key derivation function. Remember, that you have a few things to consider when picking your costs:</p>
<ul>
<li>Make it expensive for both CPU and memory.</li>
<li>Target a realistic execution time for the situation.</li>
<li>Guarantee that you can always meet these goals after deployment.</li>
</ul>
<p>Also, don't deploy Argon2 into production quite yet. Let is bake for a while. If it still stands secure in 2020, then you're probably good to go. Otherwise, deploy scrypt, or the other functions mentioned in the prior post.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-06-29T22:59:11-0600">2016 06 29</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a><br/><a href="https://pthree.org/category/passwords/" rel="category tag">Passwords</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/06/29/further-investigation-into-scrypt-and-argon2-password-hashing/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/06/29/further-investigation-into-scrypt-and-argon2-password-hashing/" title="Permalink to Further Investigation Into Scrypt and Argon2 Password Hashing">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4717" title="Shortlink to Further Investigation Into Scrypt and Argon2 Password Hashing">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4699" class="hentry p11 post publish author-admin category-cryptology category-passwords y2016 m06 d27 h06">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/06/28/lets-talk-password-hashing/" title="Permalink to Let&#039;s Talk Password Hashing" rel="bookmark">Let's Talk Password Hashing</a></h2>
						<div class="entry-content">
<h2>TL;DR</h2>
<p>In order of preference, hash passwords with:</p>
<ol>
<li>scrypt</li>
<li>bcrypt</li>
<li>Argon2</li>
<li>sha512crypt</li>
<li>sha256crypt</li>
<li>PBKDF2</li>
</ol>
<p>Do not hash passwords with:</p>
<ol>
<li>MD5</li>
<li>md5crypt</li>
<li>UNIX crypt(3)</li>
<li>SHA-1/2/3</li>
<li>Skein</li>
<li>BLAKE2</li>
<li>Any general purpose hashing function.</li>
<li>Any encryption algorithm.</li>
<li>Your own design.</li>
<li>Plaintext</li>
</ol>
<h2>Introduction</h2>
<p>Something that comes up frequently in crypto circles, aside from the constant database leaks of accounts and passwords, are hashing passwords. Because of the phrase "hashing passwords", developers who may not know better will think of using generic one-way fixed-length collision-resistant cryptographic hashing functions, such as MD5, SHA-1, SHA-256, or SHA-512, without giving a second thought to the problem. Of course, using these functions is problematic, because they are <em>fast</em>. Turns out, we don't like fast hashing functions, because password crackers <em>do</em> like fast hashing functions. The faster they can do, the sooner they can recover the password.</p>
<h2>The Problem</h2>
<p>So, instead of using MD5, SHA-1, SHA-256, SHA-512, etc., the cryptographic community got together, and introduced specifically designed password hashing functions, where a custom work factor is included as a cost. Separately, key derivation functions were also designed for creating cryptographic keys, where a custom work factor was also included as a cost here. So, with password-based key derivation functions and specifically designed password hashing functions, we came up with some algorithms that you should be using instead.</p>
<h2>The Solution</h2>
<p>The most popular algorithms of this type would include, in my personal order of preference from most preferred to least preferred:</p>
<ol>
<li>scrypt (KDF)</li>
<li>bcrypt</li>
<li>Argon2 (KDF)</li>
<li>sha512crypt</li>
<li>sha256crypt</li>
<li>PBKDF2 (KDF)</li>
</ol>
<p>The only difference between a KDF and a password hashing function, is that the digest length can be arbitrary with KDFs, whereas password hashing functions will have a fixed length output.</p>
<p>For the longest time, I was not a fan of scrypt as a password hashing function. I think I've changed my mind. Even though scrypt is sensitive to the parameters picked, and it suffers from a time-memory trade-off (TMTO), it's still considered secure, provided you pick sane defaults. I also place bcrypt over Argon2, because Argon2 was just recently announced as the Password Hashing Contest winner. As with all cryptographic primitives, we need to time to analyze, attack, and pick apart the design. If after about 5 years, it still stands strong and secure, then it can be recommended as a solution for production. In the meantime, it's something certainly worth testing, but maybe not for production code. Finally, I prefer sha512crypt and sha256crypt over PBKDF2, mostly because they are included with every GNU/Linux distribution by default, they are based on the strong SHA-2 hashing function, which has had years and mountains of analysis, and unlike PBKDF2, you know exactly which hashing function is used. PBKDF2 could be using SHA-2 functions by default, or it could be using SHA-1. You'll need to check your library to be sure.</p>
<h2>Different Strokes for Different Folks</h2>
<p>Regardless, all of the above functions include cost parameters for manipulating how long it takes to calculate the hash from a password. It's less important exactly what the cost parameters are, and more important that you are targeting an appropriate time to work through the cost, and create the hash. This means you need to identify your threat model and your adversary.</p>
<p>The two common scenarios you'll find yourself in, are:</p>
<ol>
<li>Password storage</li>
<li>Encryption keys</li>
</ol>
<p>For password storage, your threat model is likely the password database getting leaked to the Internet, and password crackers around the world working on the hashes in the database to recover passwords. Thus, your adversary is malware, Anonymous, and password crackers. For encryption keys, your threat model is likely private encrypted keys getting compromised and side-channel attacks. Thus, your adversary is also malware, poor key exchanges, or untrusted networks. Knowing your threat model and your adversary changes how you approach the problem.</p>
<p>With password storage, you may be dealing with an interactive login, such as through a website. As such, you probably want the password hashing time to be quick, while still maintaining a work factor that would discourage large distributed attacks on your leaked database. Possibly, .5 seconds. This means if the database was leaked, the password cracker could do no more than 2 passwords per second. When you compare this to the millions of hashes per second a GPU could execute on Windows NTLM passwords, 2 passwords per second is extremely attractive. For encryption keys, you probably don't need to worry about interactive sessions, so taking 5 seconds to create the key from the password probably isn't a bad thing. So key crackers spending 5 seconds per guess trying to recover the password that created the encrypted private key is really nice.</p>
<h2>bcrypt, sha256crypt, sha512crypt, & PBKDF2</h2>
<p>So, knowing the work factors, what would it look like for the above algorithms? Below, I look at bcrypt, sha256crypt, sha512crypt, and PBKDF2 with their appropriate cost. I've highlighted the row green where a possible work factor could mean spending 0.5 seconds on hashing the password, and a red row where a possible work factor could mean spending 5 full seconds on creating a password-based encryption key.</p>
<p><center><img src="https://pthree.org/wp-content/uploads/2016/06/bcrypt.png" alt="Spreadsheet table showing various cost factors for bcrypt, sha256crypt, sha512crypt, and PBKDF2." /></center></p>
<p>Notice that for bcrypt, this means for password hashing, a factor of 13 would provide a cost of about 0.5s to hash the password, where a factor of 16 would get me close to my cost of about 5 seconds for creating a password-based key. For sha256crypt, sha512crypt, and PBKDF2, that seems to be about 640,000 and 5,120,000 iterations respectively.</p>
<h2>scrypt</h2>
<p>When we move to scrypt, things get a touch more difficult. With bcrypt, sha256crypt, sha512crypt, and PBKDF2, our cost is entirely a CPU load factor. Unfortunately, while possibly problematic for fast GPU clusters, they still fall victim to algorithm-specific FPGAs and ASICs. In order to combat this, we need to also include a memory cost, seeing as though memory on these devices is expensive. However, having both a CPU and a RAM cost, means multiple knobs to tweak. So, Colin Percival, the designer of scrypt, decided to bundle both the CPU and the RAM cost three factors: "N", "r", and "p". The resulting memory usage is calculated as follows:</p>
<pre>Memory in bytes = (N * r * 128) + (r * p * 128)</pre>
<p>There are a lot of suggestions out there about what's "best practice". It seems that you should at least have the following cost factors with scrypt, which provides a 16 MiB memory load:</p>
<ul>
<li>N: 16384 (2<sup>14</sup>)</li>
<li>r: 8</li>
<li>p: 1</li>
</ul>
<p>While you should be aware of the sensitivity of scrypt parameters, provided you are working with at least 16 MiB of RAM, you aren't any worse than other password hashing functions or KDFs. So, in the following tables, I increase the memory cost needed for the hash by tweaking the three parameters.</p>
<p><strong>Update 2016-06-29:</strong> I've clarified these parameters in a follow-up post, which you should most definitely read at <a href="https://pthree.org/2016/06/29/further-investigation-into-scrypt-and-argon2-password-hashing/">https://pthree.org/2016/06/29/further-investigation-into-scrypt-and-argon2-password-hashing/</a>.</p>
<p><center><img src="https://pthree.org/wp-content/uploads/2016/06/scrypt-1.png" alt="First table showing the cost factors of scrypt." hspace="15" vspace="15" /> <img src="https://pthree.org/wp-content/uploads/2016/06/scrypt-2.png" alt="Second table showing different cost factors of scrypt." hspace="15" vspace="15" /> <img src="https://pthree.org/wp-content/uploads/2016/06/scrypt-3.png" alt="Third table showing yet different cost factors of scrypt." hspace="15" vspace="15" /></center></p>
<p>Because I only have access to a single-socket-quad core CPU in this testing machine, I wanted to limit my "p" cost to 1, 2, and 4, which is displayed in those tables. Further, I'm limited on RAM, and don't want to disrupt the rest of the applications and services running on the box, so I've limited my "r" cost to 4, 8, and 16 multiplied by 128 bytes (512 bytes, 1024 bytes, and 2048 bytes).</p>
<p>Interestingly enough, Colin Precival recommends 16 MiB (N=16384 (2<sup>14</sup>), r=8, p=1) for interactive logins and 16 MiB (N=131072 (2<sup>17</sup>), r=1, p=1) for symmetric key derivation. If I were targeting my 0.5s password hashing time, then I could improve that to 256 MiB (N=65536 (2<sup>16</sup>), r=8, p=1), or 2 GiB (N=2097152 (2<sup>21</sup>), r=8, p=1), if targeting just slightly more than 5 seconds for symmetric key derivation.</p>
<h2>Argon2</h2>
<p>Finally, we look at Argon2. Argon2 comes in two flavors- Argon2d and Argon2i; the first of which is data (d)ependent and the latter is data (i)independent. The former is supposed to be resistant against GPU cracking while the latter is supposed to be resistant against side-channel attacks. In other words, Argon2d would be suitable for password hashing, while Argon2i would be suitable for encryption key derivation. However, regardless of Argon2d or Argon2i, the cost parameters will perform the same, so we'll treat them as a single unit here.</p>
<p>Like scrypt, Argon2 has both a CPU and a RAM cost. However, both are handled separately. The CPU cost is handled through standard iterations, like with bcrypt or PBKDF2, and the RAM cost is handled through specifically ballooning the memory. When I started playing with it, I found that just manipulating the iterations felt very much like bcrypt, but I could affect the overall time it took to calculate the hash by just manipulating the memory also. When combining the two, I found that iterations affected the cost more than the RAM, but both had significant say in the calculation time, as you can see in the tables below. As with scrypt, it also has a parallelization cost, defining the number of threads you want working on the problem:</p>
<p><center></center><center><img src="https://pthree.org/wp-content/uploads/2016/06/argon2-1.png" alt="First table showing the cost factors of Argon2." /> <img src="https://pthree.org/wp-content/uploads/2016/06/argon2-2.png" alt="Second table showing different cost factors of Argon2." /> <img src="https://pthree.org/wp-content/uploads/2016/06/argon2-3.png" alt="Third table showing yet different cost factors of Argon2." /></center></p>
<p>Note the RAM cost between 256 KiB and 16 MiB, in addition to the number of iterations and the processor count cost. As we balloon our RAM, we can bring our iteration cost down. As we require more threads to work on the hash, we can bring that iteration count down even further. Regardless, we are trying to target 0.5s for an interactive password login, and a full 5 seconds for password-based encryption key derivation.</p>
<h2>Conclusion</h2>
<p>So, what's the point? When hashing passwords, whether to store them on disk, or to create encryption keys, you should be using password-based cryptographic primitives that were specifically designed for this problem. You should not be using general purpose hashing functions of any type, because of their speed. Further, you should not be rolling out your own "key-stretching" algorithm, such as recursively hashing your password digest and additional output.</p>
<p>Just keep in mind- if the algorithm was specifically designed to handle passwords, and the cost is sufficient for your needs, threat model, and adversary, then you're doing just fine. Really, you can't go wrong with any of them. Just avoid any algorithm not specifically designed around passwords. The goal is <em>security through obesity</em>.</p>
<p>Best practice? In order of preference, use:</p>
<ol>
<li>scrypt</li>
<li>bcrypt</li>
<li>Argon2</li>
<li>sha512crypt</li>
<li>sha256crypt</li>
<li>PBKDF2</li>
</ol>
<p>Do not use:</p>
<ol>
<li>MD5</li>
<li>md5crypt</li>
<li>UNIX crypt(3)</li>
<li>SHA-1/2/3</li>
<li>Skein</li>
<li>BLAKE2</li>
<li>Any general purpose hashing function.</li>
<li>Any encryption algorithm.</li>
<li>Your own design.</li>
<li>Plaintext</li>
</ol>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-06-28T00:43:48-0600">2016 06 28</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a><br/><a href="https://pthree.org/category/passwords/" rel="category tag">Passwords</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/06/28/lets-talk-password-hashing/#comments">Comments (4)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/06/28/lets-talk-password-hashing/" title="Permalink to Let's Talk Password Hashing">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4699" title="Shortlink to Let's Talk Password Hashing">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4675" class="hentry p12 post publish author-admin category-cryptology y2016 m06 d19 h07 alt">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/06/19/the-physics-of-brute-force/" title="Permalink to The Physics of Brute Force" rel="bookmark">The Physics of Brute Force</a></h2>
						<div class="entry-content">
<h2>Introduction</h2>
<p>Recently, MyDataAngel <a href="https://www.kickstarter.com/projects/datagatekeeper/datagatekeeper-the-first-impenetrable-anti-hacking/">launched a Kickstarter project</a> to sell a proprietary encryption algorithm and software with 512-bit and 768-bit symmetric keys. The motivation was that 128-bit and 256-bit symmetric keys just isn't strong enough, especially when AES and OpenSSL are older than your car (a common criticism they would mention in their vlogs). Back in 2009, Bruce Schneier blogged about <a href="https://www.schneier.com/blog/archives/2009/09/the_doghouse_cr.html">Crypteto having a 49,152-bit symmetric key</a>. As such, their crypto is 100% stronger, because their key is 100% bigger (than 4096-bit keys?). <a href="http://www.meganet.com/">Meganet</a>, which apparently still exists, has a 1 million-bit symmetric key!</p>
<p>It's hard to take these encryption products seriously, when there are no published papers on existing primitives, no security or cryptography experts on your team, and you're selling products with ridiculous key lengths (to be fair, 512-bit and 768-bit symmetric keys aren't really that ridiculous). Nevermind that your proprietary encryption algorithm is not peer-reviewed nor freely available to the public. Anyone can create a symmetric encryption algorithm that they themselves cannot break. The trick is releasing your algorithm for peer review, letting existing cryptography experts analyze the design, and still coming out on top with a strong algorithm (it wouldn't hurt if you analyzed existing algorithms and published papers yourself).</p>
<p>So with that, I want to talk a bit about the length of symmetric keys, and what it takes to brute force them. Bruce Schneier addressed this in his "Applied Cryptography" book through the laws of thermodynamics. Unfortunately, he got some of the constants wrong. Although the conclusion is basically the same, I'm going to give you the same argument, with updated constants, and we'll see if we come to the same conclusion.</p>
<h2>Counting Bits</h2>
<p>Suppose you want to see how many bits you can flip in one day by counting in binary every second. Of course, when you start counting, you would start with "0", and your first second would flip your first bit to "1". Your second second would flip your second bit to "1" while also flipping your first bit back to "0". Your third second would flip the first bit back to "1", and so forth. Here is a simple GIF (pronounced with a hard "G") counting from 0 to 127, flipping bits each second.</p>
<p><center><img src="https://pthree.org/wp-content/uploads/2016/06/seconds.gif" alt="Bit counter animation counting from 0 to 127." /></center></p>
<p>By the end of a 24-hour period, I would have hit 86,400 seconds, which is represented as a 17-bit number. In other words, every 24 hours, flipping 1 bit per second, I can flip every combination of bits in a 16-bit number.</p>
<p><center><img src="https://pthree.org/wp-content/uploads/2016/06/86400.png" alt="Binary representation of 86400" /></center></p>
<p>By the end of a single year, we end up with a 25-bit number, which means flipping a single bit every second can flip every combination of 24-bits every year.</p>
<p><center><img src="https://pthree.org/wp-content/uploads/2016/06/year.png" alt="Binary representation of 31536000" /></center></p>
<p>So, the obvious question is then this- what is the largest combination of bits that I can flip through to exhaustion? More importantly, how many computers would I need to do this work (what is this going to cost)?</p>
<h2>Some Basic Physics</h2>
<p>One of the consequences of the <a href="https://en.wikipedia.org/wiki/Second_law_of_thermodynamics">second law of thermodynamics</a>, is that it requires energy to do a certain amount of work. This could be anything from lifting a box over your head, to walking, to even getting out of bed in the morning. This also includes computers and hard drives. When the computer wishes to store data on disk, energy is needed to do that work. This is expressed with the equation:</p>
<pre>Energy = kT</pre>
<p>Where "k" is Boltzmann's constant of 1.38064852×10<sup>−16</sup> ergs per Kelvin, and "T" is the temperature of the system. I'm going to use <a href="https://en.wikipedia.org/wiki/Erg">ergs</a> as our unit, as we are speaking about work, and an "erg" is a unit of energy. Of course, a "<a href="https://en.wikipedia.org/wiki/Kelvin">Kelvin</a>" is a unit of temperature, where 0 Kelvin is defined as a system devoid of energy; also known as "absolute zero".</p>
<p>It would make the most sense to get our computer as absolutely cool as possible to maximize our output while also minimizing our energy requirements. Current background radiation in outer space is about <a href="https://en.wikipedia.org/wiki/Cosmic_microwave_background">2.72548 Kelvin</a>. To run a computer cooler than that would require a heat pump, which means adding additional energy to the system than what is needed for our computation. So, we'll run this ideal computer at 2.72548 Kelvin.</p>
<p>As a result, this means that to flip a single bit with our ideal computer, it requires:</p>
<pre>Energy = (1.38064852×10<sup>−16</sup> ergs per Kelvin) * (2.72548 Kelvin) = 3.762929928*10<sup>-16</sup> ergs</pre>
<h2>Some Energy Sources</h2>
<h3>The Sun</h3>
<p>Now that we know our energy requirement, <a href="https://en.wikipedia.org/wiki/Orders_of_magnitude_%28energy%29">let's start looking at some energy sources</a>. The total energy output from our star is about 1.2*10<sup>34</sup> Joules per year. Because one Joule is the same as 1*10<sup>7</sup> ergs, then the total annual energy output of the Sun is about 1.2*10<sup>41</sup> ergs. So, doing some basic math:</p>
<pre>Bits flipped = (1.2*10<sup>41</sup> ergs) / (3.762929928*10<sup>-16</sup> ergs per bit) = 3.189004374*10<sup>56</sup> bits</pre>
<p>3.189004374*10<sup>56</sup> bits means I can flip every combination of bits in a 2<sup>187</sup>-bit number, if I could harness 100% of the solar energy output from the sun each year. Unfortunately, our Sun is a weak star.</p>
<h3>A Supernova</h3>
<p>A <a href="https://en.wikipedia.org/wiki/Supernova">supernova</a> is calculated to release something around 10<sup>44</sup> Joules or 10<sup>51</sup> ergs of energy. Doing that math:</p>
<pre>Bits flipped = (10<sup>51</sup> ergs) / (3.762929928*10<sup>-16</sup> ergs per bit) = 2.657503608*10<sup>66</sup> bits</pre>
<p>2.657503608*10<sup>66</sup> bits is approximately 2<sup>220</sup>-bits. Imagine flipping every bit in a 220-bit number in an orgy of computation.</p>
<h3>A Hypernova</h3>
<p>A <a href="https://en.wikipedia.org/wiki/Hypernova">hypernova</a> is calculated to release something around 10<sup>46</sup> Joules or 10<sup>53</sup> ergs of energy. Doing that math:</p>
<pre>Bits flipped = (10<sup>53</sup> ergs) / (3.762929928*10<sup>-16</sup> ergs per bit) = 2.657503608*10<sup>68</sup> bits</pre>
<p>2.657503608*10<sup>68</sup> bits is approximately 2<sup>227</sup>-bits. This is a computation orgy <a href="https://en.wikipedia.org/wiki/Up_to_eleven">turned up to 11</a>.</p>
<p>Of course, in all 3 cases, I would have to harness 100% of that energy into my ideal computer, to flip every combination of these bits. Never mind finding transportation to get me to that hypernova, the time taken in that travel (how many millions of light years away is it?), and the cost of the equipment to harness the released energy.</p>
<h2>Bitcoin Mining</h2>
<p>As a comparative study, Bitcoin mining has almost surpassed <a href="https://blockchain.info/charts/hash-rate?showDataPoints=false&timespan=&show_header=true&daysAverageString=7&scale=0&address=">2 quintillion SHA-256 hashes <em>per second</em></a>. If you don't think this is significant, it is. That's processing all of a 60-bit number (all 2<sup>60</sup> bits) every second, or an 85-bit number (all 2<sup>85</sup> bits) every year. This is hard evidence, right now, of a large scale 256-bit brute force computing project, and it's barely flipping all the bits in an 85-bit number every year. The hash rate would have to double (4 quintillion SHA-256 hashes every second) to surpass flipping all the bits in an 86-bit number every year.</p>
<p>Further, we do not have any evidence of any clustered supercomputing project that comes close to that processing rate. It can be argued that the rate of Bitcoin mining is the upper limits of what any group of well-funded organizations could afford (I think it's fair to argue several well-funded organizations are likely Bitcoin mining). To produce a valid conspiracy theory to counteract that claim, you would need to show evidence of organizations that have their own semiconductor chip manufacturing, that has outpaced ARM, AMD, Intel and every other chip maker on the market, by several orders of magnitude.</p>
<p>Regardless, we showed the amount of energy needed anyway to flip every bit in a 256-bit number, and the laws of thermodynamics strongly imply that it's just not physically possible.</p>
<h2>Asymmetric Cryptography</h2>
<p>Things change when dealing with asymmetric cryptography. Now, instead of creating a secret 256-bit number, you're using mathematics, such as prime number factorization or elliptic curve equations. This changes things drammatically when dealing with key lengths, because even though we assume some mathematical problems are easy to calculate, but hard to reverse, we need to deal with exceptionally large numbers to give us the security margins necessary to prove that hardness.</p>
<p>As such, it because less of a concern about energy, and more a concern about time. Of course, key length is important up to a point. We just showed with the second law of thermodynamics, that brute forcing your way from 0 to 2<sup>256</sup> is just physically impossible. However, finding the prime factors of that 256-bit number is a much easier task, does not require as much energy, and can be done by only calculating no more than half of the square root amount of numbers (in this case, 2<sup>127</sup>, assuming we're only testing prime numbers).</p>
<p>As such, we need to deal with prime factors that are difficult to find. It turns out that it's not enough to just have a 512-bit private key to prevent the Bad Guys from finding your prime factors. This is largely because there are efficient algorithms for calculating and testing prime numbers. So, it must also be expensive to calculate and find those primes. Currently, <a href="https://www.keylength.com/en/compare/">best practice seems to be generating 2 1024-bit prime factors to produce a 2048-bit private RSA key</a>.</p>
<p><center><img src="https://pthree.org/wp-content/uploads/2016/06/length.png" alt="Table showing recommendations of key length from various authorities" /></center></p>
<h2>Fixed-length Collision-resistant Hashing</h2>
<p>Fixed-length collision-resistant hashing puts a different twist on brute force searching. The largest problem comes from the <a href="https://en.wikipedia.org/wiki/Birthday_attack">Birthday Attack</a>. This states that if you have approximately the square root of 2 times 365 people in the room (about 23 people), the chances that <em>any two people</em> share the same birthday is 50%. Notice that this comes from any two people in the room. This means that you haven't singled out 1 person, and the odds that the other 22 people in the room have that same birthday is 50%. This isn't a pre-collision search. This is a blind search. You ask the first person what their birthday is, and compare it with the other 22 people in the room. Then you ask the second person what their birthday is, and compare it with the remaining 21 people in the room. And so on and so forth. After working through all 23 people comparing everyone's birthday to everyone else's birthday, the odds you found a match between two random people is 50%.</p>
<p>Why is this important? Suppose you are processing data with SHA-1 (160-bit output). You only need to calculate 2<sup>80</sup> SHA-1 hashes before your odds of finding a duplicate hash out of the currently calculated hashes reaches 50%. As we just learned with Bitcoin, this is practical within one year with a large orchestrated effort. Turns out, SHA-1 is weaker that that (we only need to calculate 2<sup>64</sup> hashes for a 50% probability), which is why the cryptographic community has been pushing so hard to get everyone and everything away from SHA-1.</p>
<p>Now you may understand why 384-bit and 512-bit (and more up to 1024-bit) cryptographically secure fixed-length collision-resistant hashing functions exist. Due to the Birthday Attack, we can make mince meat of our work.</p>
<h2>Conclusion</h2>
<p>As clearly demonstrated, the second law of thermodynamics provides a clear upper bound on what can be found with brute force searches. Of course, brute force searches are the least effective way to find the private keys you're looking for, and indeed, there are more efficient ways to get to the data. However, if you provide a proprietary encryption algorithm with a closed-source implementation, that uses ridiculously long private keys, then it seems clear that you don't understand the physics behind brute force. If you can't grasp the simple concept of these upper bounds, why would I want to trust you and your product in other areas of security and data confidentiality?</p>
<p>Quantum computing does give us some far more efficient algorithms that classical computing cannot achieve, but even then, 256-bits still remains outside of the practical realm of mythical quantum computing when brute force searching.</p>
<p>As I've stated many times before- trust the math.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-06-19T13:34:14-0600">2016 06 19</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/06/19/the-physics-of-brute-force/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/06/19/the-physics-of-brute-force/" title="Permalink to The Physics of Brute Force">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4675" title="Shortlink to The Physics of Brute Force">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4667" class="hentry p13 post publish author-admin category-cryptology category-general category-linux category-scripting category-security y2016 m06 d12 h09">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/06/12/webcam-random-number-generation/" title="Permalink to Webcam Random Number Generation" rel="bookmark">Webcam Random Number Generation</a></h2>
						<div class="entry-content">
<p>A couple weeks ago, I purchased a lava lamp for $5 at a thrift store. It was in brand spanking new condition, and worked like a charm. The only thing going through my head at the time? I can't wait to point my webcam at it, and start generating some random numbers! Okay, well that, and mood lighting for the wife.</p>
<blockquote class="twitter-tweet" data-width="500">
<p lang="en" dir="ltr">I purchased a lava lamp over the weekend. Inefficient and slow random numbers, here we come! <a href="https://t.co/umE0VdSP8l">pic.twitter.com/umE0VdSP8l</a></p>
<p>&mdash; Aaron Toponce (@AaronToponce) <a href="https://twitter.com/AaronToponce/status/737698589657337858">May 31, 2016</a></p></blockquote>
<p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>Anyway, <a href="https://github.com/atoponce/scripts/blob/master/webcam_seed.py">I wrote a quickie Python script</a> which will capture a frame from the webcam, hash it with a keyed BLAKE2, and output the result to a FIFO file to be processed. The BLAKE2 digest of the frame also becomes the key for the next BLAKE2 instance, making this script very CBC-like in execution (the first function is keyed from /dev/urandom, and each digest keys the next iteration).</p>
<div class="codecolorer-container python twitlight" style="overflow:auto;white-space:nowrap;width:800px;"><table cellspacing="0" cellpadding="0"><tbody><tr><td class="line-numbers"><div>1<br />2<br />3<br />4<br />5<br />6<br />7<br />8<br />9<br />10<br />11<br />12<br />13<br />14<br />15<br />16<br />17<br />18<br />19<br />20<br />21<br />22<br />23<br />24<br />25<br />26<br />27<br />28<br />29<br />30<br />31<br />32<br />33<br />34<br />35<br />36<br />37<br />38<br />39<br />40<br />41<br />42<br />43<br />44<br />45<br />46<br />47<br />48<br />49<br />50<br />51<br />52<br />53<br />54<br />55<br /></div></td><td><div class="python codecolorer"><span class="co1">#!/usr/bin/python</span><br />
<br />
<span class="co1"># Create true random seeds (near as we can tell) with your webcam.</span><br />
<span class="co1">#</span><br />
<span class="co1"># This script will use your webcam pointed at a source of entropy, keyed with</span><br />
<span class="co1"># random data from the OS CSPRNG. You could point the camera at:</span><br />
<span class="co1">#</span><br />
<span class="co1"># &nbsp; * Lava lamps</span><br />
<span class="co1"># &nbsp; * Plasma globes</span><br />
<span class="co1"># &nbsp; * Double pendulums</span><br />
<span class="co1"># &nbsp; * Rayleigh-Benard convection</span><br />
<span class="co1"># &nbsp; * Brownian motion</span><br />
<span class="co1">#</span><br />
<span class="co1"># Performance is ~ 2 KiB/s.</span><br />
<span class="co1"># Requires pyblake2: https://pypi.python.org/pypi/pyblake2</span><br />
<span class="co1">#</span><br />
<span class="co1"># Released to the public domain.</span><br />
<br />
<span class="kw1">import</span> <span class="kw3">os</span><br />
<span class="kw1">import</span> cv2<br />
<span class="kw1">import</span> pyblake2<br />
<br />
cap <span class="sy0">=</span> cv2.<span class="me1">VideoCapture</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><br />
webcamfile <span class="sy0">=</span> <span class="st0">'/tmp/webcamfile.fifo'</span><br />
key <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">urandom</span><span class="br0">&#40;</span><span class="nu0">64</span><span class="br0">&#41;</span><br />
<br />
<span class="kw1">try</span>:<br />
&nbsp; &nbsp; <span class="kw3">os</span>.<span class="me1">mkfifo</span><span class="br0">&#40;</span>webcamfile<span class="br0">&#41;</span><br />
<span class="kw1">except</span> <span class="kw2">OSError</span><span class="sy0">,</span> e:<br />
&nbsp; &nbsp; <span class="kw1">print</span> <span class="st0">&quot;Cannot create FIFO: {0}&quot;</span>.<span class="me1">format</span><span class="br0">&#40;</span>e<span class="br0">&#41;</span><br />
<span class="kw1">else</span>:<br />
&nbsp; &nbsp; fifo <span class="sy0">=</span> <span class="kw2">open</span><span class="br0">&#40;</span>webcamfile<span class="sy0">,</span> <span class="st0">'w+'</span><span class="br0">&#41;</span><br />
<br />
<span class="kw1">while</span> <span class="kw2">True</span>:<br />
&nbsp; &nbsp; ret<span class="sy0">,</span> frame <span class="sy0">=</span> cap.<span class="me1">read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; <span class="kw1">if</span> <span class="kw1">not</span> ret:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">break</span><br />
<br />
&nbsp; &nbsp; b2sum <span class="sy0">=</span> pyblake2.<span class="me1">blake2b</span><span class="br0">&#40;</span>key<span class="br0">&#41;</span><br />
&nbsp; &nbsp; b2sum.<span class="me1">update</span><span class="br0">&#40;</span>frame<span class="br0">&#41;</span><br />
&nbsp; &nbsp; digest <span class="sy0">=</span> b2sum.<span class="me1">digest</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
&nbsp; &nbsp; key <span class="sy0">=</span> digest<br />
<br />
&nbsp; &nbsp; fifo.<span class="me1">write</span><span class="br0">&#40;</span>digest<span class="br0">&#41;</span><br />
&nbsp; &nbsp; fifo.<span class="me1">flush</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<br />
&nbsp; &nbsp; cv2.<span class="me1">imshow</span><span class="br0">&#40;</span><span class="st0">'webcamlamp'</span><span class="sy0">,</span> frame<span class="br0">&#41;</span><br />
&nbsp; &nbsp; k <span class="sy0">=</span> cv2.<span class="me1">waitKey</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> &amp; <span class="nu0">0xFF</span><br />
&nbsp; &nbsp; <span class="kw1">if</span> k <span class="sy0">==</span> <span class="nu0">27</span>:<br />
&nbsp; &nbsp; &nbsp; &nbsp; <span class="kw1">break</span><br />
<br />
fifo.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
<span class="kw3">os</span>.<span class="me1">remove</span><span class="br0">&#40;</span>webcamfile<span class="br0">&#41;</span><br />
cap.<span class="me1">release</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />
cv2.<span class="me1">destroyAllWindows</span><span class="br0">&#40;</span><span class="br0">&#41;</span></div></td></tr></tbody></table></div>
<p>As you'll notice in the code, you should point your webcam at a source of either chaotic randomness, like a lava lamp, or quantum randomness, like a plasma globe. Because the frame is whitened with a keyed BLAKE2, it could be considered as a true random number generator, or you could use it as a seed for a cryptographically secure pseudorandom number generator, such as those shipped with modern operating systems. If you do use this as a TRNG, realize that it's slow- it only operates at about 2 KiBps.</p>
<p>Here is a screenshot of the webcam itself looking at a USB desk plasma globe, that you can purchase of ThinkGeek for $10.</p>
<p><center><img src="https://pthree.org/wp-content/uploads/2016/06/plasma.png" alt="Webcam view of a plasma globe in operation." /></center></p>
<p>The data is sent to a FIFO in /tmp/. If you don't do anything with the data, and let the buffer fill, the script will hang, until you read data out of the FIFO. As such, you could do something like this to reseed your CSPRNG (of course, it's not increasing the entropy estimate, just reseeding the generator):</p>
<pre>$ &lt; /tmp/webcamrng.fifo &gt; /dev/random</pre>
<p>Lava lamps and plasma globes are only the beginning. Anything quantum or chaotic that can be visually observed also works. Things like:</p>
<ul>
<li>Double pendulums</li>
<li>Brownian motion</li>
<li>Rayleigh-Benard convection</li>
<li>CCD noise from the webcam itself</li>
<li>A bouncing ball on a sinusoidal vibrating table</li>
</ul>
<p>So, there you have it. Plasma globes and lava lamps providing sufficiently random data via a webcam, either to be used as a secret seed, or as a TRNG itself. Any other systems that could be used to point a webcam at, or suggestions for improvement in the Python code, let me know in the comments.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-06-12T15:13:28-0600">2016 06 12</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a><br/><a href="https://pthree.org/category/general/" rel="category tag">General</a><br/><a href="https://pthree.org/category/linux/" rel="category tag">Linux</a><br/><a href="https://pthree.org/category/scripting/" rel="category tag">Scripting</a><br/><a href="https://pthree.org/category/security/" rel="category tag">Security</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/06/12/webcam-random-number-generation/#respond">Comments (0)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/06/12/webcam-random-number-generation/" title="Permalink to Webcam Random Number Generation">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4667" title="Shortlink to Webcam Random Number Generation">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4663" class="hentry p14 post publish author-admin category-cryptology category-linux category-security y2016 m05 d24 h02 alt">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/05/24/cpu-jitter-entropy-for-the-linux-kernel/" title="Permalink to CPU Jitter Entropy for the Linux Kernel" rel="bookmark">CPU Jitter Entropy for the Linux Kernel</a></h2>
						<div class="entry-content">
<p>Normally, I keep a sharp eye on all things cryptographic-related with the Linux kernel. However, in 4.2, I missed something fantastic: <a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=bb5530e4082446aac3a3d69780cd4dbfa4520013">jitterentropy_rng.ko</a>. This is a Linux kernel module that measures the jitter of the high resolution timing available in modern CPUs, and uses this jitter as a source of true randomness. In fact, using the CPU timer as a source of true randomness isn't anything new. If you're read my blog for some time, you're <a href="https://pthree.org/2012/09/14/haveged-a-true-random-number-generator/">already</a> <a href="https://pthree.org/2012/09/18/haveged-continued/">familiar</a> with haveged(8). This daemon also collects CPU jitter and feeds the collected data into the kernel's random number generator.</p>
<p>The main site is at <a href="http://www.chronox.de/jent.html">http://www.chronox.de/jent.html</a> and the <a href="http://www.chronox.de/jent/doc/CPU-Jitter-NPTRNG.pdf">PDF paper describing the CPU jitter</a> entropy can be found on the site.</p>
<p>So why the blog post about jitterentropy_rng.ko? Because now that we have something in the mainline kernel, we get a few benefits:</p>
<ol>
<li>More eyes are looking at the code, and can adjust, analize, and refine the entropy gathering process, making sure it's not to aggressive nor conservative in its approach.</li>
<li>We now have something that can collect entropy much earlier in the boot sequence, even before the random number generator has been initialized. This means we can have a properly seeded CSPRNG when the CSPRNG is initialized.</li>
<li>While not available now, we could have a kernelspace daemon collecting entropy and feeding it to the CSPRNG without the need for extra software.</li>
<li>This isn't just for servers, desktops, and VMs, but anything that runs the Linux kernel on a modern CPU, including Android phones, embedded devices, and SoC.</li>
<li>While haveged(8) has been a good solution for a long time, it has been heavily criticized, and it seems development on it has stalled. Here is another software solution for true randomness without the need of potentially dangerous 3rd party USB random number generators.</li>
<li>You don't need Intel's RDRAND. Any modern CPU with a high resolution timer will work. AMD, SPARC, ARM, MIPS, PA-RISC, Power, etc.</li>
</ol>
<p>As mentioned in the list, unfortunately, loading the kernel doesn't automatically top-off the entropy estimate of the internal state of the CSPRNG (/proc/sys/kernel/random/entropy_avail). As such, /dev/random will still block when the estimate is low or exhausted. So you'll still need to run a userspace daemon to prevent this behavior. The author has also shipped a clean, light userspace daemon that just reads the data provided by the jitterentropy_rng.ko kernel module, and uses ioctl(2) to increase the estimate. The jitterentropy_rng.ko module provides about 10 KBps of random data.</p>
<p>Again, this isn't anything that something like haveged(8) doesn't already have access to. However, by taking advantage of a loaded kernel module, we can ensure that randomness is being collected before the CSPRNG is initialized. So, when CSPRNG initialization happens, we can ensure that it is properly seeded on first boot, minimizing the likelihood that exact keys will be created on distinct systems. This is something haveged(8) can't provide, as it runs entirely in userspace.</p>
<p>Unfortunately, jitterentropy-rngd(8) isn't available in the Debian repositories yet, so you'll need to download the compressed tarball from the author's website, manually compile and install yourself. However, he does ship a systemd(8) service file, which makes it easy to get the daemon up and running on boot with minimal effort.</p>
<p>I've had the jitterentropy_rng.ko module installed with the jitterentropy-rngd(8) userspace daemon running all day today, without haveged(8), and needless to say, I'm pleased. It keeps the CSPRNG entropy estimate sufficiently topped off for software that still relies on /dev/random (please stop doing this developers- start using /dev/urandom please) and provides adequate performance. Near as I can tell, there is not a character device created when loading the kernel module, so you can't access the unbiased data before feeding it into the CSPRNG. As such, I don't have a way to test its randomness quality. Supposedly, there is a way to access this via debugfs, but I haven't found it.</p>
<p>Anyway, I would recommend using jitterentropy_rng.ko and jitterentropy-rngd(8) over haveged(8) as the source for your randomness.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-05-24T20:14:23-0600">2016 05 24</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/cryptology/" rel="category tag">Cryptology</a><br/><a href="https://pthree.org/category/linux/" rel="category tag">Linux</a><br/><a href="https://pthree.org/category/security/" rel="category tag">Security</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/05/24/cpu-jitter-entropy-for-the-linux-kernel/#comments">Comments (3)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/05/24/cpu-jitter-entropy-for-the-linux-kernel/" title="Permalink to CPU Jitter Entropy for the Linux Kernel">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4663" title="Shortlink to CPU Jitter Entropy for the Linux Kernel">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="post-4658" class="hentry p15 post publish author-admin category-debian category-general category-linux category-scripting y2016 m05 d20 h03">
				<div class="post-container">
					<div class="post-content">
						<h2 class="entry-title"><a href="https://pthree.org/2016/05/20/weechat-relay-with-lets-encrypt-certificates/" title="Permalink to Weechat Relay With Let&#039;s Encrypt Certificates" rel="bookmark">Weechat Relay With Let's Encrypt Certificates</a></h2>
						<div class="entry-content">
<p>I've been on IRC for a long time. Not as long as some, granted, but likely longer than most. I've had my hand in a number of IRC clients, mostly terminal-based. Yup, I was (shortly) using the ircII client, then (also shortly) BitchX. Then I found irssi, and stuck with that for a <em>long</em> time. Search irssi help topics on this blog, and you'll see just how long. Then, after getting hired at XMission in January 2012, I switched full-time to WeeChat. I haven't looked back. This IRC client is amazing.</p>
<p>One of the outstanding features of WeeChat is the relay, effectively turning your IRC client into a bouncer. This feature isn't unique- it's in irssi also. However, <a href="http://bugs.irssi.org/index.php?do=details&task_id=645">the irssi proxy does not support SSL</a> (2009). The WeeChat relay does. And with Let's Encrypt certificates freely available, this is the perfect opportunity to use TLS with a trusted certificate.</p>
<p>This post assumes that you are running WeeChat on a box that you can control the firewall to. In my case, I run WeeChat on an externally available SSH server behind tmux. With Let's Encrypt certificates, you will need to provide a FQDN for your Common Name (CN). This is all part of the standard certificate verification procedure. I purchased a domain that points to the IP of that server, and you will need to do the same.</p>
<p>The official Let's Encrypt "certbot" package used for creating Let's Encrypt certificates is already available in Debian unstable. A simple "apt install certbot" will get that up and running for you. Once installed, you will need to create your certificate.</p>
<pre>$ certbot certonly --standalone -d weechat.example.com -m aaron.toponce@gmail.com</pre>
<p>Per Let's Encrypt documentation, you needs ports 80 and 443 open to the world when creating and renewing your certificate. The execution will create four files:</p>
<pre># ls -l /etc/letsencrypt/
total 24
drwx------ 3 root root 4096 May 19 12:36 accounts/
drwx------ 3 root root 4096 May 19 12:39 archive/
drwxr-xr-x 2 root root 4096 May 19 12:39 csr/
drwx------ 2 root root 4096 May 19 12:39 keys/
drwx------ 3 root root 4096 May 19 12:39 live/
drwxr-xr-x 2 root root 4096 May 19 12:39 renewal/
# ls -l /etc/letsencrypt/live/weechat.example.com/
total 0
lrwxrwxrwx 1 root root 43 May 19 12:39 cert.pem -> ../../archive/weechat.example.com/cert1.pem
lrwxrwxrwx 1 root root 44 May 19 12:39 chain.pem -> ../../archive/weechat.example.com/chain1.pem
lrwxrwxrwx 1 root root 48 May 19 12:39 fullchain.pem -> ../../archive/weechat.example.com/fullchain1.pem
lrwxrwxrwx 1 root root 46 May 19 12:39 privkey.pem -> ../../archive/weechat.example.com/privkey1.pem
</pre>
<p>The "cert.pem" file is your public certificate for your CN. The "chain.pem" file in the Let's Encrypt intermediate certificate. The "fullchain.pem" file is the "cert.pem" and "chain.pem" files combined. Of course, the "privkey.pem" file is your private key. For the WeeChat relay, it needs the "privkey.pem" and "fullchain.pem" files combined into a single file.</p>
<p>Because the necessary directories under "/etc/letsencrypt/" are accessible only by the root user, you will need root access to copy the certificates out and make them available to WeeChat, which hopefully isn't running as root. Also, Let's Encrypt certificates need to be renewed no sooner than every 60 days and no later than every 90 days. So, not only will you want to automate renewing the certificate, but you'll probably want to automate moving it into the right directory when the renewal is complete.</p>
<p>As you can see from above, I setup my certificate on a Thursday at 12:39. So weekly, on Thursday, at 12:39, I'll check to see if the certificate needs to be nenewed. Because it won't renew any more frequently than every 60 days, but I have to have it renewed every 90 days, this gives be a 30-day window in which to get the certificate updated. So, I'll keep checking weekly. If a renewal isn't needed, the certbot(1) tool will gracefully exit. If a renewal is needed, the tool will update the certificate. Unfortunately, certbot(1) does not provide a useful exit code when renewals aren't needed, so rather than parsing text, I'll just copy the new certs into my WeeChat directory, regardless if they get updated or not.</p>
<p>So, in my root's crontab, I have the following:</p>
<pre>39 12 * * 4 /usr/local/sbin/renew.sh</pre>
<p>Where the contents of "/usr/local/sbin/renew.sh" are:</p>
<pre>#!/bin/bash

certbot renew -q
cat /etc/letsencrypt/live/weechat.example.com/privkey.pem \
    /etc/letsencrypt/live/weechat.example.com/fullchain.pem > \
    ~aaron/.weechat/ssl/relay.pem
chown aaron.aaron ~aaron/.weechat/ssl/relay.pem</pre>
<p>Now the only thing left to do is setup the relay itself in WeeChat. So, from within the client:</p>
<pre>/relay sslcertkey
/relay add ssl.weechat 8443</pre>
<p>You will need port 8443 open in your firewall, of course.</p>
<p>That's it. I have had some problems with certificate caching in WeechatAndroid it seems. So far, I have had to manually restart the relay in WeeChat, and flush the cache in WeechatAndroid and restart it to get the new certificate (I was previously using a self-signed certificate). Hopefully, this can also be automated, so I don't have to manually keep restarting the relay in WeeChat and flushing the cache in WeechatAndroid.</p>
<p>Regardless, this is how you use Let's Encrypt certificates with WeeChat SSL relay. Hopefully this is beneficial to someone.</p>



						</div>
					</div>
				</div>
				<div class="entry-meta">
					<span class="entry-date"><abbr class="published" title="2016-05-20T09:40:26-0600">2016 05 20</abbr></span>
										<span class="entry-category"><a href="https://pthree.org/category/debian/" rel="category tag">Debian</a><br/><a href="https://pthree.org/category/general/" rel="category tag">General</a><br/><a href="https://pthree.org/category/linux/" rel="category tag">Linux</a><br/><a href="https://pthree.org/category/scripting/" rel="category tag">Scripting</a></span>
					<span class="entry-comments"><a href="https://pthree.org/2016/05/20/weechat-relay-with-lets-encrypt-certificates/#comments">Comments (6)</a></span>
					<!--span class="entry-permalink"><a href="https://pthree.org/2016/05/20/weechat-relay-with-lets-encrypt-certificates/" title="Permalink to Weechat Relay With Let's Encrypt Certificates">Permalink</a></span-->
					<span class="entry-permalink"><a href="https://pthree.org/?p=4658" title="Shortlink to Weechat Relay With Let's Encrypt Certificates">Shortlink</a></span>
				</div>
			</div><!-- .post -->


			<div id="nav-below" class="navigation">
				<div class="nav-previous"><a href="https://pthree.org/page/2/" >&laquo; Older posts</a></div>
				<div class="nav-next"></div>
			</div>

		</div><!-- #content .hfeed -->
	</div><!-- #container -->

	<div id="primary" class="sidebar">
		<ul>
<li id="text-350063811" class="widget widget_text"><h3 class='widgettitle'>Subscribe</h3>
			<div class="textwidget"><a href="https://pthree.org/feed"><img src="/wp-images/feed-icon-32x32.png" /></a>
<a href="https://twitter.com/aarontoponce"><img src="/wp-images/twitter-icon.png" /></a>
<a href="https://profiles.google.com/aarontoponce"><img src="/wp-images/google-icon.png" /></a></div>
		</li>
            <li id="scqrcode-widget-3" class="widget scqrcode">                <h3 class='widgettitle'>Read on mobile</h3>
                <img src="https://chart.googleapis.com/chart?cht=qr&chs=125x125&chl=https%3A%2F%2Fpthree.org&choe=UTF-8&chld=L|2" width="125" height="125" border="0" />            </li>
        			<li id="search" class="widget widget_search">				<h3 class='widgettitle'><label for="s">Search</label></h3>
				<form id="searchform" method="get" action="https://pthree.org">
					<div>
						<input id="s" name="s" class="text-input" type="text" value="" size="10" tabindex="1" accesskey="S" />
						<input id="searchsubmit" name="searchsubmit" class="submit-button" type="submit" value="Search" tabindex="2" />
					</div>
				</form>
			</li>
<li id="archives-2" class="widget widget_archive"><h3 class='widgettitle'>Archives</h3>
		<label class="screen-reader-text" for="archives-dropdown-2">Archives</label>
		<select id="archives-dropdown-2" name="archive-dropdown" onchange='document.location.href=this.options[this.selectedIndex].value;'>
			
			<option value="">Select Month</option>
				<option value='https://pthree.org/2017/12/'> December 2017 </option>
	<option value='https://pthree.org/2017/09/'> September 2017 </option>
	<option value='https://pthree.org/2017/08/'> August 2017 </option>
	<option value='https://pthree.org/2017/02/'> February 2017 </option>
	<option value='https://pthree.org/2016/11/'> November 2016 </option>
	<option value='https://pthree.org/2016/07/'> July 2016 </option>
	<option value='https://pthree.org/2016/06/'> June 2016 </option>
	<option value='https://pthree.org/2016/05/'> May 2016 </option>
	<option value='https://pthree.org/2016/04/'> April 2016 </option>
	<option value='https://pthree.org/2016/03/'> March 2016 </option>
	<option value='https://pthree.org/2016/02/'> February 2016 </option>
	<option value='https://pthree.org/2016/01/'> January 2016 </option>
	<option value='https://pthree.org/2015/12/'> December 2015 </option>
	<option value='https://pthree.org/2015/11/'> November 2015 </option>
	<option value='https://pthree.org/2015/09/'> September 2015 </option>
	<option value='https://pthree.org/2015/08/'> August 2015 </option>
	<option value='https://pthree.org/2015/07/'> July 2015 </option>
	<option value='https://pthree.org/2015/06/'> June 2015 </option>
	<option value='https://pthree.org/2015/05/'> May 2015 </option>
	<option value='https://pthree.org/2015/02/'> February 2015 </option>
	<option value='https://pthree.org/2015/01/'> January 2015 </option>
	<option value='https://pthree.org/2014/12/'> December 2014 </option>
	<option value='https://pthree.org/2014/11/'> November 2014 </option>
	<option value='https://pthree.org/2014/10/'> October 2014 </option>
	<option value='https://pthree.org/2014/09/'> September 2014 </option>
	<option value='https://pthree.org/2014/08/'> August 2014 </option>
	<option value='https://pthree.org/2014/07/'> July 2014 </option>
	<option value='https://pthree.org/2014/06/'> June 2014 </option>
	<option value='https://pthree.org/2014/05/'> May 2014 </option>
	<option value='https://pthree.org/2014/04/'> April 2014 </option>
	<option value='https://pthree.org/2014/03/'> March 2014 </option>
	<option value='https://pthree.org/2014/02/'> February 2014 </option>
	<option value='https://pthree.org/2014/01/'> January 2014 </option>
	<option value='https://pthree.org/2013/12/'> December 2013 </option>
	<option value='https://pthree.org/2013/11/'> November 2013 </option>
	<option value='https://pthree.org/2013/10/'> October 2013 </option>
	<option value='https://pthree.org/2013/09/'> September 2013 </option>
	<option value='https://pthree.org/2013/08/'> August 2013 </option>
	<option value='https://pthree.org/2013/06/'> June 2013 </option>
	<option value='https://pthree.org/2013/05/'> May 2013 </option>
	<option value='https://pthree.org/2013/04/'> April 2013 </option>
	<option value='https://pthree.org/2013/03/'> March 2013 </option>
	<option value='https://pthree.org/2013/01/'> January 2013 </option>
	<option value='https://pthree.org/2012/12/'> December 2012 </option>
	<option value='https://pthree.org/2012/11/'> November 2012 </option>
	<option value='https://pthree.org/2012/10/'> October 2012 </option>
	<option value='https://pthree.org/2012/09/'> September 2012 </option>
	<option value='https://pthree.org/2012/08/'> August 2012 </option>
	<option value='https://pthree.org/2012/07/'> July 2012 </option>
	<option value='https://pthree.org/2012/06/'> June 2012 </option>
	<option value='https://pthree.org/2012/04/'> April 2012 </option>
	<option value='https://pthree.org/2012/03/'> March 2012 </option>
	<option value='https://pthree.org/2012/02/'> February 2012 </option>
	<option value='https://pthree.org/2012/01/'> January 2012 </option>
	<option value='https://pthree.org/2011/12/'> December 2011 </option>
	<option value='https://pthree.org/2011/11/'> November 2011 </option>
	<option value='https://pthree.org/2011/10/'> October 2011 </option>
	<option value='https://pthree.org/2011/09/'> September 2011 </option>
	<option value='https://pthree.org/2011/08/'> August 2011 </option>
	<option value='https://pthree.org/2011/07/'> July 2011 </option>
	<option value='https://pthree.org/2011/06/'> June 2011 </option>
	<option value='https://pthree.org/2011/05/'> May 2011 </option>
	<option value='https://pthree.org/2011/04/'> April 2011 </option>
	<option value='https://pthree.org/2011/03/'> March 2011 </option>
	<option value='https://pthree.org/2011/02/'> February 2011 </option>
	<option value='https://pthree.org/2011/01/'> January 2011 </option>
	<option value='https://pthree.org/2010/12/'> December 2010 </option>
	<option value='https://pthree.org/2010/10/'> October 2010 </option>
	<option value='https://pthree.org/2010/09/'> September 2010 </option>
	<option value='https://pthree.org/2010/08/'> August 2010 </option>
	<option value='https://pthree.org/2010/06/'> June 2010 </option>
	<option value='https://pthree.org/2010/05/'> May 2010 </option>
	<option value='https://pthree.org/2010/04/'> April 2010 </option>
	<option value='https://pthree.org/2010/03/'> March 2010 </option>
	<option value='https://pthree.org/2010/02/'> February 2010 </option>
	<option value='https://pthree.org/2010/01/'> January 2010 </option>
	<option value='https://pthree.org/2009/12/'> December 2009 </option>
	<option value='https://pthree.org/2009/11/'> November 2009 </option>
	<option value='https://pthree.org/2009/10/'> October 2009 </option>
	<option value='https://pthree.org/2009/09/'> September 2009 </option>
	<option value='https://pthree.org/2009/08/'> August 2009 </option>
	<option value='https://pthree.org/2009/06/'> June 2009 </option>
	<option value='https://pthree.org/2009/05/'> May 2009 </option>
	<option value='https://pthree.org/2009/04/'> April 2009 </option>
	<option value='https://pthree.org/2009/03/'> March 2009 </option>
	<option value='https://pthree.org/2009/02/'> February 2009 </option>
	<option value='https://pthree.org/2009/01/'> January 2009 </option>
	<option value='https://pthree.org/2008/12/'> December 2008 </option>
	<option value='https://pthree.org/2008/11/'> November 2008 </option>
	<option value='https://pthree.org/2008/10/'> October 2008 </option>
	<option value='https://pthree.org/2008/09/'> September 2008 </option>
	<option value='https://pthree.org/2008/08/'> August 2008 </option>
	<option value='https://pthree.org/2008/07/'> July 2008 </option>
	<option value='https://pthree.org/2008/06/'> June 2008 </option>
	<option value='https://pthree.org/2008/05/'> May 2008 </option>
	<option value='https://pthree.org/2008/04/'> April 2008 </option>
	<option value='https://pthree.org/2008/03/'> March 2008 </option>
	<option value='https://pthree.org/2008/02/'> February 2008 </option>
	<option value='https://pthree.org/2008/01/'> January 2008 </option>
	<option value='https://pthree.org/2007/12/'> December 2007 </option>
	<option value='https://pthree.org/2007/11/'> November 2007 </option>
	<option value='https://pthree.org/2007/10/'> October 2007 </option>
	<option value='https://pthree.org/2007/09/'> September 2007 </option>
	<option value='https://pthree.org/2007/08/'> August 2007 </option>
	<option value='https://pthree.org/2007/07/'> July 2007 </option>
	<option value='https://pthree.org/2007/06/'> June 2007 </option>
	<option value='https://pthree.org/2007/05/'> May 2007 </option>
	<option value='https://pthree.org/2007/04/'> April 2007 </option>
	<option value='https://pthree.org/2007/03/'> March 2007 </option>
	<option value='https://pthree.org/2007/02/'> February 2007 </option>
	<option value='https://pthree.org/2007/01/'> January 2007 </option>
	<option value='https://pthree.org/2006/12/'> December 2006 </option>
	<option value='https://pthree.org/2006/11/'> November 2006 </option>
	<option value='https://pthree.org/2006/10/'> October 2006 </option>
	<option value='https://pthree.org/2006/09/'> September 2006 </option>
	<option value='https://pthree.org/2006/08/'> August 2006 </option>
	<option value='https://pthree.org/2006/07/'> July 2006 </option>
	<option value='https://pthree.org/2006/06/'> June 2006 </option>
	<option value='https://pthree.org/2006/05/'> May 2006 </option>
	<option value='https://pthree.org/2006/04/'> April 2006 </option>
	<option value='https://pthree.org/2006/03/'> March 2006 </option>
	<option value='https://pthree.org/2006/02/'> February 2006 </option>
	<option value='https://pthree.org/2006/01/'> January 2006 </option>
	<option value='https://pthree.org/2005/12/'> December 2005 </option>
	<option value='https://pthree.org/2005/11/'> November 2005 </option>
	<option value='https://pthree.org/2005/10/'> October 2005 </option>
	<option value='https://pthree.org/2005/09/'> September 2005 </option>

		</select>
		</li>
<li id="linkcat-29" class="widget widget_links"><h3 class='widgettitle'>Web sites</h3>

	<ul class='xoxo blogroll'>
<li><a href="http://google.com/profiles/aaron.toponce" rel="me" title="My Google Profile" target="_blank">Google Profile</a></li>

	</ul>
</li>

<li id="pages-2" class="widget widget_pages"><h3 class='widgettitle'>Pages</h3>
		<ul>
			<li class="page_item page-item-5"><a href="https://pthree.org/author-colophon/">Author Colophon</a></li>
<li class="page_item page-item-298"><a href="https://pthree.org/contact/">Contact</a></li>
<li class="page_item page-item-3025"><a href="https://pthree.org/donate/">Donate</a></li>
<li class="page_item page-item-1736"><a href="https://pthree.org/my-pgp-key-signing-policy/">PGP Keysigning Policy</a></li>
<li class="page_item page-item-407"><a href="https://pthree.org/site-license/">Site License</a></li>
		</ul>
		</li>
<li id="meta-2" class="widget widget_meta"><h3 class='widgettitle'>Meta</h3>
			<ul>
						<li><a href="https://pthree.org/wp-login.php">Log in</a></li>
			<li><a href="https://pthree.org/feed/">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://pthree.org/comments/feed/">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>			</ul>
			</li>

		</ul>
	</div>
	<div id="footer">
		<span id="copyright">&copy; 2018 <span class="vcard"><a class="url fn n" href="http://www.pthree.org"><span class="given-name">Aaron</span> <span class="family-name">Toponce</span></a></span></span>
		<span class="meta-sep">|</span>
		<span id="generator-link">Thanks, <a href="http://wordpress.org/" title="WordPress" rel="generator">WordPress</a></span>
		<span class="meta-sep">|</span>
		<span id="theme-link"><a href="http://www.plaintxt.org/themes/barthelme/" title="Barthelme theme for WordPress" rel="follow designer">Barthelme</a> theme by <span class="vcard"><a class="url fn n" href="http://scottwallick.com/" title="scottwallick.com" rel="follow designer"><span class="given-name">Scott</span><span class="additional-name"> Allan</span><span class="family-name"> Wallick</span></a></span></span><!-- Theme design credit, that's all -->
		<span class="meta-sep">|</span>
		<span id="web-standards"> Standards Compliant <a href="http://validator.w3.org/check/referer" title="Valid XHTML">XHTML</a> &amp; <a href="http://jigsaw.w3.org/css-validator/validator?profile=css2&amp;warning=2&amp;uri=https://pthree.org/wp-content/themes/barthelme/style.css" title="Valid CSS">CSS</a></span>
		<span class="meta-sep">|</span>
		<span id="footer-rss"> RSS <a href="https://pthree.org/feed/" title="Aaron Toponce RSS 2.0 Feed" rel="alternate" type="application/rss+xml">Posts</a> &amp; <a href="https://pthree.org/comments/feed/" title="Aaron Toponce Comments RSS 2.0 Feed" rel="alternate" type="application/rss+xml">Comments</a></span>
	</div><!-- #footer -->

<script type='text/javascript' src='https://pthree.org/wp-includes/js/wp-embed.min.js?ver=5.0-alpha-42199'></script>

</div><!-- #wrapper -->

<!-- Start of SocialSharePrivacy code -->
<!-- script type="text/javascript" src="https://pthree.org/wp-includes/js/social-share-privacy/scripts/jquery.socialshareprivacy.js"></script>
<script type="text/javascript">
	$.fn.socialSharePrivacy.settings.order = ['facebook', 'twitter', 'gplus', 'hackernews', 'email'];
	$.fn.socialSharePrivacy.settings.path_prefix = '/';
	$(document).ready(function () {
		$('.share').socialSharePrivacy();
	});
</script -->

<script type="text/javascript">
  function resizeIframe(iframe) {
    iframe.height = iframe.contentWindow.document.body.scrollHeight + "px";
  }
</script>

</body><!-- end trasmission -->
</html><!-- hyper cache 2018-03-19 12:21:15 -->