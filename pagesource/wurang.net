
<!DOCTYPE html>
<html lang="zh-cn">
    
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="generator" content="Rang&#39;s Note">
    <title>Rang&#39;s Note</title>
    <meta name="author" content="Wu Rang">
    
    
        <link rel="icon" href="http://www.wurang.net/assets/images/favicon.png">
    
    
        <link rel="alternate" type="application/atom+xml" title="RSS" href="/atom.xml">
    
    <meta name="description" content="WuRang&apos;s Blog -- Everything begin with HelloWorld!">
<meta property="og:type" content="blog">
<meta property="og:title" content="Rang&#39;s Note">
<meta property="og:url" content="http://www.wurang.net/index.html">
<meta property="og:site_name" content="Rang&#39;s Note">
<meta property="og:description" content="WuRang&apos;s Blog -- Everything begin with HelloWorld!">
<meta property="og:locale" content="zh-cn">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="Rang&#39;s Note">
<meta name="twitter:description" content="WuRang&apos;s Blog -- Everything begin with HelloWorld!">
    
    
        
    
    
        <meta property="og:image" content="http://www.wurang.net/assets/images/avatar.jpg"/>
    
    
    
    
    <!--STYLES-->
    <link rel="stylesheet" href="/assets/css/style-sxklfps8ywgfyyjcowvnb4gxdgt0zjts3hsguljmv9uqanxjbnitrovtbrek.min.css">
    <!--STYLES END-->
    
    
</head>

    <body>
        <div id="blog">
            <!-- Define author's picture -->


    
        
            
        
    

<header id="header" data-behavior="1">
    <i id="btn-open-sidebar" class="fa fa-lg fa-bars"></i>
    <div class="header-title">
        <a class="header-title-link" href="/ ">Rang&#39;s Note</a>
    </div>
    
        
            <a  class="header-right-picture "
                href="#about">
        
        
            <img class="header-picture" src="/assets/images/avatar.jpg" alt="作者的图片"/>
        
        </a>
    
</header>

            <!-- Define author's picture -->



        
    

<nav id="sidebar" data-behavior="1">
    <div class="sidebar-container">
        
            <div class="sidebar-profile">
                <a href="/#about">
                    <img class="sidebar-profile-picture" src="/assets/images/avatar.jpg" alt="作者的图片"/>
                </a>
                <h4 class="sidebar-profile-name">Wu Rang</h4>
                
                    <h5 class="sidebar-profile-bio"><p>Everything begin with HelloWorld!</p>
</h5>
                
            </div>
        
        
            <ul class="sidebar-buttons">
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link "
                             href="/ "
                            
                        >
                    
                        <i class="sidebar-button-icon fa fa-lg fa-home"></i>
                        <span class="sidebar-button-desc">首页</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link "
                             href="/all-categories"
                            
                        >
                    
                        <i class="sidebar-button-icon fa fa-lg fa-bookmark"></i>
                        <span class="sidebar-button-desc">分类</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link "
                             href="/all-tags"
                            
                        >
                    
                        <i class="sidebar-button-icon fa fa-lg fa-tags"></i>
                        <span class="sidebar-button-desc">标签</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link "
                             href="/all-archives"
                            
                        >
                    
                        <i class="sidebar-button-icon fa fa-lg fa-archive"></i>
                        <span class="sidebar-button-desc">归档</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link open-algolia-search"
                             href="#search"
                            
                        >
                    
                        <i class="sidebar-button-icon fa fa-lg fa-search"></i>
                        <span class="sidebar-button-desc">搜索</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link "
                             href="#about"
                            
                        >
                    
                        <i class="sidebar-button-icon fa fa-lg fa-question"></i>
                        <span class="sidebar-button-desc">关于</span>
                    </a>
            </li>
            
        </ul>
        
            <ul class="sidebar-buttons">
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link " href="https://github.com/sonicrang" target="_blank" rel="noopener">
                    
                        <i class="sidebar-button-icon fa fa-lg fa-github"></i>
                        <span class="sidebar-button-desc">GitHub</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link " href="https://stackoverflow.com/users/2738908/rang" target="_blank" rel="noopener">
                    
                        <i class="sidebar-button-icon fa fa-lg fa-stack-overflow"></i>
                        <span class="sidebar-button-desc">Stack Overflow</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link " href="https://www.linkedin.com/in/wurang" target="_blank" rel="noopener">
                    
                        <i class="sidebar-button-icon fa fa-lg fa-linkedin"></i>
                        <span class="sidebar-button-desc">LinkedIn</span>
                    </a>
            </li>
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link " href="mailto:sonicrang@gmail.com" target="_blank" rel="noopener">
                    
                        <i class="sidebar-button-icon fa fa-lg fa-envelope-o"></i>
                        <span class="sidebar-button-desc">邮箱</span>
                    </a>
            </li>
            
        </ul>
        
            <ul class="sidebar-buttons">
            
                <li class="sidebar-button">
                    
                        <a  class="sidebar-button-link "
                             href="/atom.xml"
                            
                        >
                    
                        <i class="sidebar-button-icon fa fa-lg fa-rss"></i>
                        <span class="sidebar-button-desc">RSS</span>
                    </a>
            </li>
            
        </ul>
        
    </div>
</nav>

            
            <div id="main" data-behavior="1"
                 class="
                        hasCoverMetaIn
                        ">
                <section class="postShorten-group main-content-wrap">
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/rabbitmq/">
                            RabbitMQ 基础介绍
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2018-02-08T10:24:00+08:00">
	
		    2月 08, 2018
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/architecture/">architecture</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#一、什么是RabbitMQ"><span class="toc-text">一、什么是RabbitMQ</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#二、-RabbitMQ简介"><span class="toc-text">二、 RabbitMQ简介</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#2-1-术语"><span class="toc-text">2.1 术语</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-2-基本特性"><span class="toc-text">2.2 基本特性</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#三、-官方Demo与思考"><span class="toc-text">三、 官方Demo与思考</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#3-1-Hello-World"><span class="toc-text">3.1 Hello World</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-1-1-操作"><span class="toc-text">3.1.1 操作</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-1-2-思考"><span class="toc-text">3.1.2 思考</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-2-工作队列"><span class="toc-text">3.2 工作队列</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-2-1-操作"><span class="toc-text">3.2.1 操作</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-2-2-思考"><span class="toc-text">3.2.2 思考</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-3-发布-订阅"><span class="toc-text">3.3 发布/订阅</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-3-1-操作"><span class="toc-text">3.3.1 操作</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-3-2-思考"><span class="toc-text">3.3.2 思考</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-4-路由"><span class="toc-text">3.4 路由</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-4-1-操作"><span class="toc-text">3.4.1 操作</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-4-2-思考"><span class="toc-text">3.4.2 思考</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-5-主题交换机"><span class="toc-text">3.5 主题交换机</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-5-1-操作"><span class="toc-text">3.5.1 操作</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-5-2-思考"><span class="toc-text">3.5.2 思考</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-6-远程过程调用RPC"><span class="toc-text">3.6 远程过程调用RPC</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-6-1-操作"><span class="toc-text">3.6.1 操作</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-6-2-思考"><span class="toc-text">3.6.2 思考</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#四、-思考总结"><span class="toc-text">四、 思考总结</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#五、-场景模拟"><span class="toc-text">五、 场景模拟</span></a></li></ol>
<h1 id="一、什么是RabbitMQ"><a href="#一、什么是RabbitMQ" class="headerlink" title="一、什么是RabbitMQ"></a>一、什么是RabbitMQ</h1><p>RabbitMQ是一个消息代理。</p>
<p>RabbitMQ基于AMQP协议用Erlang编写。</p>
<p><strong>什么是AMQP？</strong></p>
<ul>
<li>AMQP（高级消息队列协议）是一个网络协议。它支持符合要求的客户端应用（application）和消息中间件代理（messaging middleware broker）之间进行通信。</li>
</ul>
<p><strong>简单来说：</strong> MQ是邮递过程，寄信人去邮局把信件放入邮箱，邮递员就会把信件投递到收件人</p>
<h1 id="二、-RabbitMQ简介"><a href="#二、-RabbitMQ简介" class="headerlink" title="二、 RabbitMQ简介"></a>二、 RabbitMQ简介</h1><h2 id="2-1-术语"><a href="#2-1-术语" class="headerlink" title="2.1 术语"></a>2.1 术语</h2><table>
<thead>
<tr>
<th>术语</th>
<th>类比</th>
</tr>
</thead>
<tbody>
<tr>
<td>生产者Producing</td>
<td>寄信人，信件的来源</td>
</tr>
<tr>
<td>消息Message</td>
<td>信件</td>
</tr>
<tr>
<td>交换机Exchange</td>
<td>邮局，信件分发的场所</td>
</tr>
<tr>
<td>队列Queue</td>
<td>邮箱，存储邮件</td>
</tr>
<tr>
<td>绑定Binding</td>
<td>邮局信件和邮箱之间的关系，邮局信件按收件省市划分后归纳到不同邮箱</td>
</tr>
<tr>
<td>消费者Consuming</td>
<td>收件人，信件的归宿</td>
</tr>
</tbody>
</table>
<p><img src="../images/2018/rabbitmq/1.png" alt="1"></p>
<h2 id="2-2-基本特性"><a href="#2-2-基本特性" class="headerlink" title="2.2 基本特性"></a>2.2 基本特性</h2><ul>
<li><p>消息只存储在Quene中</p>
</li>
<li><ul>
<li>只有邮箱，也就是Queue具有存储功能，Exchange不能存储消息</li>
</ul>
</li>
<li><p>RoutingKey</p>
</li>
<li><ul>
<li>RoutingKey就是消息的收件地址</li>
<li>RoutingKey可以直接写成XXX格式，也可以写成XXX.XXX.XXX格式，也可以为空</li>
</ul>
</li>
<li><p>交换机有4种类型</p>
<ul>
<li>Direct 直连交换机</li>
<li>Fanout 扇形交换机</li>
</ul>
</li>
</ul>
<ul>
<li>Topic 主题交换机</li>
<li>Headers 头交换机</li>
</ul>
<h1 id="三、-官方Demo与思考"><a href="#三、-官方Demo与思考" class="headerlink" title="三、 官方Demo与思考"></a>三、 官方Demo与思考</h1><h2 id="3-1-Hello-World"><a href="#3-1-Hello-World" class="headerlink" title="3.1 Hello World"></a>3.1 Hello World</h2><p><img src="../images/2018/rabbitmq/2.png" alt="2"></p>
<h3 id="3-1-1-操作"><a href="#3-1-1-操作" class="headerlink" title="3.1.1 操作"></a>3.1.1 操作</h3><p><strong>生产者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Queue</div><div class="line">	MQ.Queue.Name = &quot;hello&quot;</div><div class="line">- 发送信息</div><div class="line">	MQ.Publish</div><div class="line">        Exchange = &quot;&quot;</div><div class="line">        RoutingKey = &quot;hello&quot;</div><div class="line">        Body = &quot;hello wolrd&quot;</div></pre></td></tr></table></figure>
<p><strong>消费者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Queue</div><div class="line">	MQ.Queue.Name = &quot;hello&quot;</div><div class="line">- 消费信息</div><div class="line">	MQ.Consume</div><div class="line">        Queue.Name= &quot;hello&quot;</div><div class="line">        Auto ack = true  //注意自动ack</div></pre></td></tr></table></figure>
<h3 id="3-1-2-思考"><a href="#3-1-2-思考" class="headerlink" title="3.1.2 思考"></a>3.1.2 思考</h3><ul>
<li>为何没有给Exchange命名？Exchange是什么类型？</li>
<li>为何在生产者和消费者都申明了Queue？</li>
<li>RoutingKey和Queue.Name 有什么关系？</li>
</ul>
<h2 id="3-2-工作队列"><a href="#3-2-工作队列" class="headerlink" title="3.2 工作队列"></a>3.2 工作队列</h2><p><img src="../images/2018/rabbitmq/3.png" alt="3"></p>
<h3 id="3-2-1-操作"><a href="#3-2-1-操作" class="headerlink" title="3.2.1 操作"></a>3.2.1 操作</h3><p><strong>生产者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Queue</div><div class="line">	MQ.Queue.Name = &quot;task_queue&quot;</div><div class="line">	MQ.Queue.Durable = true  //注意Queue持久化</div><div class="line">- 发送信息</div><div class="line">	MQ.Publish</div><div class="line">		Exchange = &quot;&quot;</div><div class="line">		RoutingKey = &quot;task_queue&quot;</div><div class="line">		Body = &quot;hello wolrd&quot;</div><div class="line">		delivery_mode  = persistent or 2  //注意消息持久化</div></pre></td></tr></table></figure>
<p><strong>多个消费者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Queue</div><div class="line">	MQ.Queue.Name = &quot;task_queue&quot;</div><div class="line">	MQ.Queue.Durable = true</div><div class="line">- QoS</div><div class="line">	MQ.Qos</div><div class="line">		prefetch_count = 1  //注意QoS</div><div class="line">- 消费信息</div><div class="line">	MQ.Consume</div><div class="line">		Queue.Name= &quot;task_queue&quot;</div><div class="line">		Auto ack = false   //注意手动ack</div><div class="line">- Sleep模拟处理事务</div><div class="line">- 手动ack</div></pre></td></tr></table></figure>
<h3 id="3-2-2-思考"><a href="#3-2-2-思考" class="headerlink" title="3.2.2 思考"></a>3.2.2 思考</h3><ul>
<li>多个消费者在Direct交换机，相同Queue下，如何接收消息？</li>
<li>如何让Queue和消息持久化？</li>
<li>可以直接给3.1中的hello队列赋予持久优设置吗？</li>
<li>持久化有什么用？</li>
<li>默认交换机是持久化的吗？</li>
<li>手动ack和自动ack的区别？</li>
<li>忘记ack怎么办？</li>
<li>QoS（Quality of Service）如何实现？</li>
</ul>
<h2 id="3-3-发布-订阅"><a href="#3-3-发布-订阅" class="headerlink" title="3.3 发布/订阅"></a>3.3 发布/订阅</h2><p><img src="../images/2018/rabbitmq/4.png" alt="4"></p>
<h3 id="3-3-1-操作"><a href="#3-3-1-操作" class="headerlink" title="3.3.1 操作"></a>3.3.1 操作</h3><p><strong>生产者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Exchange</div><div class="line">	MQ.Exchange.Name = &quot;logs&quot;</div><div class="line">	MQ.Exchange.Type = &quot;fanout&quot;</div><div class="line">	MQ.Exchange.Durable = true</div><div class="line">- 发送信息</div><div class="line">	MQ.Publish</div><div class="line">		Exchange = &quot;logs&quot;</div><div class="line">		RoutingKey = &quot;&quot;  //注意RoutingKey</div><div class="line">		Body = &quot;hello wolrd&quot;</div></pre></td></tr></table></figure>
<p><strong>多个消费者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Exchange</div><div class="line">	MQ.Exchange.Name = &quot;logs&quot;</div><div class="line">	MQ.Exchange.Type = &quot;fanout&quot;</div><div class="line">	MQ.Exchange.Durable = true</div><div class="line">- 申明临时Queue</div><div class="line">	MQ.Queue.exclusive= true   //注意临时Queue</div><div class="line">- 绑定</div><div class="line">	Binding  //注意绑定</div><div class="line">		Exchange = &quot;logs&quot;</div><div class="line">		Queue.Name = MQ.Queue.Name</div><div class="line">		RoutingKey = &quot;&quot;</div><div class="line">- 消费信息</div><div class="line">	MQ.Consume</div><div class="line">		Queue.Name = MQ.Queue.Name</div><div class="line">		Auto ack = false</div><div class="line">- Sleep模拟处理事务</div><div class="line">- 手动ack</div></pre></td></tr></table></figure>
<h3 id="3-3-2-思考"><a href="#3-3-2-思考" class="headerlink" title="3.3.2 思考"></a>3.3.2 思考</h3><ul>
<li>扇形交换机的RoutingKey是如何配置的？</li>
<li>扇形交换机的主要用途？</li>
<li>什么是临时队列？</li>
<li>临时队列与持久化可以同时设置吗？</li>
<li>扇形交换机可以在生产者设置持久化的队列吗？</li>
</ul>
<h2 id="3-4-路由"><a href="#3-4-路由" class="headerlink" title="3.4 路由"></a>3.4 路由</h2><p><img src="../images/2018/rabbitmq/5.png" alt="5"></p>
<p><img src="../images/2018/rabbitmq/6.png" alt="6"></p>
<h3 id="3-4-1-操作"><a href="#3-4-1-操作" class="headerlink" title="3.4.1 操作"></a>3.4.1 操作</h3><p><strong>生产者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Exchange</div><div class="line">	MQ.Exchange.Name = &quot;direct_logs&quot;</div><div class="line">	MQ.Exchange.Type = &quot;direct&quot;  //注意Exchange类型</div><div class="line">	MQ.Exchange.Durable = true</div><div class="line">- 发送信息</div><div class="line">	MQ.Publish</div><div class="line">		Exchange = &quot;direct_logs&quot;</div><div class="line">		RoutingKey = &quot;info&quot; or &quot;error&quot; or &quot;warn&quot;  //注意RoutingKey</div><div class="line">		Body = &quot;hello wolrd&quot;</div></pre></td></tr></table></figure>
<p><strong>多个消费者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Exchange</div><div class="line">	MQ.Exchange.Name = &quot;direct_logs&quot;</div><div class="line">	MQ.Exchange.Type = &quot;direct&quot;</div><div class="line">	MQ.Exchange.Durable = true</div><div class="line">- 申明临时Queue</div><div class="line">	MQ.Queue.exclusive= true</div><div class="line">- 绑定</div><div class="line">	Binding</div><div class="line">		Exchange = &quot;direct_logs&quot;</div><div class="line">		Queue.Name = MQ.Queue.Name</div><div class="line">		RoutingKey = &quot;info&quot; or &quot;error&quot; or &quot;warn&quot;</div><div class="line">- 消费信息</div><div class="line">	MQ.Consume</div><div class="line">		Queue.Name = MQ.Queue.Name</div><div class="line">		Auto ack = false</div><div class="line">- Sleep模拟处理事务</div><div class="line">- 手动ack</div></pre></td></tr></table></figure>
<h3 id="3-4-2-思考"><a href="#3-4-2-思考" class="headerlink" title="3.4.2 思考"></a>3.4.2 思考</h3><ul>
<li>直连交换机多重绑定和扇形交换机有什么区别？</li>
<li>直连交换机RoutingKey绑定有什么限制？</li>
</ul>
<h2 id="3-5-主题交换机"><a href="#3-5-主题交换机" class="headerlink" title="3.5 主题交换机"></a>3.5 主题交换机</h2><p><img src="../images/2018/rabbitmq/7.png" alt="7"></p>
<h3 id="3-5-1-操作"><a href="#3-5-1-操作" class="headerlink" title="3.5.1 操作"></a>3.5.1 操作</h3><p><strong>生产者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Exchange</div><div class="line">	MQ.Exchange.Name = &quot;topic_logs&quot;</div><div class="line">	MQ.Exchange.Type = &quot;topic&quot;</div><div class="line">	MQ.Exchange.Durable = true</div><div class="line">- 发送信息</div><div class="line">	MQ.Publish</div><div class="line">		Exchange = &quot;topic_logs&quot;</div><div class="line">		RoutingKey = &quot;this.abc&quot; or &quot;that.abc.xyz&quot; or &quot;abc&quot;  //注意RoutingKey写法</div><div class="line">		Body = &quot;hello wolrd&quot;</div></pre></td></tr></table></figure>
<p><strong>多个消费者：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Exchange</div><div class="line">	MQ.Exchange.Name = &quot;topic_logs&quot;</div><div class="line">	MQ.Exchange.Type = &quot;topic&quot;</div><div class="line">	MQ.Exchange.Durable = true</div><div class="line">- 申明临时Queue</div><div class="line">	MQ.Queue.exclusive= true</div><div class="line">- 绑定</div><div class="line">	Binding</div><div class="line">		Exchange = &quot;topic_logs&quot;</div><div class="line">		Queue.Name = MQ.Queue.Name</div><div class="line">		RoutingKey = &quot;*.abc&quot; or &quot;#.abc&quot; or &quot;*.abc.*&quot;  //注意binding写法</div><div class="line">- 消费信息</div><div class="line">	MQ.Consume</div><div class="line">		Queue.Name = MQ.Queue.Name</div><div class="line">		Auto ack = false</div><div class="line">- Sleep模拟处理事务</div><div class="line">- 手动ack</div></pre></td></tr></table></figure>
<h3 id="3-5-2-思考"><a href="#3-5-2-思考" class="headerlink" title="3.5.2 思考"></a>3.5.2 思考</h3><ul>
<li><code>*</code> 和 <code>#</code> 的区别？</li>
<li>绑定键为 <code>*</code> 的队列会取到一个路由键为空的消息吗？</li>
<li><code>a.*.#</code> 和 <code>a.#</code>的区别在哪儿？</li>
</ul>
<h2 id="3-6-远程过程调用RPC"><a href="#3-6-远程过程调用RPC" class="headerlink" title="3.6 远程过程调用RPC"></a>3.6 远程过程调用RPC</h2><p><img src="../images/2018/rabbitmq/8.png" alt="8"></p>
<h3 id="3-6-1-操作"><a href="#3-6-1-操作" class="headerlink" title="3.6.1 操作"></a>3.6.1 操作</h3><p><strong>调用端（生产者）：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- 调用本机某方法</div><div class="line">	调用另一个服务的接口</div><div class="line">- 连接MQ</div><div class="line">- 申明临时Queue</div><div class="line">	MQ.Queue.exclusive= true   //注意临时Queue，用于接收回传信息</div><div class="line">- 消费信息</div><div class="line">	MQ.Consume</div><div class="line">		Queue.Name= MQ.Queue.Name  </div><div class="line">		Auto ack = true</div><div class="line">- 发送信息</div><div class="line">	MQ.Publish</div><div class="line">		Exchange = &quot;&quot;</div><div class="line">		RoutingKey = &quot;rpc_queue&quot;  //注意发送信息的队列，是服务端的队列，不是上面的临时队列</div><div class="line">		CorrelationId: corrId,  //唯一id，用以与回调结果匹配</div><div class="line">		ReplyTo:       q.Name,  //回传地址，用以服务端将结果返回</div><div class="line">		Body = &quot;123456&quot;  //传输id</div><div class="line">- 接收结果</div><div class="line">	匹配CorrelationId 和 Server.CorrelationId</div><div class="line">	获得信息</div></pre></td></tr></table></figure>
<p><strong>服务端（消费者）：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- 连接MQ</div><div class="line">- 申明Queue</div><div class="line">	MQ.Queue.Name= &quot;rpc_queue&quot;  //注意此队列和调用者的临时队列不同</div><div class="line">- QoS</div><div class="line">	MQ.Qos</div><div class="line">		prefetch_count = 1  //注意QoS</div><div class="line">- 消费信息</div><div class="line">	MQ.Consume</div><div class="line">		Queue.Name= MQ.Queue.Name  </div><div class="line">		Auto ack = false</div><div class="line">- 调用接口</div><div class="line">	查询id相关信息</div><div class="line">- 发送信息</div><div class="line">	MQ.Publish</div><div class="line">		Exchange = &quot;&quot;</div><div class="line">		RoutingKey = Client.ReplyTo</div><div class="line">		CorrelationId = Client.CorrelationId</div><div class="line">		Body = id相关信息</div></pre></td></tr></table></figure>
<h3 id="3-6-2-思考"><a href="#3-6-2-思考" class="headerlink" title="3.6.2 思考"></a>3.6.2 思考</h3><ul>
<li>上面例子中使用了临时队列和非持久化队列，会出现什么问题？</li>
<li>如果服务器发生故障，并且抛出异常，应该被转发到客户端吗？</li>
<li>当没有服务器运行时，客户端如何作出反映？</li>
</ul>
<h1 id="四、-思考总结"><a href="#四、-思考总结" class="headerlink" title="四、 思考总结"></a>四、 思考总结</h1><ul>
<li><p>Q：为何没有给Exchange命名？Exchange是什么类型？</p>
<ul>
<li>没有命名的交换机是默认（匿名）交换机</li>
<li>默认交换机是Direct类型</li>
</ul>
</li>
<li><p>Q：为何在生产者和消费者都申明了Queue？</p>
<ul>
<li>声明交换机和队列只能生效一次</li>
<li>由于生产者和消费者无法确定启动顺序，所以两处申明可以防止招不到交换机或队列造成消息丢失</li>
</ul>
</li>
<li><p>Q：RoutingKey和Queue.Name 有什么关系？</p>
<ul>
<li><p>默认或者匿名交换机的消息将会根据指定的routing_key分发到指定的队列</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Q：多个消费者在Direct交换机，相同Queue下，如何接收消息？</p>
<ul>
<li>轮询分发</li>
</ul>
</li>
<li><p>Q：如何让Queue和消息持久化？</p>
<ul>
<li>对于交换机和队列，设置其Durable属性</li>
<li>对于消息，设置其发送模式为Persistent（部分语言用编码2表示）</li>
</ul>
</li>
<li><p>Q：可以直接给3.1中的hello队列赋予持久优设置吗？</p>
<ul>
<li>不可以，队列只可申明一次，改动属性会报异常</li>
</ul>
</li>
<li><p>Q：持久化有什么用？</p>
<ul>
<li>持久化会使MQ服务退出后，以申明的交换机、队列不仍存在，队列内的数据仍存在</li>
<li>但持久化不能保证所有的数据都不会丢失</li>
</ul>
</li>
<li><p>Q：默认交换机是持久化的吗？</p>
<ul>
<li>是</li>
</ul>
</li>
<li><p>Q：手动ack和自动ack的区别？</p>
<ul>
<li>自动ack会在消费者收到消息时就自动发送确认</li>
<li>手动ack需要消费者自己手动发送确认</li>
<li>消息没有超时的概念</li>
<li>当消息被RabbitMQ发送给消费者之后，马上就会在内存中移除</li>
<li>自动ack场景下，当消费者执行一个费时任务时，MQ崩溃，会导致消息丢失</li>
<li>手动ack场景下，当消费者执行一个费时任务时，MQ崩溃，消息会被重新推送</li>
</ul>
</li>
<li><p>Q：忘记ack怎么办？</p>
<ul>
<li>忘记ack会让MQ不断重复发送信息，导致MQ内存增加</li>
<li>可以在MQ中查询messages_unacknowledged字段，手动处理</li>
</ul>
</li>
<li><p>Q：QoS（Quality of Service）如何实现？</p>
<ul>
<li>设置MQ的QoS相关配置</li>
<li>设置prefetch_count = 1</li>
</ul>
<p>​</p>
</li>
<li><p>Q：扇形交换机的RoutingKey是如何配置的？</p>
<ul>
<li>填写为空</li>
</ul>
</li>
<li><p>Q：扇形交换机的主要用途？</p>
<ul>
<li>发送广播</li>
</ul>
</li>
<li><p>Q：什么是临时队列？</p>
<ul>
<li>临时队列随机生成队列名称</li>
<li>当与消费者断开连接的时候，这个队列应当被立即删除</li>
</ul>
</li>
<li><p>Q：临时队列与持久化可以同时设置吗？</p>
<ul>
<li>不可以，消费者断开后随机队列就删除，所以一旦MQ退出，消费者就与MQ断开连接，随机队列就会删除，不能设置持久化</li>
</ul>
</li>
<li><p>Q：扇形交换机可以在生产者设置持久化的队列吗？</p>
<ul>
<li><p>可以，以保证所有消息不丢失。</p>
</li>
<li><p>但是要注意，一般扇形交换机每个消费者一般独占一条队列，如果多个消费者共用一条队列，会跟直连交换机一样进行轮询分发</p>
</li>
<li><p>如果在生产者设置10个持久化队列，但有20个消费者，每个消费者独占一条队列，那么只有其中的10个可以获取全部信息，其他10个消费者无法使用</p>
</li>
<li><p>如果在生产者设置10个持久化队列，但有20个消费者，每2个消费者共用一条队列，那么20个消费者将轮询消费信息，不能收到完整的全部的信息</p>
</li>
<li><p>所以扇形交换机一般不按照上面的方式使用</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>Q：直连交换机多重绑定和扇形交换机有什么区别？</p>
<ul>
<li>扇形交换机不能通过RoutingKey过滤消息</li>
</ul>
</li>
<li><p>Q：直连交换机RoutingKey多重绑定有什么限制？</p>
<ul>
<li>不能用通配符方式模糊过滤消息</li>
</ul>
<p>​</p>
</li>
</ul>
<ul>
<li><p>Q： <code>*</code> 和 <code>#</code> 的区别？</p>
<ul>
<li>(星号) 用来表示一个单词</li>
<li>(井号) 用来表示任意数量（零个或多个）单词</li>
</ul>
</li>
<li><p>Q：绑定键为 <code>*</code> 的队列会取到一个路由键为空的消息吗？</p>
<ul>
<li>不能，星号表示至少一个单词</li>
</ul>
</li>
<li><p>Q：<code>a.*.#</code> 和 <code>a.#</code>的区别在哪儿？</p>
<ul>
<li>前者不可以匹配 a</li>
<li>后者可以匹配 a</li>
</ul>
<p>​</p>
</li>
</ul>
<ul>
<li>Q：上面例子中使用了临时队列和非持久化队列，会出现什么问题？<ul>
<li>没启动服务端时，客户机消息丢失</li>
<li>客户端发送给服务端后，客户端断开连接，会导致回传信息丢失</li>
</ul>
</li>
<li>Q：如果服务器发生故障，并且抛出异常，应该被转发到客户端吗？<ul>
<li>一般来说不需要</li>
</ul>
</li>
<li>Q：当没有服务器运行时，客户端如何作出反映？<ul>
<li>对于不重要的信息，采用临时队列，丢失消息即可</li>
<li>对于重要信息，采用持久化队列，等待服务器处理，并根据实际情况定时处理（清除或消息补偿）</li>
</ul>
</li>
</ul>
<h1 id="五、-场景模拟"><a href="#五、-场景模拟" class="headerlink" title="五、 场景模拟"></a>五、 场景模拟</h1><ul>
<li>账号注册后一系列短信邮件通知<ul>
<li>使用扇形交换机，短信和邮件服务作为消费者申明临时队列</li>
<li>使用Auto ack</li>
</ul>
</li>
<li>秒杀下单<ul>
<li>使用直连交换机，秒杀服务作为生产者，订单中心作为消费者，都需要申明持久化队列</li>
<li>使用手动ack</li>
</ul>
</li>
<li>下单后支付并返回结果<ul>
<li>使用直连交换机，下单服务作为生产者，支付服务作为消费者，都需要申明持久化队列</li>
<li>使用手动ack</li>
<li>消息安全性要求很高，需要消息补偿机制</li>
</ul>
</li>
<li>用户下单（订单服务接收下单请求，异步调用仓库服务查询库存是否足够）<ul>
<li>使用RPC</li>
<li>仓库服务申明异步调用队列 A</li>
<li>订单服务申明回传队列 B</li>
<li>订单服务将待查询的产品id和B的地址发送到A</li>
<li>仓库服务从A中消费信息，处理订单服务请求，并把结果发送到B</li>
<li>订单服务从B中消费信息，接收仓库服务的查询结果</li>
</ul>
</li>
</ul>

                    
                        
                    
                    
                        <p>
                            <a href="/rabbitmq/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/nextcloud_with_docker/">
                            用Docker搭建企业私有云盘NextCloud
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-12-26T11:08:00+08:00">
	
		    12月 26, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/virtualization/">virtualization</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#前言"><span class="toc-text">前言</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#一、安装Docker"><span class="toc-text">一、安装Docker</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-关闭selinux"><span class="toc-text">1.1 关闭selinux</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-删除CentOS自带Docker"><span class="toc-text">1.2 删除CentOS自带Docker</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-3-安装Docker-CE"><span class="toc-text">1.3 安装Docker CE</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-4-安装Docker-Compose"><span class="toc-text">1.4 安装Docker Compose</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#二、安装NextCloud"><span class="toc-text">二、安装NextCloud</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#2-1-使用docker-compose安装NextCloud"><span class="toc-text">2.1 使用docker-compose安装NextCloud</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-2-设置开机启动"><span class="toc-text">2.2 设置开机启动</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#三、Nginx反向代理"><span class="toc-text">三、Nginx反向代理</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#3-1-域名解析"><span class="toc-text">3.1 域名解析</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-2-申请CA证书"><span class="toc-text">3.2 申请CA证书</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-3-安装Nginx"><span class="toc-text">3.3 安装Nginx</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-4-配置Nginx"><span class="toc-text">3.4 配置Nginx</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-5-开放防火墙端口"><span class="toc-text">3.5 开放防火墙端口</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-6-端口转发"><span class="toc-text">3.6 端口转发</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#四、DDNS"><span class="toc-text">四、DDNS</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#4-1-创建阿里云AccessKey"><span class="toc-text">4.1 创建阿里云AccessKey</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-2-安装"><span class="toc-text">4.2 安装</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-3-配置"><span class="toc-text">4.3 配置</span></a></li></ol></li></ol>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文涉及的操作系统、软件平台和其他环境如下：</p>
<ul>
<li>云盘服务器<ul>
<li>CentOS 7</li>
<li>WD红盘/阵列盒（可选） </li>
<li>所在网络需要有公网IP</li>
<li>Docker CE</li>
<li>Docker Compose</li>
<li>Nginx with SSL</li>
</ul>
</li>
<li>阿里云<ul>
<li>DNS</li>
<li>CA证书</li>
</ul>
</li>
</ul>
<h1 id="一、安装Docker"><a href="#一、安装Docker" class="headerlink" title="一、安装Docker"></a>一、安装Docker</h1><h2 id="1-1-关闭selinux"><a href="#1-1-关闭selinux" class="headerlink" title="1.1 关闭selinux"></a>1.1 关闭selinux</h2><p>如果没有专业的运维，建议关闭selinux，以免后续配置引起冲突</p>
<p>修改” /etc/selinux/config “文件，设置SELINUX=disabled ，保存并重启服务器</p>
<h2 id="1-2-删除CentOS自带Docker"><a href="#1-2-删除CentOS自带Docker" class="headerlink" title="1.2 删除CentOS自带Docker"></a>1.2 删除CentOS自带Docker</h2><p>CentOS 7自带了旧版本Docker，所以先删除，如果服务器已经安装Docker请谨慎执行！！！</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum -y remove docker docker-common container-selinux</div></pre></td></tr></table></figure>
<h2 id="1-3-安装Docker-CE"><a href="#1-3-安装Docker-CE" class="headerlink" title="1.3 安装Docker CE"></a>1.3 安装Docker CE</h2><p>Docker分CE和EE两个版本，这里我们用开源免费的CE版即可</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo yum install -y yum-utils</div><div class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">sudo yum install docker-ce</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 启动docker</span></div><div class="line">sudo systemctl start docker</div><div class="line"><span class="meta">#</span><span class="bash"> 查看版本确认是否安装成功</span></div><div class="line">docker --version</div></pre></td></tr></table></figure>
<h2 id="1-4-安装Docker-Compose"><a href="#1-4-安装Docker-Compose" class="headerlink" title="1.4 安装Docker Compose"></a>1.4 安装Docker Compose</h2><p>Docker Compose是用来管理和配置多个Docker的工具，后面我们会用到它来部署NextCloud</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/bin/docker-compose</div><div class="line">sudo chmod +x /usr/bin/docker-compose</div><div class="line"><span class="meta">#</span><span class="bash"> 查看版本确认是否安装成功</span></div><div class="line">docker-compose --version</div></pre></td></tr></table></figure>
<h1 id="二、安装NextCloud"><a href="#二、安装NextCloud" class="headerlink" title="二、安装NextCloud"></a>二、安装NextCloud</h1><h2 id="2-1-使用docker-compose安装NextCloud"><a href="#2-1-使用docker-compose安装NextCloud" class="headerlink" title="2.1 使用docker-compose安装NextCloud"></a>2.1 使用docker-compose安装NextCloud</h2><p>这里使用的安装方式来自<a href="https://hub.docker.com/r/wonderfall/nextcloud/" target="_blank" rel="external">https://hub.docker.com/r/wonderfall/nextcloud/</a></p>
<p>有兴趣可以了解所有的配置和相关逻辑，下面仅列出使用方法：</p>
<ul>
<li>将存储盘或者本地磁盘的某个分区挂载到目录” /data “下</li>
</ul>
<ul>
<li><p>在” /etc/nextcloud “目录下创建文件” docker-compose.yml “</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/nextcloud</div><div class="line">vi docker-compose.yml</div></pre></td></tr></table></figure>
<p>​</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2'</span></div><div class="line"></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  nextcloud:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">wonderfall/nextcloud</span></div><div class="line"><span class="attr">    links:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">nextcloud-db</span>         </div><div class="line"><span class="bullet">      -</span> <span class="string">redis</span> </div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">UID=1000</span></div><div class="line"><span class="bullet">      -</span> <span class="string">GID=1000</span></div><div class="line"><span class="bullet">      -</span> <span class="string">UPLOAD_MAX_SIZE=30G</span> <span class="comment">#单个文件上传限制</span></div><div class="line"><span class="bullet">      -</span> <span class="string">APC_SHM_SIZE=128M</span></div><div class="line"><span class="bullet">      -</span> <span class="string">OPCACHE_MEM_SIZE=128</span></div><div class="line"><span class="bullet">      -</span> <span class="string">CRON_PERIOD=15m</span></div><div class="line"><span class="bullet">      -</span> <span class="string">TZ=Asia/Shanghai</span>    <span class="comment">#修改时区</span></div><div class="line"><span class="bullet">      -</span> <span class="string">ADMIN_USER=admin</span>            </div><div class="line"><span class="bullet">      -</span> <span class="string">ADMIN_PASSWORD=admin</span>        </div><div class="line"><span class="bullet">      -</span> <span class="string">DOMAIN=xxxx</span>         <span class="comment">#需要设置的域名</span></div><div class="line"><span class="bullet">      -</span> <span class="string">DB_TYPE=mysql</span></div><div class="line"><span class="bullet">      -</span> <span class="string">DB_NAME=nextcloud</span></div><div class="line"><span class="bullet">      -</span> <span class="string">DB_USER=nextcloud</span></div><div class="line"><span class="bullet">      -</span> <span class="string">DB_PASSWORD=xxxx</span>    <span class="comment">#数据库nextcloud用户密码</span></div><div class="line"><span class="bullet">      -</span> <span class="string">DB_HOST=nextcloud-db</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/docker/nextcloud/data:/data</span>    <span class="comment"># /data/docker/nextcloud/XX 是挂载卷的位置</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/docker/nextcloud/config:/config</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/docker/nextcloud/apps:/apps2</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/docker/nextcloud/themes:/nextcloud/themes</span></div><div class="line"><span class="attr">    expose:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">8888</span>  </div><div class="line">   </div><div class="line">   </div><div class="line"><span class="attr">  nextcloud-db:</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">mariadb:10</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span>  <span class="string">/data/docker/nextcloud/db:/var/lib/mysql</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=xxxx</span>    <span class="comment">#数据库root用户密码</span></div><div class="line"><span class="bullet">      -</span> <span class="string">MYSQL_DATABASE=nextcloud</span></div><div class="line"><span class="bullet">      -</span> <span class="string">MYSQL_USER=nextcloud</span></div><div class="line"><span class="bullet">      -</span> <span class="string">MYSQL_PASSWORD=xxxx</span>         <span class="comment">#数据库nextcloud用户密码</span></div><div class="line">    </div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">redis:alpine</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">redis</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span>  <span class="string">/data/docker/nextcloud/redis:/data</span></div></pre></td></tr></table></figure>
<p>上面的配置中使用了mysql作为数据库，redis作为缓存，加速同步效率，将容器的持久数据挂载到/data目录，没有使用默认启用的全文检索工具solr，没有将端口映射至宿主机。至于如何通过宿主机访问nextcloud，请参考第三章。</p>
</li>
<li><p>执行docker-compose命令部署docker容器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/nextcloud</div><div class="line">docker-compose up -d</div></pre></td></tr></table></figure>
</li>
<li><p>查看是否部署成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure>
<p><img src="../images/2017/nextcloud/1.png" alt="1"></p>
<p>如果三个容器的STATUS都是UP，证明容器启动成功</p>
</li>
<li><p>查看nextcloud容器ip</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect root_nextcloud_1</div></pre></td></tr></table></figure>
<p><img src="../images/2017/nextcloud/2.png" alt="2"></p>
<p>如上图所示，查询并记录nextcloud容器的ip，供第三章使用</p>
</li>
</ul>
<h2 id="2-2-设置开机启动"><a href="#2-2-设置开机启动" class="headerlink" title="2.2 设置开机启动"></a>2.2 设置开机启动</h2><ul>
<li><p>编辑 /etc/rc.local</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">service docker start</div><div class="line">cd /etc/nextcloud</div><div class="line">docker-compose start</div></pre></td></tr></table></figure>
</li>
<li><p>赋予可执行权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /etc/rc.d/rc.local</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="三、Nginx反向代理"><a href="#三、Nginx反向代理" class="headerlink" title="三、Nginx反向代理"></a>三、Nginx反向代理</h1><h2 id="3-1-域名解析"><a href="#3-1-域名解析" class="headerlink" title="3.1 域名解析"></a>3.1 域名解析</h2><p>将第二章docker-compose.yml 配置中的域名解析到服务器公网IP</p>
<p><img src="../images/2017/nextcloud/3.png" alt="3"></p>
<h2 id="3-2-申请CA证书"><a href="#3-2-申请CA证书" class="headerlink" title="3.2 申请CA证书"></a>3.2 申请CA证书</h2><p>有条件可以购买收费CA证书，这里使用了阿里云的免费证书，现在（2017.12）阿里云刻意“隐藏”了免费证书的位置，按以下操作可以找到：</p>
<ul>
<li>保护类型选择“1个域名”</li>
<li>选择品牌先选择赛门铁克Symantec</li>
<li>这时候才能看到证书类型出现“免费型DV SSL”</li>
</ul>
<p><img src="../images/2017/nextcloud/4.png" alt="4"></p>
<p>购买证书后需要进行验证，通过后才能下载使用</p>
<p><img src="../images/2017/nextcloud/5.png" alt="5"></p>
<p>下载证书请选择for Nginx，解压将其中两个文件（key和pem）拷贝至服务器” /etc/cert “目录</p>
<p><img src="../images/2017/nextcloud/6.png" alt="6"></p>
<h2 id="3-3-安装Nginx"><a href="#3-3-安装Nginx" class="headerlink" title="3.3 安装Nginx"></a>3.3 安装Nginx</h2><p>如果已经安装Nginx可以跳过该步骤，否则可以执行下面的命令安装nginx</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 设置rpm源</span></div><div class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</div><div class="line"><span class="meta">#</span><span class="bash"> 安装nginx</span></div><div class="line">sudo yum install -y nginx</div><div class="line"><span class="meta">#</span><span class="bash"> 开机自启动nginx</span></div><div class="line">systemctl enable nginx</div><div class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></div><div class="line">systemctl start nginx</div></pre></td></tr></table></figure>
<h2 id="3-4-配置Nginx"><a href="#3-4-配置Nginx" class="headerlink" title="3.4 配置Nginx"></a>3.4 配置Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>修改配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="section">http</span> &#123;</div><div class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></div><div class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></div><div class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</div><div class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</div><div class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</div><div class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</div><div class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</div><div class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</div><div class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</div><div class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</div><div class="line">    <span class="attribute">default_type</span>        application/octet-stream;</div><div class="line">   </div><div class="line">    <span class="attribute">proxy_buffering</span>    <span class="literal">off</span>;                       <span class="comment">#关闭代理缓存</span></div><div class="line">    <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span> <span class="number">23456</span> ssl ;                        <span class="comment">#监听端口为23456，并启用ssl</span></div><div class="line">        <span class="attribute">server_name</span> pan.xxx.com;                  <span class="comment">#域名</span></div><div class="line">        <span class="attribute">ssl_certificate</span>   /etc/cert/xxxxx.pem;    <span class="comment">#pem文件路径</span></div><div class="line">        <span class="attribute">ssl_certificate_key</span>  /etc/cert/xxxxx.key; <span class="comment">#key文件路径</span></div><div class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</div><div class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</div><div class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</div><div class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</div><div class="line">	  </div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">                <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</div><div class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</div><div class="line">                <span class="attribute">proxy_pass</span> http://172.18.0.4:8888;  <span class="comment">#填写nextcloud容器的ip，端口为8888</span></div><div class="line">                <span class="attribute">client_max_body_size</span>	<span class="number">30000m</span>;    <span class="comment">#允许用户上传文件的大小修改成30G</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重启nginx</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart nginx</div></pre></td></tr></table></figure>
<h2 id="3-5-开放防火墙端口"><a href="#3-5-开放防火墙端口" class="headerlink" title="3.5 开放防火墙端口"></a>3.5 开放防火墙端口</h2><p>执行命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=23456/tcp --permanent</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>打开23456端口以免访问受限。</p>
<h2 id="3-6-端口转发"><a href="#3-6-端口转发" class="headerlink" title="3.6 端口转发"></a>3.6 端口转发</h2><p>最后，我们还需要把路由器的23456端口转发至NextCloud服务器（如192.168.2.254），路由器不同，配置方式也不同，下图是H3路由器配置方式：</p>
<p><img src="../images/2017/nextcloud/10.png" alt="10"></p>
<p>到这里，我们就可以通过 <a href="https://pan.XXX.com:23456" target="_blank" rel="external">https://pan.XXX.com:23456</a>  访问NextCloud了，需要注意我们只配置了Nginx监听SSL，也就是输入URL时，不要忘记是https</p>
<p>需要提醒的是，如果服务器网络是动态IP，还需做DDNS，否则IP更换后，将不能通过域名访问NextCloud</p>
<h1 id="四、DDNS"><a href="#四、DDNS" class="headerlink" title="四、DDNS"></a>四、DDNS</h1><p>由于我们想用公司自己的二级域名，又有服务器，还有阿里云的SDK，所以我们没有使用花生壳等第三方解决方案，这里使用DDNS的方式来自<a href="https://github.com/rfancn/aliyun-ddns-client" target="_blank" rel="external">https://github.com/rfancn/aliyun-ddns-client</a></p>
<h2 id="4-1-创建阿里云AccessKey"><a href="#4-1-创建阿里云AccessKey" class="headerlink" title="4.1 创建阿里云AccessKey"></a>4.1 创建阿里云AccessKey</h2><ul>
<li><p>进入阿里云访问控制页面，新建domain用户，并自动生成AccessKey，确认后记录access_key和access_id，注意保密</p>
<p><img src="../images/2017/nextcloud/7.png" alt="7"></p>
</li>
<li><p>分配域名管理权限给domain用户</p>
<p><img src="../images/2017/nextcloud/8.png" alt="8"></p>
<p>​</p>
</li>
</ul>
<h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><ul>
<li><p>安装python的requests包</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y install epel-release</div><div class="line">yum install python-pip</div><div class="line">pip install requests</div></pre></td></tr></table></figure>
</li>
<li><p>下载源码到 /usr/local</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local</div><div class="line">wget https://github.com/rfancn/aliyun-ddns-client/archive/master.zip</div></pre></td></tr></table></figure>
</li>
<li><p>解压源码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install -y unzip</div><div class="line">unzip master.zip</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-3-配置"><a href="#4-3-配置" class="headerlink" title="4.3 配置"></a>4.3 配置</h2><ul>
<li><p>重命名ddns.conf.example</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/aliyun-ddns-client-master</div><div class="line">mv ddns.conf.example ddns.conf</div></pre></td></tr></table></figure>
</li>
<li><p>编辑ddns.service</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ddns.service</div></pre></td></tr></table></figure>
<p>修改WorkingDirectory</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Aliyun DDNS Client.</div><div class="line">Wants=network-online.target</div><div class="line">After=network.target network-online.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=simple</div><div class="line">WorkingDirectory=/usr/local/aliyun-ddns-client-master  #修改工作目录</div><div class="line">ExecStart=/usr/bin/python ddns.py</div></pre></td></tr></table></figure>
</li>
<li><p>复制服务文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp ddns.timer /usr/lib/systemd/system</div><div class="line">cp ddns.service /usr/lib/systemd/system</div></pre></td></tr></table></figure>
</li>
<li><p>修改ddns.conf</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ddns.conf</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[DEFAULT]</div><div class="line"><span class="meta">#</span><span class="bash"> 填写阿里云domain用户的access_id</span></div><div class="line">access_id=XXXX</div><div class="line"><span class="meta">#</span><span class="bash"> 填写阿里云domain用户的access_key</span></div><div class="line">access_key=XXXXX</div><div class="line"><span class="meta">#</span><span class="bash"> Optional: not used now</span></div><div class="line">interval=600</div><div class="line"><span class="meta">#</span><span class="bash"> Optional: turn on debug mode or not</span></div><div class="line">debug=true</div><div class="line"></div><div class="line">[DomainRecord1]</div><div class="line"><span class="meta">#</span><span class="bash"> 填写一级域名,如google.com</span></div><div class="line">domain=xxxx.com</div><div class="line"><span class="meta">#</span><span class="bash"> 填写子域名,如pan，注意不要写成pan.xxxx.com</span></div><div class="line">sub_domain=pan</div><div class="line"><span class="meta">#</span><span class="bash"> Required: resolve <span class="built_in">type</span>, now it only supports <span class="string">'A'</span></span></div><div class="line">type=A</div></pre></td></tr></table></figure>
</li>
<li><p>启动服务并验证配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/aliyun-ddns-client-master</div><div class="line">python ddns.py</div><div class="line"><span class="meta">#</span><span class="bash"> 如果显示  2017-12-26 15:28:15	[INFO]	Successfully updated DomainRecord[pan.xxxx.com]则环境正常</span></div><div class="line"></div><div class="line">systemctl daemon-reload</div><div class="line">systemctl start ddns.timer</div><div class="line"><span class="meta">#</span><span class="bash"> 开机自启动</span></div><div class="line">systemctl enable ddns.timer</div><div class="line"><span class="meta">#</span><span class="bash"> 查看服务状态</span></div><div class="line">systemctl status ddns.timer -l</div></pre></td></tr></table></figure>
<p>如果如下图所示，则服务正常：</p>
<p><img src="../images/2017/nextcloud/9.png" alt="9"></p>
</li>
</ul>
<p>最后的最后，我们可以在内网或者公网通过 <a href="https://pan.xxx.com:23456" target="_blank" rel="external">https://pan.xxx.com:23456</a> 访问NextCloud，初始管理员账号密码为admin，登陆后就可以配置和使用了。</p>

                    
                        
                    
                    
                        <p>
                            <a href="/nextcloud_with_docker/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/scrum_summary01/">
                            Scrum实施总结（一）
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-11-20T15:13:00+08:00">
	
		    11月 20, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/agile/">agile</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#一、团队简介"><span class="toc-text">一、团队简介</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-团队组成"><span class="toc-text">1.1 团队组成</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-使用工具"><span class="toc-text">1.2 使用工具</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#二、-实践总结：sprint-1-sprint-4"><span class="toc-text">二、 实践总结：sprint 1 - sprint 4</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#2-1-Sprint-1"><span class="toc-text">2.1 Sprint 1</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-1-1-迭代周期统计"><span class="toc-text">2.1.1 迭代周期统计</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-1-2-优点"><span class="toc-text">2.1.2 优点</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-1-3-问题"><span class="toc-text">2.1.3 问题</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-2-Sprint-2"><span class="toc-text">2.2 Sprint 2</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-1-迭代周期统计"><span class="toc-text">2.2.1 迭代周期统计</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-2-优点"><span class="toc-text">2.2.2 优点</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-3-问题"><span class="toc-text">2.2.3 问题</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-3-Spring-3"><span class="toc-text">2.3 Spring 3</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-3-1-迭代周期统计"><span class="toc-text">2.3.1 迭代周期统计</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-3-2-优点"><span class="toc-text">2.3.2 优点</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-3-3-成员评价和总结"><span class="toc-text">2.3.3 成员评价和总结</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-4-Sprint-4"><span class="toc-text">2.4 Sprint 4</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-4-1-迭代周期统计"><span class="toc-text">2.4.1 迭代周期统计</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-4-2-优点"><span class="toc-text">2.4.2 优点</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-4-3-问题"><span class="toc-text">2.4.3 问题</span></a></li></ol></li></ol></li></ol>
<h1 id="一、团队简介"><a href="#一、团队简介" class="headerlink" title="一、团队简介"></a>一、团队简介</h1><h2 id="1-1-团队组成"><a href="#1-1-团队组成" class="headerlink" title="1.1 团队组成"></a>1.1 团队组成</h2><p><strong>Dev Team：</strong></p>
<ul>
<li>后台开发 * 1</li>
<li>前端开发 * 1</li>
<li>客户端开发 * 1</li>
<li>测试 * 1</li>
</ul>
<p><strong>PO：</strong></p>
<ul>
<li>PO * 1</li>
<li>UI设计 * 1</li>
</ul>
<p><strong>Scrum Master：</strong></p>
<ul>
<li>scrum master * 1</li>
</ul>
<h2 id="1-2-使用工具"><a href="#1-2-使用工具" class="headerlink" title="1.2 使用工具"></a>1.2 使用工具</h2><ul>
<li>Leangoo</li>
<li>Jenkins</li>
<li>Selenium</li>
<li>TestStack.White</li>
</ul>
<h1 id="二、-实践总结：sprint-1-sprint-4"><a href="#二、-实践总结：sprint-1-sprint-4" class="headerlink" title="二、 实践总结：sprint 1 - sprint 4"></a>二、 实践总结：sprint 1 - sprint 4</h1><h2 id="2-1-Sprint-1"><a href="#2-1-Sprint-1" class="headerlink" title="2.1 Sprint 1"></a>2.1 Sprint 1</h2><p>整个项目团队是新组建的，没有实施敏捷的经验</p>
<h3 id="2-1-1-迭代周期统计"><a href="#2-1-1-迭代周期统计" class="headerlink" title="2.1.1 迭代周期统计"></a>2.1.1 迭代周期统计</h3><p><strong>Sprint长度：</strong>2 week</p>
<p><strong>统计：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>WEB</th>
<th>总计</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能点</td>
<td>42</td>
<td>42</td>
</tr>
<tr>
<td>工作量</td>
<td>61</td>
<td>61</td>
</tr>
<tr>
<td>bug</td>
<td>未做探索性测试</td>
<td></td>
</tr>
<tr>
<td>完成功能点</td>
<td>39</td>
<td>39</td>
</tr>
</tbody>
</table>
<p><strong>结果：</strong></p>
<p>功能没有完成，迭代失败</p>
<h3 id="2-1-2-优点"><a href="#2-1-2-优点" class="headerlink" title="2.1.2 优点"></a>2.1.2 优点</h3><ul>
<li>团队对于敏捷的兴趣比较高，工作积极性高</li>
</ul>
<h3 id="2-1-3-问题"><a href="#2-1-3-问题" class="headerlink" title="2.1.3 问题"></a>2.1.3 问题</h3><ul>
<li><p><strong>问题暴露不及时：</strong>由于团队刚刚组建，成员彼此不熟悉，遇到问题不习惯当面沟通</p>
<p>在Sprint3开始后（一个月），该情况明显好转，遇到问题时，开发人员逐渐习惯整个团队来讨论解决问题</p>
</li>
<li><p><strong>没有做探索性测试：</strong>sprint1中，只针对AC做自动化测试，忽略了探索性测试</p>
<p>Sprint2开始后，补充探索性测试</p>
</li>
<li><p><strong>发布时间长：</strong>没有为开发、测试、生产环境做独立配置，容易出错</p>
<p>Sprint2开始后，上jenkins持续集成，Sprint3开始后，整体正常</p>
</li>
<li><p><strong>开发团队不习惯任务领取</strong></p>
<p>由于Sprint1没有持续集成，发布麻烦，所以开发不愿意逐个领任务。要求Sprint2开始后，开发人员要按优先级逐个领取任务并签名</p>
</li>
<li><p><strong>演示太慢：</strong>花费2个小时</p>
<p>Sprint2开始后，由测试人员来演示，由于测试人员对AC和流程比较熟悉，演示速度能控制到1小时左右</p>
</li>
<li><p><strong>不会看燃尽图：</strong>PO和开发不会看燃尽图，不会评估开发进度</p>
<p>Sprint2教会团队和PO通过Leangoo查看燃尽图</p>
</li>
<li><p><strong>立会内容表达不准确：</strong>开发团队每日立会讲述的内容不准确</p>
<p>制定了一个参考模板：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">功能</div><div class="line"></div><div class="line">今天在XX配合下做完了XX相关的X个功能的开发/测试，工作量共计X，是否达成目标</div><div class="line">今天还在做XX相关的X个功能，工作量共计X</div><div class="line">明天会做完XX相关的X个功能，工作量为X</div><div class="line">存在什么问题，没打成目标的原因 </div><div class="line"></div><div class="line">任务</div><div class="line"></div><div class="line">今天做完了哪些任务，正在做哪些任务</div><div class="line">明天要做完的任务，任务预期是什么时间完成</div><div class="line">存在什么问题</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-2-Sprint-2"><a href="#2-2-Sprint-2" class="headerlink" title="2.2 Sprint 2"></a>2.2 Sprint 2</h2><h3 id="2-2-1-迭代周期统计"><a href="#2-2-1-迭代周期统计" class="headerlink" title="2.2.1 迭代周期统计"></a>2.2.1 迭代周期统计</h3><p><strong>Sprint长度：</strong>2 week</p>
<p><strong>统计：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>WEB</th>
<th>总计</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能点</td>
<td>39</td>
<td>39</td>
</tr>
<tr>
<td>工作量</td>
<td>64</td>
<td>64</td>
</tr>
<tr>
<td>bug</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>完成功能点</td>
<td>20</td>
<td>20</td>
</tr>
</tbody>
</table>
<p><strong>结果：</strong></p>
<p>功能没有完成，迭代失败</p>
<h3 id="2-2-2-优点"><a href="#2-2-2-优点" class="headerlink" title="2.2.2 优点"></a>2.2.2 优点</h3><ul>
<li>团队沟通和配合更默契</li>
<li>上了Jenkins，发布更快捷</li>
</ul>
<h3 id="2-2-3-问题"><a href="#2-2-3-问题" class="headerlink" title="2.2.3 问题"></a>2.2.3 问题</h3><ul>
<li><p><strong>团队对全量回归测试认识不足：</strong>验收会前2个小时，团队修复2个bug，之后没有及时做全量回归测试，导致验收时19个功能没通过验收</p>
<p>在Sprint3开始后，将全量回归测试加入jenkins持续集成中</p>
</li>
<li><p><strong>开发人员不按需求擅自增改功能</strong></p>
<p>要求开发人员遇到有争议的需求，必须和PO商量解决，不能擅自增改AC</p>
</li>
<li><p><strong>大任务拆解：</strong>对于网站页面UI这种比较大的任务，不方便评估工作量，也不方便及时测试</p>
<p>工作量过大的任务，根据模块、页面拆解成子任务</p>
</li>
<li><p><strong>测试环境预览：</strong>PO和UI设计也想看到测试环境，好尽早判断开发是否复合需求</p>
<p>给PO权限，让PO和设计人员也参与到测试中</p>
</li>
<li><p><strong>优先级调整和需求替换：</strong>PO刚开始不太能把控需求的优先级，Sprint开始前，如何确认和调整？PO不清楚如果有需求变化，需要改变或增加功能，需要怎么做？</p>
<ul>
<li>在下一个Sprint开始前，PO先大概罗列近期要做的功能，开发先写出AC并评估出工作量，PO根据工作量再考虑下一个Sprint要做的功能，从而重排PB优先级。在下一个Spring计划会上，确定该周期要做的功能。</li>
<li>一般不建议在迭代周期内增改需求，如果迭代开始后，一定有需求需要修改或增加，一般有两个方式：等量替换和请客吃饭。从现在的周期内拿出等量或工作量略大于需要修改增加的功能，保证迭代能按期完成。或PO请团队吃饭，让团队加班完成。但不论哪一种，都不能经常使用。</li>
</ul>
</li>
</ul>
<h2 id="2-3-Spring-3"><a href="#2-3-Spring-3" class="headerlink" title="2.3 Spring 3"></a>2.3 Spring 3</h2><h3 id="2-3-1-迭代周期统计"><a href="#2-3-1-迭代周期统计" class="headerlink" title="2.3.1 迭代周期统计"></a>2.3.1 迭代周期统计</h3><p><strong>Sprint长度：</strong>2 week</p>
<p><strong>统计：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>WEB</th>
<th>CLIENT</th>
<th>总计</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能点</td>
<td>35</td>
<td>36</td>
<td>71</td>
</tr>
<tr>
<td>工作量</td>
<td>67</td>
<td>70</td>
<td>137</td>
</tr>
<tr>
<td>bug</td>
<td>13</td>
<td>2</td>
<td>15</td>
</tr>
<tr>
<td>完成功能点</td>
<td>35</td>
<td>36</td>
<td>71</td>
</tr>
</tbody>
</table>
<p><strong>结果：</strong></p>
<p>迭代成功</p>
<h3 id="2-3-2-优点"><a href="#2-3-2-优点" class="headerlink" title="2.3.2 优点"></a>2.3.2 优点</h3><ul>
<li>迭代周期中替换了部分需求，没有影响到迭代周期</li>
<li>自动化测试也集成到jenkins中，整套流程正规化</li>
</ul>
<h3 id="2-3-3-成员评价和总结"><a href="#2-3-3-成员评价和总结" class="headerlink" title="2.3.3 成员评价和总结"></a>2.3.3 成员评价和总结</h3><ul>
<li>开发评价Sprint1是忙，很多技术债要偿还，要适应新的开发模式；Sprint2是茫，有点不知所措，团队和协作不流畅；Sprint3团队已经逐渐熟悉这种模式</li>
<li>PO已经找到和开发团队沟通的方法，PO遇到疑问时，如果不是很重要的，会在每天下午5点后空闲时间和开发沟通，不打断开发人员正常的节奏</li>
</ul>
<h2 id="2-4-Sprint-4"><a href="#2-4-Sprint-4" class="headerlink" title="2.4 Sprint 4"></a>2.4 Sprint 4</h2><h3 id="2-4-1-迭代周期统计"><a href="#2-4-1-迭代周期统计" class="headerlink" title="2.4.1 迭代周期统计"></a>2.4.1 迭代周期统计</h3><p><strong>Sprint长度：</strong>1 week</p>
<p><strong>统计：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>WEB</th>
<th>CLIENT</th>
<th>总计</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能点</td>
<td>12</td>
<td>27</td>
<td>39</td>
</tr>
<tr>
<td>工作量</td>
<td>35</td>
<td>17</td>
<td>52</td>
</tr>
<tr>
<td>bug</td>
<td>0</td>
<td>9</td>
<td>9</td>
</tr>
<tr>
<td>完成功能点</td>
<td>13</td>
<td>27</td>
<td>40</td>
</tr>
</tbody>
</table>
<p><strong>结果：</strong></p>
<p>迭代成功</p>
<h3 id="2-4-2-优点"><a href="#2-4-2-优点" class="headerlink" title="2.4.2 优点"></a>2.4.2 优点</h3><ul>
<li>从Spring4开始，尝试将迭代周期长度变成1周，以适应产品发布的实际情况，过度良好</li>
<li>PO和设计人员也“参与”到测试中</li>
</ul>
<h3 id="2-4-3-问题"><a href="#2-4-3-问题" class="headerlink" title="2.4.3 问题"></a>2.4.3 问题</h3><ul>
<li><p><strong>Scrum的节奏比较快，团队压力比较大，容易疲劳</strong></p>
<p>在Spring4后，整个团队休息一周，调整节奏、偿还技术债</p>
</li>
</ul>

                    
                        
                    
                    
                        <p>
                            <a href="/scrum_summary01/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/jenkins04_role/">
                            持续集成CI实施指南四--jenkins用户权限管理
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-11-18T10:12:00+08:00">
	
		    11月 18, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/agile/">agile</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#一、使用插件"><span class="toc-text">一、使用插件</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-安装插件"><span class="toc-text">1.1 安装插件</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-启用插件"><span class="toc-text">1.2 启用插件</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#二、配置权限"><span class="toc-text">二、配置权限</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#2-1-角色管理"><span class="toc-text">2.1 角色管理</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-2-用户管理"><span class="toc-text">2.2 用户管理</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-3-分配角色"><span class="toc-text">2.3 分配角色</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#三、权限问题"><span class="toc-text">三、权限问题</span></a></li></ol>
<p>jenkins默认的权限管理不支持用户分组或者按项目划分权限，所以如果团队有这种需求，需要安装插件。下面将介绍使用插件来实现用户角色的管理。</p>
<h1 id="一、使用插件"><a href="#一、使用插件" class="headerlink" title="一、使用插件"></a>一、使用插件</h1><h2 id="1-1-安装插件"><a href="#1-1-安装插件" class="headerlink" title="1.1 安装插件"></a>1.1 安装插件</h2><p>安装Role-based Authorization Strategy插件</p>
<p><img src="../images/2017/jenkins04_role/1.png" alt="1"></p>
<h2 id="1-2-启用插件"><a href="#1-2-启用插件" class="headerlink" title="1.2 启用插件"></a>1.2 启用插件</h2><p>进入“系统管理”的“Configure Global Security”界面，配置如下：</p>
<p><img src="../images/2017/jenkins04_role/2.png" alt="2"></p>
<ul>
<li>启动安全</li>
<li>使用Jenkins专有用户数据库</li>
<li>取消勾选“允许用户注册”，一般由管理员分配</li>
<li>使用“Role-Based Strategy”策略</li>
</ul>
<p><strong>【注意】：</strong>使用Role-Based Strategy策略后，先不要注销管理员账号，否则会由于后续角色权限没配置而无法登陆，如果遇到这种问题，参考第三章</p>
<h1 id="二、配置权限"><a href="#二、配置权限" class="headerlink" title="二、配置权限"></a>二、配置权限</h1><p>正确安装了插件后，就能在“系统管理”中看到“Manage and Assign Roles”</p>
<p><img src="../images/2017/jenkins04_role/3.png" alt="3"></p>
<h2 id="2-1-角色管理"><a href="#2-1-角色管理" class="headerlink" title="2.1 角色管理"></a>2.1 角色管理</h2><ul>
<li><p>进入“Manage Roles”</p>
<p><img src="../images/2017/jenkins04_role/4.png" alt="4"></p>
</li>
<li><p>根据需要编辑Global roles</p>
<p><img src="../images/2017/jenkins04_role/5.png" alt="5"></p>
<ul>
<li>这里创建两个全局角色</li>
<li>admin有所有权限</li>
<li>project用于分配给项目组，这里只开放只读权限</li>
</ul>
</li>
<li><p>根据需要编辑Project roles</p>
<p><img src="../images/2017/jenkins04_role/6.png" alt="6"></p>
<ul>
<li>这里通过编写表达式让角色拥有对应项目的权限</li>
<li>如果要匹配前缀是“Dent”的项目，表达式为“Dent.*”，和一般通配符表达式不同的是，星号前面还有一个点，不要忘记了</li>
</ul>
</li>
</ul>
<p>需要注意Project roles和Global roles配置的project不同，在2.3章节中会进一步解释。</p>
<h2 id="2-2-用户管理"><a href="#2-2-用户管理" class="headerlink" title="2.2 用户管理"></a>2.2 用户管理</h2><p>创建用户的步骤非常简单，如下所示：</p>
<ul>
<li><p>进入“系统管理”的“管理用户”</p>
<p><img src="../images/2017/jenkins04_role/7.png" alt="7"></p>
</li>
<li><p>左边栏“新建用户”，按内容填写</p>
<p><img src="../images/2017/jenkins04_role/8.png" alt="8"></p>
</li>
</ul>
<h2 id="2-3-分配角色"><a href="#2-3-分配角色" class="headerlink" title="2.3 分配角色"></a>2.3 分配角色</h2><p>编辑好角色和用户后，现在把它们关联起来，让权限生效：</p>
<ul>
<li><p>同样进入“系统管理”的“Manage and Assign Roles”，点击“Assign Roles”</p>
<p><img src="../images/2017/jenkins04_role/9.png" alt="9"></p>
</li>
<li><p>参考下面的配置</p>
<p><img src="../images/2017/jenkins04_role/10.png" alt="10"></p>
<ul>
<li>在Global roles中，添加所有的用户，然后分配对应的全局角色</li>
<li>在Item roles中，也要添加所有的用户（管理员用户可以不用分配），分配对应的项目角色</li>
</ul>
<p>这里解释一下，所有的用户都分配了两个角色，Global roles和Item roles，很容易不理解或者容易犯错的是只给一般用户分配Item roles，也就是项目角色，这样分配后，用户登陆会提示没有Overall的Read权限，也就是说用户虽然有某个项目的权限，他可以通过某个项目的URL去访问，但没有总体预览权限，没法进入首页。所以必须给用户配置全局角色，以获得Overall权限。</p>
</li>
</ul>
<h1 id="三、权限问题"><a href="#三、权限问题" class="headerlink" title="三、权限问题"></a>三、权限问题</h1><p>在配置权限时，如果因为配置不当，导致管理员账号不能登陆jenkins，可以按下面的方式操作：</p>
<ul>
<li><p>编辑config.xml</p>
<ul>
<li>你可以在宿主机的映射位置如“/var/lib/docker/volumes/jenkins/_data/”找到该文件</li>
<li>或者在docker容器内的“/var/jenkins_home”找到</li>
</ul>
</li>
<li><p>修改useSecurity为false</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">useSecurity</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useSecurity</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>删除authorizationStrategy、securityRealm节点</p>
</li>
<li><p>重启jenkins for docker</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker stop myjenkins</div><div class="line">docker start myjenkins</div></pre></td></tr></table></figure>
</li>
</ul>
<p>上面的操作可以清空权限系统，用管理员登录后重新配置即可。</p>
<p>jenkins四期介绍到此就结束了，然而jenkins在实际项目中的应用功能还远远不止如此，pipline，运维监控等高级玩法，jenkins+交通灯、报警器的搞怪玩法，以后有机会再整理分享出来。</p>

                    
                        
                    
                    
                        <p>
                            <a href="/jenkins04_role/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/jenkins03_test/">
                            持续集成CI实施指南三--jenkins集成测试
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-11-15T13:43:00+08:00">
	
		    11月 15, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/agile/">agile</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#一、节点管理"><span class="toc-text">一、节点管理</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-添加节点"><span class="toc-text">1.1 添加节点</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-节点服务器配置"><span class="toc-text">1.2 节点服务器配置</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#二、-测试项目"><span class="toc-text">二、 测试项目</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#三、测试报告插件"><span class="toc-text">三、测试报告插件</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#3-1-Publish-HTML-reports插件使用"><span class="toc-text">3.1 Publish HTML reports插件使用</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-2-测试报告无法加载CSS的问题"><span class="toc-text">3.2 测试报告无法加载CSS的问题</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-2-1-临时方案"><span class="toc-text">3.2.1 临时方案</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-2-2-永久方案"><span class="toc-text">3.2.2 永久方案</span></a></li></ol></li></ol></li></ol>
<p>前面几篇文章主要讲了jenkins搭建和项目构建相关内容，已经能满足自动编译，自动部署等功能，但还差一项很重要的工作：自动化测试！</p>
<p>作为敏捷开发必不可少的工作，我们需要每次构建后都要跑一遍自动化测试，做全量回归，如果有需要还有冒烟测试。那么下面就来介绍如何实现每次构建项目后自动执行一个自动化测试任务。</p>
<h1 id="一、节点管理"><a href="#一、节点管理" class="headerlink" title="一、节点管理"></a>一、节点管理</h1><p>一般来说，测试都基于windows操作系统，比如用selenium编写web项目的自动化测试，用teststack.white编写client项目自动化测试。而我们的jenkins是通过docker容器安装部署的，实际是linux环境，这里就会遇到操作系统不兼容的问题。</p>
<p>事实上，不仅仅是需要测试才会遇到这种情况，如果我们要通过jenkins for docker部署一个.net framework 项目，也是同样的问题。</p>
<p>但jenkins提供了节点管理的功能，能搭建起一个跨系统跨平台的集群，既能解决系统兼容问题，也能解决单点jenkins性能不足的问题。</p>
<h2 id="1-1-添加节点"><a href="#1-1-添加节点" class="headerlink" title="1.1 添加节点"></a>1.1 添加节点</h2><ul>
<li><p>jenkins“系统管理”–“管理节点” 进入节点管理页面，点左边栏“新建节点”</p>
<p><img src="../images/2017/jenkins03_test/1.png" alt="1"></p>
</li>
<li><p>填写节点名称，选择“Permanent Agent”</p>
<p><img src="../images/2017/jenkins03_test/2.png" alt="2"></p>
</li>
<li><p>填写配置如下</p>
<p><img src="../images/2017/jenkins03_test/3.png" alt="3"></p>
<ul>
<li>of executors：并发量，可同时执行job的数量，默认是1，根据需要填写</li>
<li>远程工作目录：节点服务器的工作目录，目录不要有中文</li>
<li>用法：默认为“尽可能使用该节点”，修改为“只允许运行绑定到这台机器的Job”</li>
<li>Environment variables：环境变量，如图所示，需要增加一个键值对，表示把节点服务器的PATH环境变量赋值到jenkins节点中，如果不配置环境变量，新建的这个节点将不能读取到节点服务器上的PATH环境，比如不能启动python命令</li>
</ul>
</li>
<li><p>save后显示如下界面，点“Launch”按钮，下载“slave-agent.jnlp”文件</p>
<p><img src="../images/2017/jenkins03_test/4.png" alt="4"></p>
</li>
</ul>
<h2 id="1-2-节点服务器配置"><a href="#1-2-节点服务器配置" class="headerlink" title="1.2 节点服务器配置"></a>1.2 节点服务器配置</h2><p>登陆需要用于执行测试的windows服务器</p>
<ul>
<li>安装JDK</li>
<li>创建工作目录，和1.1配置的远程工作目录一致，如“d:\jenkins”</li>
<li>拷贝1.1章节最后一步下载的“slave-agent.jnlp”文件到该服务器，可以放到工作目录下，目录不要有中文</li>
<li>运行“slave-agent.jnlp”即可</li>
</ul>
<p>可将“slave-agent.jnlp”文件放在启动项里，使其开机启动，或者做成服务</p>
<p>成功运行后可在jenkins节点管理看到该节点，并且状态由红字提示“不在线”变成正常</p>
<h1 id="二、-测试项目"><a href="#二、-测试项目" class="headerlink" title="二、 测试项目"></a>二、 测试项目</h1><p>添加测试项目和添加普通项目类似：</p>
<ul>
<li><p>添加自由软件风格项目</p>
</li>
<li><p>指定第一章创建的节点执行该项目</p>
<p><img src="../images/2017/jenkins03_test/5.png" alt="5"></p>
</li>
<li><p>添加测试项目的git源</p>
<p><img src="../images/2017/jenkins03_test/6.png" alt="6"></p>
</li>
<li><p>配置构建触发器</p>
<p><img src="../images/2017/jenkins03_test/7.png" alt="7"></p>
<ul>
<li>勾选“Build after other projects are built”，选择“Trigger only if build is stable”，填写前置项目名称，表示当这些前置项目成功构建后，执行这个项目</li>
<li>根据需要，勾选“Build when a change is pushed to GitLab.”，用于配置Gitlab webhook触发项目，可参考该系列第二篇文章 <a href="http://wurang.net/jenkins02_use/" target="_blank" rel="external">http://wurang.net/jenkins02_use/</a></li>
</ul>
</li>
<li><p>构建环境同样根据实际需要配置</p>
<p><img src="../images/2017/jenkins03_test/8.png" alt="8"></p>
</li>
<li><p>添加构建脚本</p>
<p><img src="../images/2017/jenkins03_test/9.png" alt="9"></p>
</li>
<li><p>最后构建后发送邮件通知</p>
</li>
</ul>
<p>这里容易踩坑，找不到python命令，请参考1.2章节查看环境变量键值对设置。</p>
<p>另外生成的测试报告不方便查看，需要在节点服务器上搭建iis或者nginx，这对于jenkins集群来说并不是很好的做法。所以我们还需一个测试报告的插件。</p>
<h1 id="三、测试报告插件"><a href="#三、测试报告插件" class="headerlink" title="三、测试报告插件"></a>三、测试报告插件</h1><h2 id="3-1-Publish-HTML-reports插件使用"><a href="#3-1-Publish-HTML-reports插件使用" class="headerlink" title="3.1 Publish HTML reports插件使用"></a>3.1 Publish HTML reports插件使用</h2><ul>
<li><p>安装Publish HTML reports插件</p>
</li>
<li><p>编辑jenkins测试项目</p>
</li>
<li><p>构建后操作增加Publish HTML reports</p>
<p><img src="../images/2017/jenkins03_test/10.png" alt="10"></p>
<ul>
<li>HTML directory to archive：测试报告目录，相对于项目工作目录</li>
<li>Index page[s]：测试报告页面</li>
<li>Report title：报告名称</li>
<li>Keep past HTML reports：保留旧的测试报告，默认不保留</li>
<li>Always link to last build：始终连接到最新的构建</li>
<li>Include files：包含文件，如果测试报告文件夹内还有css或js文件，需要根据需要填写</li>
</ul>
</li>
<li><p>配置完成后，重新构建测试项目，就可以在项目左边栏点击“HTML Report”查看测试报告了，如果保留了旧的测试报告，也可以在这里选择查看</p>
<p><img src="../images/2017/jenkins03_test/11.png" alt="11"></p>
</li>
<li><p>除了上面的方式查看测试报告外，还可以使用URL：项目地址/HTML_Report/ 来访问，比如在邮件通知模板里用下面的代码在邮件显示测试报告地址</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;PROJECT_URL&#125;HTML_Report</div></pre></td></tr></table></figure>
<p>修改该测试项目的邮件通知模板，拷贝“系统设置”里默认的邮件模板内容，加入自定义的代码</p>
<p><img src="../images/2017/jenkins03_test/12.png" alt="12"></p>
</li>
</ul>
<h2 id="3-2-测试报告无法加载CSS的问题"><a href="#3-2-测试报告无法加载CSS的问题" class="headerlink" title="3.2 测试报告无法加载CSS的问题"></a>3.2 测试报告无法加载CSS的问题</h2><p>如果测试报告用到了CSS和JS，即使我们在3.1章节中配置了“Include files”，还是不能正常加载测试报告，会丢失CSS和JS文件，控制台报错跨域问题。这是因为Jenkins由java开发，默认对跨域做了安全限制，这是jenkins的CSP(Content Security Policy)默认配置的，配置项为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sandbox; default-src &apos;none&apos;; img-src &apos;self&apos;; style-src &apos;self&apos;;</div></pre></td></tr></table></figure>
<p>在这种配置下，HTML内联样式，js，ajax都不可以使用。</p>
<p>解决这个问题的方式有两种，归根到底都是修改CSP：</p>
<h3 id="3-2-1-临时方案"><a href="#3-2-1-临时方案" class="headerlink" title="3.2.1 临时方案"></a>3.2.1 临时方案</h3><ul>
<li><p>进入Jenkins脚本命令行</p>
<p><img src="../images/2017/jenkins03_test/13.png" alt="13"></p>
</li>
<li><p>输入以下命令并运行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.setProperty("hudson.model.DirectoryBrowserSupport.CSP", "")</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>PS：需要注意</strong></p>
<ul>
<li>执行完命令后再次构建测试项目，对新生成的测试报告才有效</li>
<li>重启jenkins后配置将失效</li>
</ul>
<p>结合之前的项目配置经验，我们也可以创建一个专门用来自动执行这个脚本的项目，添加触发器，每次jenkins启动后，就执行项目。让它变成一个“永久”方案。</p>
<h3 id="3-2-2-永久方案"><a href="#3-2-2-永久方案" class="headerlink" title="3.2.2 永久方案"></a>3.2.2 永久方案</h3><p>由于上面那个“永久”方案操作起来有点麻烦，还不能治本，所以我们还是考虑其他方式。</p>
<p>还记得第一篇文章<a href="http://wurang.net/jenkins01_docker/" target="_blank" rel="external">http://wurang.net/jenkins01_docker/</a> 关于Dockerfile里有一段代码吗？</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">RUN</span><span class="bash"> rm -f /etc/localtime &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  </span></div><div class="line"><span class="bash"><span class="comment"># 设置环境变量，设置时区和降低安全配置以允许查看测试报告时访问到css</span></span></div><div class="line"><span class="bash">ENV JAVA_OPTS=<span class="string">"-Duser.timezone=Asia/Shanghai -Dhudson.model.DirectoryBrowserSupport.CSP=\"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';\""</span>                                                                </span></div><div class="line"><span class="bash">USER jenkins</span></div></pre></td></tr></table></figure>
<p>设置了java的环境变量JAVA_OPTS，其中就包含了CSP的修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dhudson.model.DirectoryBrowserSupport.CSP=\&quot;default-src &apos;self&apos;; script-src &apos;self&apos; &apos;unsafe-inline&apos; &apos;unsafe-eval&apos;; style-src &apos;self&apos; &apos;unsafe-inline&apos;;\&quot;</div></pre></td></tr></table></figure>
<p>所以我们在制作jenkins镜像的时候，从根本上就解决了问题。</p>
<p>至此，jenkins已经覆盖了编译、部署、测试整个软件开发流程。下一篇，将会介绍一下jenkins 的用户和项目权限管理。</p>

                    
                        
                    
                    
                        <p>
                            <a href="/jenkins03_test/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/jenkins02_use/">
                            持续集成CI实施指南二--Jenkins使用示例
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-11-06T15:36:00+08:00">
	
		    11月 06, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/agile/">agile</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#一、-插件"><span class="toc-text">一、 插件</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-进入插件中心"><span class="toc-text">1.1 进入插件中心</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-更新插件"><span class="toc-text">1.2 更新插件</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-3-安装插件"><span class="toc-text">1.3 安装插件</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-4-卸载与降级插件"><span class="toc-text">1.4 卸载与降级插件</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-5-需要的插件"><span class="toc-text">1.5 需要的插件</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#二、-使用示例"><span class="toc-text">二、 使用示例</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#2-1-创建项目"><span class="toc-text">2.1 创建项目</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-2-源码管理"><span class="toc-text">2.2 源码管理</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-3-构建触发器"><span class="toc-text">2.3 构建触发器</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-4-构建脚本"><span class="toc-text">2.4 构建脚本</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-5-构建环境"><span class="toc-text">2.5 构建环境</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-5-1-Delete-workspace-before-build-starts-排除文件夹"><span class="toc-text">2.5.1 Delete workspace before build starts 排除文件夹</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-5-2-Console-Output日志加时间戳"><span class="toc-text">2.5.2 Console Output日志加时间戳</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-6-构建后发布项目"><span class="toc-text">2.6 构建后发布项目</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-6-1-设置SSH-Server"><span class="toc-text">2.6.1 设置SSH Server</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-6-2-发布到SSH-Server"><span class="toc-text">2.6.2 发布到SSH Server</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-7-构建后邮件通知"><span class="toc-text">2.7 构建后邮件通知</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-7-1-配置Extended-E-mail-Notification"><span class="toc-text">2.7.1 配置Extended E-mail Notification</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-7-2-在项目中使用Extended-E-mail-Notification"><span class="toc-text">2.7.2 在项目中使用Extended E-mail Notification</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#三、-其他"><span class="toc-text">三、 其他</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#3-1-SSH-Server-root权限执行命令或脚本"><span class="toc-text">3.1 SSH Server root权限执行命令或脚本</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-2-jenkins工作目录相关介绍"><span class="toc-text">3.2 jenkins工作目录相关介绍</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-3-pm2相关知识介绍"><span class="toc-text">3.3 pm2相关知识介绍</span></a></li></ol></li></ol>
<h1 id="一、-插件"><a href="#一、-插件" class="headerlink" title="一、 插件"></a>一、 插件</h1><p>正式介绍使用之前，还需要准备安装一些插件，插件中心使用操作如下：</p>
<h2 id="1-1-进入插件中心"><a href="#1-1-进入插件中心" class="headerlink" title="1.1 进入插件中心"></a>1.1 进入插件中心</h2><p><img src="..\images\2017\jenkins02_use\1.png" alt="1"></p>
<h2 id="1-2-更新插件"><a href="#1-2-更新插件" class="headerlink" title="1.2 更新插件"></a>1.2 更新插件</h2><p><img src="..\images\2017\jenkins02_use\2.png" alt="2"></p>
<h2 id="1-3-安装插件"><a href="#1-3-安装插件" class="headerlink" title="1.3 安装插件"></a>1.3 安装插件</h2><p><img src="..\images\2017\jenkins02_use\3.png" alt="3"></p>
<h2 id="1-4-卸载与降级插件"><a href="#1-4-卸载与降级插件" class="headerlink" title="1.4 卸载与降级插件"></a>1.4 卸载与降级插件</h2><p><img src="..\images\2017\jenkins02_use\4.png" alt="4"></p>
<h2 id="1-5-需要的插件"><a href="#1-5-需要的插件" class="headerlink" title="1.5 需要的插件"></a>1.5 需要的插件</h2><ul>
<li>GitLab Plugin</li>
<li>Gitlab Hook Plugin</li>
<li>Email Extension Plugin (默认安装)</li>
<li>Publish Over SSH</li>
<li>Timestamper (默认安装)</li>
<li>Workspace Cleanup Plugin (默认安装)</li>
</ul>
<h1 id="二、-使用示例"><a href="#二、-使用示例" class="headerlink" title="二、 使用示例"></a>二、 使用示例</h1><p><strong>注：示例为dotnet core项目和nodejs项目，项目来源为Gitlab</strong></p>
<h2 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h2><p>创建项目如下图所示，选择自由风格项目</p>
<p><img src="..\images\2017\jenkins02_use\5.png" alt="5"></p>
<h2 id="2-2-源码管理"><a href="#2-2-源码管理" class="headerlink" title="2.2 源码管理"></a>2.2 源码管理</h2><p><img src="..\images\2017\jenkins02_use\6.png" alt="6"></p>
<p>选择git源，Repo URL建议使用SSH地址，这时会提示没有权限，因为我们还没有将jenkins的public key添加到gitlab上。所以我们需要先拿到jenkins的public key：</p>
<ul>
<li><p>在宿主机上执行命令，其中myjenkins是容器名称</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it myjenkins /bin/bash</div></pre></td></tr></table></figure>
</li>
<li><p>进入jenkins容器后执行命令创建一对ssh的key</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
</li>
<li><p>一路回车键，即可完成key的创建工作，这时我们进入默认目录查看</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>会出现两个文件，一个是’id_rsa’还有一个是’id_rsa.pub’，我们需要查看’id_rsa.pub’文件，并记录下来</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat id_rsa.pub</div></pre></td></tr></table></figure>
<p>拷贝上面的文件内容，粘贴到记事本或其他文件管理软件并保存（后续操作仍会用到） 如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-rsa xxxxxxxxxxxjenkins@xxxxxx</div></pre></td></tr></table></figure>
</li>
<li><p>登陆gitlab账号（不要使用个人账号，建议使用部门公共账号、管理员账号），进入设置页面的’SSH KEYS’选项卡，填入拷贝好的public key,然后点’Add key’保存</p>
<p><img src="..\images\2017\jenkins02_use\7.png" alt="7"></p>
</li>
<li><p>再回到jenkins，点击’Add’添加认证方式</p>
<p><img src="..\images\2017\jenkins02_use\8.png" alt="8"></p>
</li>
<li><p>类型选为’SSH Username with private key’，Private Key选为’From the jenkins master ~/.ssh’，Username和Description可选填，用于备注，然后点’Add’完成添加</p>
<p><img src="..\images\2017\jenkins02_use\9.png" alt="9"></p>
</li>
<li><p>使用上面新建的认证方式后，原来红色的报错提醒就消失了，表示认证通过。最后修改一下需要拉取的分支，默认是’master’分支，我这里根据需要改成了’test’分支</p>
<p><img src="..\images\2017\jenkins02_use\10.png" alt="10"></p>
</li>
</ul>
<p>上面的配置完成后，jenkins就能从gitlab拉取项目了，可以在项目主菜单左边栏选择’立即构建’，看看是否成功：</p>
<p><img src="..\images\2017\jenkins02_use\11.png" alt="11"></p>
<h2 id="2-3-构建触发器"><a href="#2-3-构建触发器" class="headerlink" title="2.3 构建触发器"></a>2.3 构建触发器</h2><p>通过2.2章节的配置，我们能够点击’立即构建’来主动开始一次构建，实际项目中，我们可能希望提交代码后，自动开始构建，这时需要配置构建触发器。下面演示gitlab触发器配置（需要安装Gitlab Hook Plugin插件）：</p>
<p><img src="..\images\2017\jenkins02_use\12.png" alt="12"></p>
<ul>
<li><p>勾选’Build when a change is pushed to GitLab’，记录后面的URL，如本例中的’<a href="http://192.168.2.200:8081/project/Dent_WebSite_Test" target="_blank" rel="external">http://192.168.2.200:8081/project/Dent_WebSite_Test</a>‘</p>
</li>
<li><p>点击’高级’展开更多配置项</p>
</li>
<li><p>在’Allowed branches’配置项选择’Filter branches by name’，在’Include’栏填入监听的分支名称，如’test’。表示触发器只监听来自test分支的事件。</p>
</li>
<li><p>点击’Generate’按钮，生成’Secret token’并记录下来</p>
</li>
<li><p>登陆gitlab（权限至少是master、owner或admin），进入jenkins需要配置的对应的项目，’Settings’选项卡，’Intergrations’配置页面。</p>
<p><img src="..\images\2017\jenkins02_use\13.png" alt="13"></p>
</li>
<li><p>URL填写刚才记录的URL，如’<a href="http://192.168.2.200:8081/project/Dent_WebSite_Test" target="_blank" rel="external">http://192.168.2.200:8081/project/Dent_WebSite_Test</a>‘</p>
</li>
<li><p>Secret Token填写刚才记录的Secret token</p>
</li>
<li><p>勾选’push events’和’Merge Request event’，表示监听push和merge事件，然后点’Add webhook’，即可看到新建的webhooks</p>
<p><img src="..\images\2017\jenkins02_use\14.png" alt="14"></p>
</li>
<li><p>点击’Test’，选择’Push events’，测试看是否返回’HTTP 200’</p>
<p><img src="..\images\2017\jenkins02_use\15.png" alt="15"></p>
</li>
</ul>
<p>上面的配置完成后，就可以用git提交代码或者合并代码到test，看看jenkins是否自动开始构建。</p>
<p><strong>PS： 触发器根据实际情况配置，一般来说实际项目中测试环境需要用触发器自动触发构建，而生产环境建议人工构建，避免误操作提交到master分支后冲掉生产环境！</strong></p>
<h2 id="2-4-构建脚本"><a href="#2-4-构建脚本" class="headerlink" title="2.4 构建脚本"></a>2.4 构建脚本</h2><p>前面我们已经完成了拉取代码的配置，接下来就要考虑如何’处理’这些源码：</p>
<ul>
<li><p>在’构建’栏增加构建步骤，选择’Execute shell’，创建shell脚本</p>
<p><img src="..\images\2017\jenkins02_use\16.png" alt="16"></p>
</li>
<li><p>如下图所示，是一个nodejs项目，它依次执行几个命令</p>
<p><img src="..\images\2017\jenkins02_use\17.png" alt="17"></p>
<ul>
<li>需要注意的是每个命令用&amp;&amp;符号隔开，表示当前一个命令执行成功返回exit code = 0 后，下面的指令才执行，否则退出，用于避免前面的指令执行不成功，后面的指令继续执行</li>
<li>点击’高级’展开更多配置，可以看到’Exit code to set build unstable’，默认exit code非0都会触发整个构建为unstable，也可以手动设置，如只监听exit code 为1，才会让构建变成unstable</li>
</ul>
</li>
<li><p>如下图所示，是一个dotnet core项目的编译shell脚本</p>
<p><img src="..\images\2017\jenkins02_use\18.png" alt="18"></p>
<ul>
<li>这里将编译后的文件放到了workspace的jenkins_publish目录下面，这个workspace就是jenkins拉取git项目所在的目录</li>
<li>最后一句将测试环境的配置文件改名，用于使其生效</li>
</ul>
</li>
</ul>
<h2 id="2-5-构建环境"><a href="#2-5-构建环境" class="headerlink" title="2.5 构建环境"></a>2.5 构建环境</h2><h3 id="2-5-1-Delete-workspace-before-build-starts-排除文件夹"><a href="#2-5-1-Delete-workspace-before-build-starts-排除文件夹" class="headerlink" title="2.5.1 Delete workspace before build starts 排除文件夹"></a>2.5.1 Delete workspace before build starts 排除文件夹</h3><p>一般情况下，我们可能需要每次构建前，都要清空整个工作目录，也就是jenkins拉取git项目的目录，为了防止不必要的、多余的文件产生干扰，这时就需要勾选’构建环境’里面的’Delete workspace before build starts’，前提是安装了’Workspace Cleanup Plugin’插件：</p>
<p><img src="..\images\2017\jenkins02_use\19.png" alt="19"></p>
<p>也有另外几种情况，比如在nodejs项目中，每次清空工作目录后，执行’npm install’或’cnpm install’都需要很长时间，所以我们想保留’node_modules’文件夹，假如我们这个项目有两个二级目录(分别叫’app’和’frontend’)下面有’node_modules’文件夹，则配置如下所示：</p>
<p><img src="..\images\2017\jenkins02_use\20.png" alt="20"></p>
<ul>
<li>点开’高级’配置，添加4个Exclude输入栏</li>
<li>‘ **/node_modules/** ‘表示node_modules文件夹和文件不删除</li>
<li>还需添加两个二级目录’app’和’frontend’，否则只有子文件夹，没有父文件夹，实际上就是不存在任何文件夹</li>
<li>还需添加’ **/.git/** ‘，因为下一次构建时，保留了’app’和’frontend’的’node_modules’文件夹以及文件内容，git不允许pull项目到非空目录，所以’ **/.git/** ‘目录也不能被清除</li>
<li><strong>不要勾选</strong>‘Apply pattern also on directories’，可能存在bug，勾选后反而不起作用</li>
</ul>
<h3 id="2-5-2-Console-Output日志加时间戳"><a href="#2-5-2-Console-Output日志加时间戳" class="headerlink" title="2.5.2 Console Output日志加时间戳"></a>2.5.2 Console Output日志加时间戳</h3><p>如下图所示，勾选’Add timestamps to the Console Output’，前提是安装’Timestamper’插件。这样构建时，在Console Output就能看到时间戳:</p>
<p><img src="..\images\2017\jenkins02_use\21.png" alt="21"></p>
<p><img src="..\images\2017\jenkins02_use\22.png" alt="22"></p>
<h2 id="2-6-构建后发布项目"><a href="#2-6-构建后发布项目" class="headerlink" title="2.6 构建后发布项目"></a>2.6 构建后发布项目</h2><p>最后，我们要把’编译’或’处理’后的文件发布到指定的服务器上，常用方式为SSH，也可以通过FTP，下面都以SSH作为说明和示例（检查’Publish Over SSH’插件是否安装）。</p>
<h3 id="2-6-1-设置SSH-Server"><a href="#2-6-1-设置SSH-Server" class="headerlink" title="2.6.1 设置SSH Server"></a>2.6.1 设置SSH Server</h3><p>进入’系统管理’里面的’系统设置’，找到’Publish over SSH’：</p>
<p><img src="..\images\2017\jenkins02_use\23.png" alt="23"></p>
<ul>
<li>Passphrase：不用填写（如果你在2.2节，给jenkins创建ssh key时，一路回车没有添加这一属性，就无需配置）</li>
<li>Path to Key：填写’.ssh/id_rsa’，就是2.2节生成的私钥的文件路径</li>
<li>点’增加’按钮，新增一个SSH Server，并点击’高级’展开更多配置</li>
<li>Name：SSH Server名称，用于展示和备注</li>
<li>Hostname：SSH Server的ip地址</li>
<li>Username：SSH Server用于发布服务的用户名，这里使用了www用户</li>
<li>Remote Directory： SSH Server用于发布服务的根目录，这里使用了www用户的目录/home/www/</li>
<li>Port：SSH Server的SSH服务端口，默认22</li>
</ul>
<p>jenkins配置完成后，还需要对SSH Server做一些配置：</p>
<ul>
<li><p>远程连接到SSH Server上</p>
</li>
<li><p>切换到SSH Server用于发布服务的用户，如www</p>
</li>
<li><p>复制2.2节jenkins公钥的内容(id_rsa.pub)，粘贴到该用户的’~/.ssh/authorized_keys’文件中，如果不存在则需要创建</p>
</li>
<li><p>确保’~/.ssh’文件夹权限是700 </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 700 ~/.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>确保’authorized_keys’文件夹权限是600</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
</li>
<li><p>确保’~/.ssh’文件夹及其内容的所有者是用于发布服务的用户</p>
</li>
</ul>
<p>回到jenkins，如下图所示，点击’Test Configuration’，看是否返回Success！</p>
<p><img src="..\images\2017\jenkins02_use\24.png" alt="24"></p>
<h3 id="2-6-2-发布到SSH-Server"><a href="#2-6-2-发布到SSH-Server" class="headerlink" title="2.6.2 发布到SSH Server"></a>2.6.2 发布到SSH Server</h3><p>进入jenkins的项目，继续完成项目的发布配置，添加’ Send files or execute commands over SSH ‘构建步骤。</p>
<p><img src="..\images\2017\jenkins02_use\25.png" alt="25"></p>
<p>参考下图配置(示例为nodejs项目)：</p>
<p><img src="..\images\2017\jenkins02_use\26.png" alt="26"></p>
<ul>
<li>Add Transfer Set：添加一个传输</li>
<li>Name：选择需要发布的SSH Server</li>
<li>在第一个Transfer处，写一些脚本，清理和重新创建部署目录，由于发布使用www用户，删除某些文件夹可能没有权限，所以需要用’sudo’来执行，’sudo’需要root用户的密码，我们这里需要免密码操作，操作详情可以看3.1章节</li>
<li>在第二个Transfer处，Source files填写需要发布哪些文件<ul>
<li>该目录相对于工作目录，也就是jenkins拉取项目的目录，详情可以看3.2章节</li>
<li>所有文件和文件夹填写’ **\** ‘</li>
<li>如果有空文件夹，点开’高级’配置，如图中第5步所示，勾选’Make empty dirs’，否则空文件夹不会被发布</li>
<li>如果要发布指定文件夹下的所有文件以及文件夹，填写’ foldername\ ‘，注意斜杠一定要有</li>
<li>如果要发布多个目录，用英文逗号隔开</li>
</ul>
</li>
<li>Remove prefix：如图所示，如果要发布app文件夹下的所有子内容，而不要把app这个文件夹也发布过去，需要在这里配置’app’</li>
<li>Remote directory：SSH Server的发布目录，相对于2.6.1章节，SSH Server配置的Remote Directory</li>
<li>Exec command：根据实际需求，执行一些命令，图中执行脚本安装nodejs包、重启pm2服务、重启nginx服务</li>
</ul>
<p>dotnet core的参考配置如下，相对比较简单，发布后重启supervisor和nginx即可：</p>
<p><img src="..\images\2017\jenkins02_use\27.png" alt="27"></p>
<h2 id="2-7-构建后邮件通知"><a href="#2-7-构建后邮件通知" class="headerlink" title="2.7 构建后邮件通知"></a>2.7 构建后邮件通知</h2><p>上面的配置完成后已经能够正常使用，为了每次构建的信息能及时通知到团队，还需要配置邮件通知。</p>
<p>jenkins自带一个简单版的邮件通知功能，但不能满足一些复杂需求和定制需求，所以这里使用’Extended E-mail Notification’插件</p>
<h3 id="2-7-1-配置Extended-E-mail-Notification"><a href="#2-7-1-配置Extended-E-mail-Notification" class="headerlink" title="2.7.1 配置Extended E-mail Notification"></a>2.7.1 配置Extended E-mail Notification</h3><ul>
<li><p>进入’系统管理’里面的’系统设置’，找到’Jenkins Location’，填写’系统管理员邮件地址’：</p>
<p><img src="..\images\2017\jenkins02_use\28.png" alt="28"></p>
</li>
<li><p>找到’Extended E-mail Notification’，按下图所示配置：</p>
<p><img src="..\images\2017\jenkins02_use\29.png" alt="29"></p>
<ul>
<li>SMTP server：SMTP服务器地址</li>
<li>Default user E-mail suffix：默认邮件后缀</li>
<li>点击’高级’展开更多配置</li>
<li>勾选’Use SMTP Authentication’</li>
<li>填写’User Name’，’Password’和’SMTP Port’</li>
<li>Default Recipients：默认收件人</li>
</ul>
</li>
<li><p>Default Content就是邮件模板，这里给一个参考：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var="JOB_NAME"&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span>  </span></div><div class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>GIT URL： $&#123;GIT_URL&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>GIT BRANCH： $&#123;GIT_BRANCH&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>GIT COMMIT： $&#123;GIT_COMMIT&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;console"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;"</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;ws"</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;"</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>变更集<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;JELLY_SCRIPT,template="html"&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-7-2-在项目中使用Extended-E-mail-Notification"><a href="#2-7-2-在项目中使用Extended-E-mail-Notification" class="headerlink" title="2.7.2 在项目中使用Extended E-mail Notification"></a>2.7.2 在项目中使用Extended E-mail Notification</h3><p>回到jenkins项目配置，添加名为’Editable Email Notification’的构建后操作，配置如下：</p>
<p><img src="..\images\2017\jenkins02_use\30.png" alt="30"></p>
<ul>
<li>Project Recipient List：项目收件人邮箱列表</li>
<li>Default Content：邮件内容模板，默认调用2.7.1章节配置的模板内容，也可以在这里自定义</li>
<li>Attach Build Log：是否附件构建日志，一般选择’Attach Build Log’</li>
<li>Trigger：点开’高级’，配置触发器，条件有很多，根据需要配置，这里’Recipient List’就是项目收件人邮箱列表</li>
</ul>
<p>至此，一个’完整’的jenins项目就部署完成了（由于还没有集成测试，所以完整打引号，jenkins集成测试请参见该系列第三篇文章）。</p>
<h1 id="三、-其他"><a href="#三、-其他" class="headerlink" title="三、 其他"></a>三、 其他</h1><h2 id="3-1-SSH-Server-root权限执行命令或脚本"><a href="#3-1-SSH-Server-root权限执行命令或脚本" class="headerlink" title="3.1 SSH Server root权限执行命令或脚本"></a>3.1 SSH Server root权限执行命令或脚本</h2><p>通过SSH Server发布和部署项目往往会遇到权限不够，需要用’sudo’升权限的情况，在自动化流程里，不想使用密码或者暴露密码，那么可以参考下面的方式：</p>
<ul>
<li><p>进入SSH Server</p>
</li>
<li><p>切换到root用户</p>
</li>
<li><p>编辑sudoers文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sudoers</div></pre></td></tr></table></figure>
</li>
<li><p>在文档最后，给www用户添加无需密码的指令或脚本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">www     ALL=(root)      NOPASSWD:/usr/bin/systemctl,/bin/supervisorctl,/usr/bin/rm</div></pre></td></tr></table></figure>
<p>上面的命令表示www用户以sudo执行systemctl、supervisor和rm命令时不需要密码。</p>
<p>因为给www用户rm权限比较危险，所以这里也可以填某个位置的脚本文件，封装起来相对更安全，根据项目需要自行选择。</p>
</li>
<li><p>在sudoers文件还需注释掉下面的配置，用于允许其他来源的控制台传输sudo命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">Defaults    requiretty</span></div></pre></td></tr></table></figure>
<p>​</p>
<p>​</p>
</li>
</ul>
<h2 id="3-2-jenkins工作目录相关介绍"><a href="#3-2-jenkins工作目录相关介绍" class="headerlink" title="3.2 jenkins工作目录相关介绍"></a>3.2 jenkins工作目录相关介绍</h2><p>jenkins工作目录就是jenkins拉取git项目的目录，可以在jenkins项目左边栏点击’工作空间’查看：</p>
<p><img src="..\images\2017\jenkins02_use\32.png" alt="32"></p>
<p>在宿主机上，可以进入docker jenkins容器映射的卷查看，如</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /var/lib/docker/volumes/jenkins/_data/workspace/项目名</div></pre></td></tr></table></figure>
<p>或者在宿主机上直接进入docker jenkins容器内，在jenkins_home文件夹中查看</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker exec -it myjenkins /bin/bash #宿主机上执行</div><div class="line"><span class="meta">#</span><span class="bash">进入容器</span></div><div class="line">cd /var/jenkins_home/workspace/项目名</div></pre></td></tr></table></figure>
<h2 id="3-3-pm2相关知识介绍"><a href="#3-3-pm2相关知识介绍" class="headerlink" title="3.3 pm2相关知识介绍"></a>3.3 pm2相关知识介绍</h2><ul>
<li><p>不建议给每个nodejs项目配置局部pm2，建议给SSH Server配置全局的pm2</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install pm2 -g</div></pre></td></tr></table></figure>
</li>
<li><p>pm2作用于每一个用户，如果是用www用户部署的node项目，在root用户下不能用’pm2 status’查看到pm2托管的项目，不要用不同的用户启动pm2，以免项目冲突</p>
</li>
<li><p>pm2开机启动方法如下：</p>
<p>配置完pm2托管的项目后执行命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pm2 save</div><div class="line">pm2 startup</div></pre></td></tr></table></figure>
<p>再用root用户执行提示反馈的命令即可</p>
</li>
</ul>

                    
                        
                    
                    
                        <p>
                            <a href="/jenkins02_use/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/jenkins01_docker/">
                            持续集成CI实施指南一--搭建Jenkins
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-11-03T18:04:00+08:00">
	
		    11月 03, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/agile/">agile</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#一、-关于持续集成"><span class="toc-text">一、 关于持续集成</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#1-1-什么是持续集成"><span class="toc-text">1.1 什么是持续集成</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#1-2-为什么要持续集成"><span class="toc-text">1.2 为什么要持续集成</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#二、-搭建Jenkins"><span class="toc-text">二、 搭建Jenkins</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#2-1-什么是jenkins"><span class="toc-text">2.1 什么是jenkins</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-2-Jenkins-for-Docker"><span class="toc-text">2.2 Jenkins for Docker</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-1-准备工作"><span class="toc-text">2.2.1 准备工作</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-2-拉取Jenkins-for-Docker"><span class="toc-text">2.2.2 拉取Jenkins for Docker</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-3-通过Dockerfile定制jenkins"><span class="toc-text">2.2.3 通过Dockerfile定制jenkins</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-4-使用Jenkins-for-Docker"><span class="toc-text">2.2.4 使用Jenkins for Docker</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-2-4-如何复用与迁移"><span class="toc-text">2.2.4 如何复用与迁移</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-3-如何升级Jenkins"><span class="toc-text">2.3 如何升级Jenkins</span></a></li></ol></li></ol>
<h1 id="一、-关于持续集成"><a href="#一、-关于持续集成" class="headerlink" title="一、 关于持续集成"></a>一、 关于持续集成</h1><h2 id="1-1-什么是持续集成"><a href="#1-1-什么是持续集成" class="headerlink" title="1.1 什么是持续集成"></a>1.1 什么是持续集成</h2><p>持续集成, 简称CI（continuous integration）.是一种软件开发实践，即团队开发成员经常集成他们的工作,每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p>
<p><strong>传统瀑布模型(水平划分项目阶段)：</strong></p>
<p><img src="../images/2017/jenkins01_docker/1.png" alt="1"></p>
<p><strong>敏捷开发与CI模型(垂直划分项目阶段)：</strong></p>
<p><img src="../images/2017/jenkins01_docker/2.png" alt="2"></p>
<h2 id="1-2-为什么要持续集成"><a href="#1-2-为什么要持续集成" class="headerlink" title="1.2 为什么要持续集成"></a>1.2 为什么要持续集成</h2><ul>
<li>保证质量：CI是敏捷开发重要的一步，其目的在于让产品快速迭代的同时，尽可能保持高质量</li>
<li>减少风险：CI讲求开发、部署、测试100%通过，通过多次集成，便于检查错误</li>
<li>较少重复过程：自动化的构建、部署与测试节省重复工作，让团队能集中精力去做更重要的事</li>
<li>增强项目可见性：每一次集成不论成功或失败，都能获得数据和信息供团队分析与决策</li>
<li>增强团队协作：团队成员能清楚知道每一次提交代码后产生的影响，成员之间需要更密切的沟通来保证集成成功</li>
</ul>
<h1 id="二、-搭建Jenkins"><a href="#二、-搭建Jenkins" class="headerlink" title="二、 搭建Jenkins"></a>二、 搭建Jenkins</h1><h2 id="2-1-什么是jenkins"><a href="#2-1-什么是jenkins" class="headerlink" title="2.1 什么是jenkins"></a>2.1 什么是jenkins</h2><p>Jenkins是一款用Java编写的开源的持续集成工具，是目前使用范围最广的CI工具。他长这样：</p>
<p><img src="../images/2017/jenkins01_docker/3.png" alt="3"></p>
<h2 id="2-2-Jenkins-for-Docker"><a href="#2-2-Jenkins-for-Docker" class="headerlink" title="2.2 Jenkins for Docker"></a>2.2 Jenkins for Docker</h2><p>上文也说到Jenkins使用Java编写，所以支持跨平台。详细的介绍和安装说明可以查看<a href="https://jenkins.io/" target="_blank" rel="external">官网</a></p>
<p>我们这里用到另一种方式，Jenkins for Docker. 这种方式在使用上更为轻量，不用在服务器上安装JDK，甚至不需要去研究如何安装Jenkins. 另外通过编写Dockerfile，能定制出符合我们需求的Jenkins配置，同时能够方便的复用和迁移。</p>
<h3 id="2-2-1-准备工作"><a href="#2-2-1-准备工作" class="headerlink" title="2.2.1 准备工作"></a>2.2.1 准备工作</h3><ul>
<li><p>需要一台装有Docker的宿主机<strong>（必要）</strong></p>
</li>
<li><p>需要一些Docker的基础知识与常用命令<strong>（必要）</strong></p>
</li>
<li><p>docker宿主机设置代理<strong>（非必要）</strong></p>
<ul>
<li><p>创建代理配置文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/systemd/system/docker.service.d</div><div class="line">vi /etc/systemd/system/docker.service.d/http-proxy.conf</div></pre></td></tr></table></figure>
</li>
<li><p>内容填写参考如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Service]</div><div class="line">Environment=&quot;HTTP_PROXY=http://192.168.2.100:1080/&quot; &quot;HTTPS_PROXY=https://192.168.2.100:1080/&quot; &quot;NO_PROXY=localhost,127.0.0.1&quot;</div></pre></td></tr></table></figure>
<p>表示使用192.168.2.100:1080作为代理，且localhost不走代理</p>
</li>
<li><p>更新配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div></pre></td></tr></table></figure>
</li>
<li><p>重启Docker</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart docker</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-2-拉取Jenkins-for-Docker"><a href="#2-2-2-拉取Jenkins-for-Docker" class="headerlink" title="2.2.2 拉取Jenkins for Docker"></a>2.2.2 拉取Jenkins for Docker</h3><ul>
<li><p>宿主机执行命令拉取Jenkins的Docker Image</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull jenkins</div></pre></td></tr></table></figure>
<p>这个镜像体积不小，约800M，由于受国内网络环境影响，下载可能很慢，如果需要给docker设置代理请参考2.2.1 “docker宿主机设置代理”</p>
</li>
<li><p>查看Jenkins镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<p><img src="../images/2017/jenkins01_docker/4.png" alt="4"></p>
<p>到这里已经可以使用jenkins了，但我们还需做一些定制，比如给Jenkins镜像安装Nodejs、dotnet Core SDK等</p>
</li>
</ul>
<h3 id="2-2-3-通过Dockerfile定制jenkins"><a href="#2-2-3-通过Dockerfile定制jenkins" class="headerlink" title="2.2.3 通过Dockerfile定制jenkins"></a>2.2.3 通过Dockerfile定制jenkins</h3><ul>
<li><p>根据需要编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> jenkins</div><div class="line"><span class="keyword">MAINTAINER</span> wurang</div><div class="line"><span class="keyword">USER</span> root</div><div class="line"><span class="comment"># 将 shell 替换为 bash</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> rm /bin/sh &amp;&amp; ln -s /bin/bash /bin/sh</span></div><div class="line"><span class="bash"><span class="comment"># 设置中科大软件镜像源</span></span></div><div class="line"><span class="bash">RUN sed -i <span class="string">'s/deb.debian.org/mirrors.ustc.edu.cn/g'</span> /etc/apt/sources.list</span></div><div class="line"><span class="bash">RUN sed -i <span class="string">'s|security.debian.org|mirrors.ustc.edu.cn/debian-security|g'</span> /etc/apt/sources.list</span></div><div class="line"><span class="bash"><span class="comment"># upgrade</span></span></div><div class="line"><span class="bash">RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y apt-utils sudo     </span></div><div class="line"><span class="bash"><span class="comment"># 安装必要软件包</span></span></div><div class="line"><span class="bash">RUN apt-get install -y build-essential curl libunwind8 gettext apt-transport-https nasm autoconf automake libtool libpng-dev pkg-config</span></div><div class="line"><span class="bash"><span class="comment"># 安装dotnet core 2.0</span></span></div><div class="line"><span class="bash">RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg \</span></div><div class="line"><span class="bash">&amp;&amp; mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg \</span></div><div class="line"><span class="bash">&amp;&amp; sh -c <span class="string">'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" &gt; /etc/apt/sources.list.d/dotnetdev.list'</span> \</span></div><div class="line"><span class="bash">&amp;&amp; apt-get update &amp;&amp; apt-get install -y dotnet-sdk-2.0.0  </span></div><div class="line"><span class="bash"><span class="comment"># 安装nodejs</span></span></div><div class="line"><span class="bash">RUN curl -sL https://deb.nodesource.com/setup_6.x | bash - &amp;&amp; apt-get install -y nodejs</span></div><div class="line"><span class="bash"><span class="comment"># 安装cnpm</span></span></div><div class="line"><span class="bash">RUN npm install -g cnpm --registry=https://registry.npm.taobao.org</span></div><div class="line"><span class="bash"><span class="comment"># 清理缓存</span></span></div><div class="line"><span class="bash">RUN apt-get clean &amp;&amp; apt-get autoclean</span></div><div class="line"><span class="bash"><span class="comment"># 解决时区问题</span></span></div><div class="line"><span class="bash">RUN rm -f /etc/localtime &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  </span></div><div class="line"><span class="bash"><span class="comment"># 设置环境变量，设置时区和降低安全配置以允许查看测试报告时访问到css</span></span></div><div class="line"><span class="bash">ENV JAVA_OPTS=<span class="string">"-Duser.timezone=Asia/Shanghai -Dhudson.model.DirectoryBrowserSupport.CSP=\"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';\""</span>                                                                </span></div><div class="line"><span class="bash">USER jenkins</span></div></pre></td></tr></table></figure>
</li>
<li><p>生成定制镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t auto-jenkins .</div></pre></td></tr></table></figure>
</li>
<li><p>查看镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<p><img src="../images/2017/jenkins01_docker/5.png" alt="5"></p>
<p>auto-jenkins即为通过Dockerfile生成的定制镜像</p>
</li>
</ul>
<h3 id="2-2-4-使用Jenkins-for-Docker"><a href="#2-2-4-使用Jenkins-for-Docker" class="headerlink" title="2.2.4 使用Jenkins for Docker"></a>2.2.4 使用Jenkins for Docker</h3><ul>
<li><p>运行Jenkins容器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name myjenkins -d -p 8081:8080 -p 50000:50000 -v jenkins:/var/jenkins_home auto-jenkins</div></pre></td></tr></table></figure>
<ul>
<li>–name myjenkins 表示为运行的docker容器命名myjenkins</li>
<li>-d 表示用后台执行命令</li>
<li>-p 8081:8080 将Jenkins容器的8080端口映射至宿主机的8081端口，必须映射容器的8080端口到宿主机，考虑到宿主机8080端口可能被占用，所以这里映射到了8081端口，<strong>记住这个端口将用于对Jenkins的访问</strong></li>
<li>-p 50000:50000  将Jenkins容器的50000端口映射至宿主机的50000端口，必须映射容器的50000端口到宿主机</li>
<li>-v jenkins:/var/jenkins_home 将Jenkins容器的home目录作为卷挂载到宿主机 /var/lib/docker/volumes/jenkins 目录，jenkins容器的所有配置、工作信息都会存放在这里。也可以挂载到宿主机的其他目录，不过需要注意权限问题</li>
<li>auto-jenkins 表示从我们创建的名为auto-jenkins的镜像启动容器</li>
</ul>
</li>
<li><p>访问Jenkins</p>
<p>启动容器后，可以看到如下所示的信息，记住红框内的密钥信息</p>
<p><img src="../images/2017/jenkins01_docker/6.png" alt="6"></p>
<p>启动完成后就可以通过访问宿主机IP+容器8080的映射端口来访问Jenkins了，如通过上面的配置，我们可以访问 <a href="http://XXXX:8081" target="_blank" rel="external">http://XXXX:8081</a></p>
<p><img src="../images/2017/jenkins01_docker/7.png" alt="7"></p>
<p>这里需要填入刚才记住的密钥，如果忘记了，可以在宿主机的挂载卷内找到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /var/lib/docker/volumes/jenkins/_data/secrets/initialAdminPassword</div></pre></td></tr></table></figure>
<p>然后安装推荐插件</p>
<p><img src="../images/2017/jenkins01_docker/8.png" alt="8"></p>
<p><img src="../images/2017/jenkins01_docker/9.png" alt="9"></p>
<p>设置管理员账号</p>
<p><img src="../images/2017/jenkins01_docker/10.png" alt="10"></p>
</li>
</ul>
<ul>
<li><p>开机自动运行容器</p>
<p>最后不要忘了给宿主机设置开机启动Jenkins容器，可添加下面的开机脚本命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start myjenkins</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-2-4-如何复用与迁移"><a href="#2-2-4-如何复用与迁移" class="headerlink" title="2.2.4 如何复用与迁移"></a>2.2.4 如何复用与迁移</h3><p>如果需要迁移整套jenkins或者在其他服务器复用，可以按照下面的步骤：</p>
<ul>
<li>新服务器安装Docker</li>
<li>新服务器拉取Jenkins Image</li>
<li>拷贝之前编写好的Dockerfile到新服务器，运行build脚本创建auto-jenkins镜像</li>
<li>运行容器</li>
<li>访问Jenkins</li>
<li>拷贝旧服务器的挂载卷 /var/lib/docker/volumes/jenkins 到新服务器对应位置<strong>（迁移则需要这一步，复用不需要）</strong></li>
</ul>
<h2 id="2-3-如何升级Jenkins"><a href="#2-3-如何升级Jenkins" class="headerlink" title="2.3 如何升级Jenkins"></a>2.3 如何升级Jenkins</h2><p>初次访问Jenkins for Docker，一般会遇到升级提示</p>
<p><img src="../images/2017/jenkins01_docker/11.png" alt="11"></p>
<p>升级步骤如下：</p>
<ul>
<li><p>右键”download”获取更新包地址</p>
</li>
<li><p>进入jenkins容器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it -u root myjenkins /bin/bash</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /usr/share/jenkins/ # 进入jenkins目录 </div><div class="line">mkdir bak # 创建备份文件夹 </div><div class="line">mv jenkins.war bak/jenkins.war.bak  # 备份war包</div><div class="line">wget http://updates.jenkins-ci.org/download/war/2.73.2/jenkins.war # 下载更新包，地址为第一步获取的更新地址</div></pre></td></tr></table></figure>
</li>
<li><p>重启jenkins</p>
<p>访问jenkins_url/restart 如 “<a href="http://XXXX:8081/restart”" target="_blank" rel="external">http://XXXX:8081/restart”</a> 重启jenkins</p>
<p>​</p>
<p>​</p>
</li>
</ul>

                    
                        
                    
                    
                        <p>
                            <a href="/jenkins01_docker/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/docker_image_to_dockerfile/">
                            通过Docker Image找回Dockerfile
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-10-30T17:16:00+08:00">
	
		    10月 30, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/virtualization/">virtualization</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <p>最近项目组上持续集成，于是利用jenkins的docker镜像做二次开发，原本写好的Dockerfile在生成docker image后不小心被误删，一番折腾后终于找了回来。</p>
<p>如下图所示：</p>
<ul>
<li>jenkins为原始镜像</li>
<li>auto-jenkins为使用Dockerfile生成的镜像</li>
</ul>
<p><img src="../images/2017/docker_image_to_dockerfile/1.png" alt="1"></p>
<p>使用history命令查询auto-jenkins镜像所执行的所有命令：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker history auto-jenkins --no-trunc</div></pre></td></tr></table></figure>
<p><img src="../images/2017/docker_image_to_dockerfile/2.png" alt="2"></p>
<p>可以从查询结果中识别出Dockerfile以外的命令，然后自下而上，找回Dockerfile的执行命令：</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> jenkins</div><div class="line"></div><div class="line"><span class="keyword">USER</span> root</div><div class="line"></div><div class="line"><span class="keyword">RUN</span> rm /bin/sh &amp;&amp; ln -s /bin/bash /bin/sh</div><div class="line">RUN sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list</div><div class="line">RUN sed -i 's|security.debian.org|mirrors.ustc.edu.cn/debian-security|g' /etc/apt/sources.list</div><div class="line">RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y apt-utils sudo     </div><div class="line">RUN apt-get install -y build-essential curl libunwind8 gettext apt-transport-https</div><div class="line">RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg \</div><div class="line">&amp;&amp; mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg \</div><div class="line">&amp;&amp; sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-stretch-prod stretch main" &gt; /etc/apt/sources.list.d/dotnetdev.list' \</div><div class="line">&amp;&amp; apt-get update &amp;&amp; apt-get install -y dotnet-sdk-2.0.0  </div><div class="line">RUN curl -sL https://deb.nodesource.com/setup_6.x | bash - &amp;&amp; apt-get install -y nodejs</div><div class="line">RUN npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line">RUN apt-get clean &amp;&amp; apt-get autoclean</div><div class="line">RUN rm -f /etc/localtime &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  </div><div class="line">ENV JAVA_OPTS=-Duser.timezone=Asia/Shanghai </div><div class="line"></div><div class="line">USER jenkins</div></pre></td></tr></table></figure>
<p>综上，从Docker Image找回Dockerfile，需满足如下条件：</p>
<ul>
<li>需存在Dockerfile生成的Docker Image</li>
<li>利用Docker Image只能找到任何已提交到Image的指令，如Dockerfile生成的Image，或Container提交的Image。如果在Container中执行的指令没有Commit到Image，则不能用Image的history命令查询。</li>
</ul>

                    
                        
                    
                    
                        <p>
                            <a href="/docker_image_to_dockerfile/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/webpack_upload_to_alioss/">
                            利用nodejs在webpack打包完成后自动上传文件到阿里云OSS
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-10-25T11:11:00+08:00">
	
		    10月 25, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/program/">program</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <p>项目使用Webpack打包，打包完成后生成一些asset，不管是本地开发还是jenkins持续集成，都希望自动上传这些asset到阿里云OSS，于是用nodejs写一个脚本：</p>
<h1 id="1-upload-oss-js"><a href="#1-upload-oss-js" class="headerlink" title="1. upload_oss.js"></a>1. upload_oss.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>); </div><div class="line"><span class="keyword">var</span> OSS = <span class="built_in">require</span>(<span class="string">'ali-oss'</span>) <span class="comment">//阿里云oss模块</span></div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>); <span class="comment">//文件模块</span></div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"></div><div class="line"><span class="comment">//---------------------------使用说明----------------------------</span></div><div class="line"><span class="comment">//获取命令行传入参数(第0个参数是node 第1个参数是js文件 第2个文件是本地文件夹路径 第3个是oss相对目录)</span></div><div class="line"><span class="comment">//命令格式举例： node  oss/upload_oss.js  ../../static/  /static/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> localPath = process.argv[<span class="number">2</span>]</div><div class="line"><span class="keyword">var</span> remotePath = process.argv[<span class="number">3</span>]</div><div class="line"><span class="keyword">if</span>(localPath == <span class="literal">null</span> || remotePath == <span class="literal">null</span>)&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"缺少目录参数！"</span>);</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">localPath = path.resolve(localPath); <span class="comment">//本地目录</span></div><div class="line">remotePath = path.resolve(remotePath); <span class="comment">//OSS相对目录</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(!fs.existsSync(localPath))&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"本地目录"</span>+ localPath + <span class="string">"不存在！"</span>)</div><div class="line">  <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//上传列表</span></div><div class="line"><span class="keyword">var</span> fileDic = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">//阿里云OSS配置</span></div><div class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> OSS(&#123;</div><div class="line">  region: <span class="string">'oss-cn-shenzhen'</span>,</div><div class="line">  accessKeyId: <span class="string">'xxxx'</span>,</div><div class="line">  accessKeySecret: <span class="string">'xxxx'</span>,</div><div class="line">  bucket: <span class="string">'xxxx'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'---------上传OSS---------'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'【Step1】 分析目录'</span>);</div><div class="line"></div><div class="line">readDir(localPath)  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readDir</span>(<span class="params">filePath</span>)</span>&#123;  </div><div class="line">  filePath = path.resolve(filePath);</div><div class="line">  <span class="comment">//遍历文件目录</span></div><div class="line">  <span class="keyword">var</span> pa = fs.readdirSync(filePath);</div><div class="line">  pa.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">filename,index</span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> file = path.join(filePath,filename)</div><div class="line">    <span class="keyword">var</span> info = fs.statSync(file)   </div><div class="line">    <span class="comment">//目录   </span></div><div class="line">    <span class="keyword">if</span>(info.isDirectory())&#123;  </div><div class="line">      readDir(file);  </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//文件</span></div><div class="line">    <span class="keyword">else</span> &#123;  </div><div class="line">      <span class="comment">//添加到上传列表</span></div><div class="line">      <span class="keyword">var</span> localDir = path.join(filePath,filename);</div><div class="line">      <span class="keyword">var</span> remoteDir = path.join(remotePath, localDir.replace(localPath,<span class="string">""</span>));</div><div class="line">      fileDic[localDir] = remoteDir; </div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"add file："</span> + localDir)</div><div class="line">    &#125;     </div><div class="line">  &#125;)  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'【Step2】 上传文件'</span>);</div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> localDir <span class="keyword">in</span> fileDic)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">var</span> result = <span class="keyword">yield</span> client.put(fileDic[localDir], localDir);</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"upload from '"</span> + localDir + <span class="string">"' to '"</span> + fileDic[localDir] + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'【Step3】 完成'</span>);</div><div class="line">  &#125;</div><div class="line">).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="2-package-json调用"><a href="#2-package-json调用" class="headerlink" title="2. package.json调用"></a>2. package.json调用</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">   "dev": "webpack-dev-server  --devtool inline-source-map --progress --color  --watch-poll",</div><div class="line">   "test": "export NODE_ENV=test &amp;&amp; webpack --progress  --color &amp;&amp; node oss/upload_oss.js ../test_static/ /demo/test_static/",</div><div class="line">   "prod": "export NODE_ENV=production &amp;&amp; webpack --progress  --color &amp;&amp; node oss/upload_oss.js ../static/ /demo/static/",</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>如上所示：</p>
<ul>
<li>test环境下，上传本地test_static文件夹到OSS的demo/test_static</li>
<li>prod环境下，上传本地static文件夹到OSS的demo/static</li>
</ul>

                    
                        
                    
                    
                        <p>
                            <a href="/webpack_upload_to_alioss/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    
    <article class="postShorten postShorten--thumbnailimg-bottom" itemscope itemType="http://schema.org/BlogPosting">
        <div class="postShorten-wrap">
            
            <div class="postShorten-header">
                <h1 class="postShorten-title" itemprop="headline">
                    
                        <a class="link-unstyled" href="/webpack_hmr/">
                            Webpack实时刷新与模块热替换(HMR)
                        </a>
                    
                </h1>
                <div class="postShorten-meta">
    <time itemprop="datePublished" datetime="2017-10-17T16:27:00+08:00">
	
		    10月 17, 2017
    	
    </time>
    
        <span>发布在 </span>
        
    <a class="category-link" href="/categories/program/">program</a>


    
</div>

            </div>
            
                <div class="postShorten-content" itemprop="articleBody">
                    <h1 id="table-of-contents">目录</h1><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#1-背景"><span class="toc-text">1. 背景</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#2-关于查找资料"><span class="toc-text">2. 关于查找资料</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#2-1-百度搜索"><span class="toc-text">2.1 百度搜索</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-2-Google搜索"><span class="toc-text">2.2 Google搜索</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#2-3-官方文档"><span class="toc-text">2.3 官方文档</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#3-解决实时刷新"><span class="toc-text">3. 解决实时刷新</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#3-1-前期准备"><span class="toc-text">3.1 前期准备</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-2-webpack、webpack-dev-server属性操作方式"><span class="toc-text">3.2 webpack、webpack-dev-server属性操作方式</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-3-watch与watch-poll"><span class="toc-text">3.3 watch与watch-poll</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-3-1-查询文档"><span class="toc-text">3.3.1 查询文档</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-3-2-webpack如何使用watch和watch-poll"><span class="toc-text">3.3.2 webpack如何使用watch和watch-poll</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-3-3-webpack-dev-server如何使用watch和watch-poll"><span class="toc-text">3.3.3 webpack-dev-server如何使用watch和watch-poll</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-3-4-watch-poll并没有完全解决问题"><span class="toc-text">3.3.4 watch-poll并没有完全解决问题</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-4-webpack-dev-server的服务地址相关属性"><span class="toc-text">3.4 webpack-dev-server的服务地址相关属性</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#3-4-1-host"><span class="toc-text">3.4.1 host</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-4-2-disableHostCheck"><span class="toc-text">3.4.2 disableHostCheck</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-4-3-port"><span class="toc-text">3.4.3 port</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-4-4-public"><span class="toc-text">3.4.4 public</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#3-5-webpack、webpack-dev-server在虚拟机或docker下开启自动刷新方法复盘总结"><span class="toc-text">3.5 webpack、webpack-dev-server在虚拟机或docker下开启自动刷新方法复盘总结</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#4-webpack-dev-server的两种刷新模式"><span class="toc-text">4. webpack-dev-server的两种刷新模式</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#4-1-如何启用inline和iframe模式"><span class="toc-text">4.1 如何启用inline和iframe模式</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-2-iframe"><span class="toc-text">4.2 iframe</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-3-inline"><span class="toc-text">4.3 inline</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#5-模块热替换HMR"><span class="toc-text">5. 模块热替换HMR</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#5-1-什么是HMR"><span class="toc-text">5.1 什么是HMR</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-2-使用HMR"><span class="toc-text">5.2 使用HMR</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-3-其他相关介绍"><span class="toc-text">5.3 其他相关介绍</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#5-3-1-vue使用HMR"><span class="toc-text">5.3.1 vue使用HMR</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-3-2-webstorm可能引起hot失效的问题"><span class="toc-text">5.3.2 webstorm可能引起hot失效的问题</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#6-其他替代技术"><span class="toc-text">6. 其他替代技术</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#6-1-BrowserSyncPlugin"><span class="toc-text">6.1 BrowserSyncPlugin</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#6-2-LiveReloadPlugin"><span class="toc-text">6.2 LiveReloadPlugin</span></a></li></ol></li></ol>
<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h1><p>公司前端项目从webpack1.X 升级到webpack2.X，加之技术需求和业务需求增长过快，开发人员没有充足时间深入学习webpack相关技术栈，导致很多配置失效、冗余或者无法辨别究竟有什么用途。</p>
<p>此外，我们基于docker-machine封装了vue、webpack、nodejs等前端开发环境到docker image，docker-machine本身基于Virtual Box，这种虚拟机+Docker的方式又挖了一把大坑。详情见：<a href="http://wurang.net/docker_frontend/" target="_blank" rel="external">Docker搭建前端开发环境</a></p>
<p>综上，几种情况导致我们在docker中使用webpack-dev-server，没办法实时刷新，但在本机开发时却可以。</p>
<p>启动命令为：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --devtool inline-source-map --progress --color  --watch</div></pre></td></tr></table></figure>
<p>部分webpack配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="comment">// var BrowserSyncPlugin = require('browser-sync-webpack-plugin'); </span></div><div class="line"><span class="keyword">var</span> LiveReloadPlugin = <span class="built_in">require</span>(<span class="string">'webpack-livereload-plugin'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: <span class="comment">//...</span></div><div class="line">        output: &#123;</div><div class="line">            path: path.resolve(__dirname, <span class="string">'../'</span>),</div><div class="line">            filename:  <span class="comment">//...</span></div><div class="line">            chunkFilename:  <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        <span class="built_in">module</span>: &#123;</div><div class="line">            rules: [&#123;</div><div class="line">                    test: <span class="regexp">/\.vue$/</span>,</div><div class="line">                    use: <span class="string">'vue-loader'</span></div><div class="line">                &#125;]</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        plugins: [</div><div class="line">            <span class="comment">// new webpack.HotModuleReplacementPlugin(), //热更新插件</span></div><div class="line">            (prod || test) ? <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; : <span class="keyword">new</span> LiveReloadPlugin(&#123;</div><div class="line">                 appendScriptTag: <span class="literal">true</span>,</div><div class="line">             &#125;),</div><div class="line">            <span class="comment">//...</span></div><div class="line">        ],</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>一副很有历史痕迹的配置文件，留下了几个问题：</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释</li>
</ul>
<h1 id="2-关于查找资料"><a href="#2-关于查找资料" class="headerlink" title="2. 关于查找资料"></a>2. 关于查找资料</h1><h2 id="2-1-百度搜索"><a href="#2-1-百度搜索" class="headerlink" title="2.1 百度搜索"></a>2.1 百度搜索</h2><p>很多情况下，国内开发同学习惯在百度搜索相关问题，不可否认，百度搜索的中文问题有时候确实能比较快的找到答案，但在我们这个问题上，通过“webpack”，“自动刷新”，“HMR”等关键词中，找到几篇文章，但都存在一些问题，节选如下：</p>
<ul>
<li><p><a href="https://segmentfault.com/a/1190000006964335" target="_blank" rel="external">详解webpack-dev-server的使用</a>：属于翻译文，通过下图可得知这是webpack1.X版本，诸如此类搜索出的文章多数没有标注具体版本，而Webpack1.X和2.X的配置又确实变动不小，所以这类文章干扰比较大。<strong>那么如何得知这是1.X版本的介绍，请参考第4章。</strong></p>
<p><img src="../images/2017/webpack_hmr/1.png" alt="1"></p>
</li>
<li><p><a href="http://www.cnblogs.com/penghuwan/p/6941616.html" target="_blank" rel="external">【webpack】webpack-dev-server生猛上手——让我们来搭一个webpack的微服务器吧！</a>：介绍的比较详细，参考文档里也标注了webpack1.X和2.X的官方文档，但如下图所示，”iframe”和”inline”的介绍有误。此部分的介绍仍然是webpack1.X的方式。<strong>也请参考第4章。</strong></p>
<p><img src="../images/2017/webpack_hmr/2.png" alt="2"></p>
</li>
</ul>
<p>上面搜索的结果大部分是Webpack相关，除了版本对不上之外，还没法解决我们的问题。当然可以换新的关键词如“webpack 虚拟机 自动刷新”，效果基本和上面一样存在问题。    </p>
<h2 id="2-2-Google搜索"><a href="#2-2-Google搜索" class="headerlink" title="2.2 Google搜索"></a>2.2 Google搜索</h2><p>百度不行上google，在google通过“webpack hot reload vue virtual machine”等关键词搜到的结果一般来自于stackoverflow、github。一般github的问题会带项目的版本号，至少不会看岔了版本。stackoverflow比较专业的问题也会留下项目版本，操作系统等信息。最后在下面两篇文章中找到了“自动刷新”问题的答案：</p>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-server/issues/704" target="_blank" rel="external">HMR/WDS client port ignored</a></li>
<li><a href="https://github.com/webpack/webpack-dev-server/issues/155" target="_blank" rel="external">Running the server does not compile files or reload page in windows</a></li>
</ul>
<p>Google搜索相对成本比较大，一方面是“技术”成本，另一方面是语言成本。虽然问题能解决，但对于知识体系的梳理并没有特别的帮助。偿还技术债归根到底还是要去看官方文档。</p>
<h2 id="2-3-官方文档"><a href="#2-3-官方文档" class="headerlink" title="2.3 官方文档"></a>2.3 官方文档</h2><p>这里列举的官方文档总共有三份，后面章节所有的介绍都基于这三份文档：</p>
<ul>
<li><p><a href="http://webpack.github.io/docs/" target="_blank" rel="external">webpack官方网站–文档首页</a>：默认是webpack1.X的文档，并给出提示说明1.X版本已经弃用，鼓励使用2.X版本</p>
<p><img src="../images/2017/webpack_hmr/3.png" alt="3"></p>
</li>
<li><p><a href="https://webpack.js.org/" target="_blank" rel="external">webpack2.X官方英文文档</a>：实时更新，版本号如下图所示。最权威的看这里，适用于webpack2.X及以上版本。</p>
</li>
<li><p><a href="https://doc.webpack-china.org/" target="_blank" rel="external">webpack2.X中文翻译文档</a>：与官方英文版版本号同步的翻译版本，注意是部分翻译，有的介绍仍是英文。所以可以作为参考。</p>
<p><img src="../images/2017/webpack_hmr/4.png" alt="4"></p>
</li>
</ul>
<p>注意文档分为六部分，可以在导航栏切换。</p>
<p><img src="../images/2017/webpack_hmr/5.png" alt="5"></p>
<h1 id="3-解决实时刷新"><a href="#3-解决实时刷新" class="headerlink" title="3. 解决实时刷新"></a>3. 解决实时刷新</h1><h2 id="3-1-前期准备"><a href="#3-1-前期准备" class="headerlink" title="3.1 前期准备"></a>3.1 前期准备</h2><p>开始解决问题之前，我们先做一下配置最小化，也就是把不清楚的，没有用的配置项去掉，减少干扰。最初的配置文件修改如下：</p>
<p>主要彻底删除了三个插件：browser-sync-webpack-plugin、webpack-livereload-plugin和HotModuleReplacementPlugin相关的所有配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">// 省略...</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: <span class="comment">//...</span></div><div class="line">        output: &#123;</div><div class="line">            path: path.resolve(__dirname, <span class="string">'../'</span>),</div><div class="line">            filename:  <span class="comment">//...</span></div><div class="line">            chunkFilename:  <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        <span class="built_in">module</span>: &#123;</div><div class="line">            rules: [&#123;</div><div class="line">                    test: <span class="regexp">/\.vue$/</span>,</div><div class="line">                    use: <span class="string">'vue-loader'</span></div><div class="line">                &#125;]</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        plugins: [</div><div class="line">            <span class="comment">//...</span></div><div class="line">        ],</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="3-2-webpack、webpack-dev-server属性操作方式"><a href="#3-2-webpack、webpack-dev-server属性操作方式" class="headerlink" title="3.2 webpack、webpack-dev-server属性操作方式"></a>3.2 webpack、webpack-dev-server属性操作方式</h2><p>在官方文档中，webpack和webpack-dev-server的属性一般有两种操作方式，一种是CLI也就是命令行方式，另一种是修改配置的方式</p>
<ul>
<li><p>CLI方式只需在命令行中用双横杠加属性即可操作属性值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --progress=true --color=false --watch</div></pre></td></tr></table></figure>
</li>
<li><p>CLI里面的每一个属性默认值为true，也就是说上面的例子“–watch”等同于“–watch=true”</p>
</li>
<li><p>配置方式需要修改webpack.config文件，下面通过配置方式启用webpack的watch模式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: xx,</div><div class="line">  	    watch:<span class="literal">true</span>,  <span class="comment">//添加watch</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>CLI和配置方式二选一，不要同时使用，以免造成配置混乱，可读性差</p>
</li>
<li><p>CLI和配置方式同时使用时，CLI的优先级高，会盖掉配置文件的配置</p>
</li>
</ul>
<h2 id="3-3-watch与watch-poll"><a href="#3-3-watch与watch-poll" class="headerlink" title="3.3 watch与watch-poll"></a>3.3 watch与watch-poll</h2><h3 id="3-3-1-查询文档"><a href="#3-3-1-查询文档" class="headerlink" title="3.3.1 查询文档"></a>3.3.1 查询文档</h3><p>在<a href="https://webpack.js.org/configuration/watch/" target="_blank" rel="external">https://webpack.js.org/configuration/watch/</a> 找到webpack的watch属性介绍：</p>
<p><img src="../images/2017/webpack_hmr/6.png" alt="6"></p>
<ul>
<li>watch属性用来监听文件变化</li>
<li>webpack-dev-server默认开启watch</li>
<li>如果watch模式不起作用（watch对于NFS文件系统和虚拟机没有作用），可以尝试watchOptions.poll模式</li>
</ul>
<p>同时在<a href="https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-中找到了关于webpack-dev-server的watch属性介绍：" target="_blank" rel="external">https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-中找到了关于webpack-dev-server的watch属性介绍：</a></p>
<p><img src="../images/2017/webpack_hmr/7.png" alt="7"></p>
<ul>
<li>webpack用文件系统通知文件变化。如果使用NFS系统也就是网络文件系统，即网络磁盘、共享盘等，包括虚拟机，这些情况下用watch没有效果，需要打开watchOptions.poll模式</li>
</ul>
<p>通过上面的信息，我们知道了由于虚拟机不能使用watch通知文件变化，需要用poll这种主动轮询的方式通知。这也许能解决我们的问题。</p>
<h3 id="3-3-2-webpack如何使用watch和watch-poll"><a href="#3-3-2-webpack如何使用watch和watch-poll" class="headerlink" title="3.3.2 webpack如何使用watch和watch-poll"></a>3.3.2 webpack如何使用watch和watch-poll</h3><ul>
<li><p>webpack命令默认没有启动watch，如果需要打开watch，两种方式</p>
<ul>
<li><p>CLI命令行下添加watch属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
</li>
<li><p>或者在配置文件中添加配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: xx,</div><div class="line">  	    watch:<span class="literal">true</span>,  <span class="comment">//添加watch</span></div><div class="line">        output: &#123;</div><div class="line">            path: path.resolve(__dirname, <span class="string">'../'</span>),</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>如果在虚拟机下用webpack，需要使用watch poll模式，两种方式</p>
<ul>
<li><p>CLI命令行下添加watch–poll属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch-poll</div></pre></td></tr></table></figure>
</li>
<li><p>或者在配置文件中添加配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: xx,</div><div class="line">  	    watchOptions: &#123;</div><div class="line">          poll: <span class="literal">true</span></div><div class="line">        &#125;,   <span class="comment">//添加watchOptions节点，设置poll为true</span></div><div class="line">        output: &#123;</div><div class="line">            path: path.resolve(__dirname, <span class="string">'../'</span>),</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-3-3-webpack-dev-server如何使用watch和watch-poll"><a href="#3-3-3-webpack-dev-server如何使用watch和watch-poll" class="headerlink" title="3.3.3 webpack-dev-server如何使用watch和watch-poll"></a>3.3.3 webpack-dev-server如何使用watch和watch-poll</h3><ul>
<li><p>因为我们使用的是webpack-dev-server，又因为webpack-dev-server默认开启watch，所以我们没有必要再做任何配置</p>
</li>
<li><p>如果我们在虚拟机下用是webpack-dev-server，那就需要watch poll模式，两种方式</p>
<ul>
<li><p>CLI命令行下添加watch–poll属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --watch-poll</div></pre></td></tr></table></figure>
</li>
<li><p>或者在配置文件中添加配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: xx,</div><div class="line">  	    devServer:&#123;</div><div class="line">            watchOptions: &#123;</div><div class="line">                poll: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        &#125;,   <span class="comment">//添加devServer节点，添加watchOptions子节点，设置poll为true</span></div><div class="line">        output: &#123;</div><div class="line">            path: path.resolve(__dirname, <span class="string">'../'</span>),</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="3-3-4-watch-poll并没有完全解决问题"><a href="#3-3-4-watch-poll并没有完全解决问题" class="headerlink" title="3.3.4 watch-poll并没有完全解决问题"></a>3.3.4 watch-poll并没有完全解决问题</h3><p>经过这一番折腾，本以为我们把启动命令从</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --devtool inline-source-map --progress --color  --watch</div></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --devtool inline-source-map --progress --color  --watch-poll</div></pre></td></tr></table></figure>
<p>就能解决<strong>【问题一】</strong>，然而结果事与愿违。还有其他哪里不对吗？</p>
<p>在Chrome的控制台中，看到下面的信息：</p>
<p><img src="../images/2017/webpack_hmr/8.png" alt="8"></p>
<p>8080端口是webpack-dev-server的默认端口，从图中可以得知“[WDS] Disconnected！”，也就是说WebpackDevServer链接中断，紧接着是socket连接被拒。了解webpack-dev-server自动刷新原理的同学应该知道，自动刷新和热更新都是基于websocket来通知触发，这里展开又是长篇大论，所以不再多说，有兴趣自行了解。仅贴一下官方文档的解释，至于为什么贴devServer的inline属性文档说明，<strong>还是请看第4章。</strong></p>
<p><img src="../images/2017/webpack_hmr/9.png" alt="9"></p>
<p>websocket报错至少告诉我们自动刷新不成功是网络问题，那回顾一下使用虚拟机或者docker machine时的网络架构模式。如下图所示:</p>
<p><img src="../images/2017/webpack_hmr/10.png" alt="10"></p>
<ul>
<li>如果在虚拟机下使用webpack-dev-server，实际上其服务地址应该是192.168.99.100:8080</li>
<li>如果在docker machine中创建容器，并在其中使用webpack-dev-server，实际上其服务地址应该是172.17.0.2:8080，又因为docker容器和docker machine有做端口映射，也可以使用地址192.168.99.100:8080来访问webpack-dev-server服务</li>
</ul>
<p>不管是哪种情况，都与我们目前遇到的不符。目前，我们webpack-dev-server服务地址是localhost:8080，也就是192.168.1.2:8080，事实上webpack-dev-server服务根本不在PC上。仔细想一下，webpack-dev-server默认ip为localhost，默认端口为8080，如果我们没有做配置，按默认来，那么确实是现在这个结果。【问题一】没解决，又生一问题，看看目前的问题库：</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新<ul>
<li><strong>子问题a：</strong>在虚拟机或Docker下webpack-dev-server服务地址设置问题<em>【新增】</em></li>
</ul>
</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释</li>
</ul>
<p>那么接下来，想办法把webpack-dev-server服务地址问题搞定。</p>
<h2 id="3-4-webpack-dev-server的服务地址相关属性"><a href="#3-4-webpack-dev-server的服务地址相关属性" class="headerlink" title="3.4 webpack-dev-server的服务地址相关属性"></a>3.4 webpack-dev-server的服务地址相关属性</h2><h3 id="3-4-1-host"><a href="#3-4-1-host" class="headerlink" title="3.4.1 host"></a>3.4.1 host</h3><p>官方文档中，host属性说明如下：</p>
<p><img src="../images/2017/webpack_hmr/11.png" alt="11"></p>
<p>通过指定host，可以设置webpack-dev-server服务地址，文档中特别说明“如果需要外部访问服务地址，要将host指定为0.0.0.0”。暂且先不管这个“0.0.0.0”，既然在3.3.4小节中，我们期望的服务地址是“192.168.99.100”，那我们尝试用host指定一下这个IP。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --devtool inline-source-map --progress --color --host 192.168.99.100  --watch-poll</div></pre></td></tr></table></figure>
<p>执行一下，但却得到报错：</p>
<p><img src="../images/2017/webpack_hmr/12.png" alt="12"></p>
<p>报错提示为没法监听到“192.168.99.100”的8080端口。</p>
<p><strong>这里也好理解，我们的webpack-dev-server运行在docker容器中，也就是“172.17.0.2”这个IP，docker和docker machine之间是端口映射关系，只有当docker容器的8080端口有服务，docker machine的8080端口才有用。那我们直接在docker容器中把服务放到docker machine上是不行的。</strong></p>
<p>那尝试改成docker容器自己的IP“172.17.0.2”看看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --devtool inline-source-map --progress --color --host 172.17.0.2  --watch-poll</div></pre></td></tr></table></figure>
<p>编译正常，但还存在两个问题：</p>
<ul>
<li><p>我们一般不关注docker容器的IP，只关注docker或者docker machine的IP，他们之间有端口映射关系，所以把host改到docker容器上不是什么好方法</p>
</li>
<li><p>虽然编译没报错，但Chrome的控制台报另一个错误了，这回换成“172.17.0.2”这个IP访问不到。事实如此，我们的本机PC和docker 容器之间并不互通，一直以来都是以docker machine作为桥梁。</p>
<p><img src="../images/2017/webpack_hmr/13.png" alt="13"></p>
</li>
</ul>
<p>得，直接把host定位到docker machine不行，把host定位到docker容器本身也不行。那怎么破？这时候再回到官方文档的介绍，试试指定host到“0.0.0.0”，在网络中0.0.0.0意思为整个网络：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --devtool inline-source-map --progress --color --host 0.0.0.0  --watch-poll</div></pre></td></tr></table></figure>
<p>编译也正常，回到Chrome看下控制台，WTF！还有错：</p>
<p><img src="../images/2017/webpack_hmr/14.png" alt="14"></p>
<p>这回不是找不到服务地址了，却提示无效的host头部。问题库再来一员。</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新<ul>
<li><strong>子问题a：</strong>在虚拟机或Docker下webpack-dev-server服务地址设置问题<em>【新增】</em></li>
<li><strong>子问题b：</strong> host指定到0.0.0.0提示Invalid Host header<em>【新增】</em></li>
</ul>
</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释</li>
</ul>
<h3 id="3-4-2-disableHostCheck"><a href="#3-4-2-disableHostCheck" class="headerlink" title="3.4.2 disableHostCheck"></a>3.4.2 disableHostCheck</h3><p><strong>【子问题b】</strong>相对来说比较好解决，google一下，信息都指向到disableHostCheck这个属性上：</p>
<p><img src="../images/2017/webpack_hmr/15.png" alt="15"></p>
<p>说出于安全考虑，检查host看是否存在攻击行为，那我们现在是开发使用，给他禁了吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --devtool inline-source-map --progress --color --host 0.0.0.0 --disable-host-check --watch-poll</div></pre></td></tr></table></figure>
<p>这下终于没问题也不报错了，尝试一下改动代码，实时刷新终于OK了！</p>
<p><img src="../images/2017/webpack_hmr/16.gif" alt="16"></p>
<p>至此，<strong>【问题一】</strong>彻底解决！但跟host服务地址相关的几个属性有必要再介绍一下。</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新<em>【已解决】</em><ul>
<li><strong>子问题a：</strong>在虚拟机或Docker下webpack-dev-server服务地址设置问题<em>【已解决】</em></li>
<li><strong>子问题b：</strong> host指定到0.0.0.0提示Invalid Host header<em>【已解决】</em></li>
</ul>
</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释</li>
</ul>
<h3 id="3-4-3-port"><a href="#3-4-3-port" class="headerlink" title="3.4.3 port"></a>3.4.3 port</h3><p><img src="../images/2017/webpack_hmr/17.png" alt="17"></p>
<p>host属性用来指定webpack-dev-server服务的IP地址，那么port属性就是指定服务的端口了。由于默认端口是8080，比较容易被占用，所以可以人为去指定。</p>
<p><strong>需要提醒一下，如果是使用docker，默认的8080端口或者指定的其他端口都需要做好映射！</strong></p>
<h3 id="3-4-4-public"><a href="#3-4-4-public" class="headerlink" title="3.4.4 public"></a>3.4.4 public</h3><p><img src="../images/2017/webpack_hmr/18.png" alt="18"></p>
<p>解释说如果使用inline模式，并代理使用webpack-dev-server，可能会需要public属性。</p>
<p>在我这个例子中，webpack-dev-server的服务地址是0.0.0.0:8080，我们并没有用nginx之类的软件代理这个地址，所以在本例中，我们不需要使用public属性。</p>
<p>但如果0.0.0.0:8080被nginx代理为wds.XX.com这个域名，有可能会需要设置这个属性。</p>
<p> 我在解决这一系列问题途中，搜索到stackoverflow和github上某些文章，说只要设置public属性就行了，这不是一个完全正确的答案：</p>
<ul>
<li>host是说webpack-dev-server服务的源在哪里，必须存在目标的位置</li>
<li>public是说webpack-dev-server服务发布在哪里，这是指路</li>
</ul>
<h2 id="3-5-webpack、webpack-dev-server在虚拟机或docker下开启自动刷新方法复盘总结"><a href="#3-5-webpack、webpack-dev-server在虚拟机或docker下开启自动刷新方法复盘总结" class="headerlink" title="3.5 webpack、webpack-dev-server在虚拟机或docker下开启自动刷新方法复盘总结"></a>3.5 webpack、webpack-dev-server在虚拟机或docker下开启自动刷新方法复盘总结</h2><p>上面介绍的比较杂，我们重新梳理一下解决<strong>【问题一】</strong>的路线：</p>
<ul>
<li><p>在虚拟机或Docker下为什么不能实时刷新</p>
<p><em>这是因为watch属性不能在网络文件系统也就是虚拟机下监听文件变化，必须使用watch-poll主动轮询查询文件是否变更</em></p>
</li>
<li><p>使用watch-poll后，找不到webpack-dev-server服务地址localhost:8080</p>
<p><em>这是因为wds默认地址为localhost:8080，但实际上服务地址应该在虚拟机或docker machine上，指定host为0.0.0.0即可。意思为监听整个网络</em></p>
</li>
<li><p>wds服务地址指定为0.0.0.0:8080后，提示Invalid Host header</p>
<p><em>这是因为wds出于安全考虑，检查host是否存在危险，毕竟0.0.0.0监听整个网络，而我们在开发机以及开发环境中并不会有什么风险，可以用过disableHostCheck禁用host检查</em></p>
</li>
</ul>
<p>问题的答案有两种形式：</p>
<ul>
<li><p>CLI</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --host 0.0.0.0 --disable-host-check --watch-poll</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: xx,</div><div class="line">  	    devServer:&#123;</div><div class="line">            host: <span class="string">"0.0.0.0"</span>, <span class="comment">//指定wds服务ip为0.0.0.0用于监听整个网络</span></div><div class="line">            <span class="comment">// port: 9081, //自定义wds服务端口</span></div><div class="line">            <span class="comment">// public: "http://wds.myapp.com", //指定wds服务的发布位置</span></div><div class="line">            disableHostCheck:<span class="literal">true</span>, <span class="comment">//禁用host检查以解决Invalid Host header错误</span></div><div class="line">            watchOptions: &#123;</div><div class="line">                poll: <span class="literal">true</span> <span class="comment">//开启watch主动轮询模式</span></div><div class="line">            &#125;</div><div class="line">        &#125;, </div><div class="line">        output: &#123;</div><div class="line">            path: path.resolve(__dirname, <span class="string">'../'</span>),</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>同样的属性，配置文件和CLI不要混合使用，上面的配置文件搭配的CLI非常简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<p><strong>最后，用docker的话记得映射wds的端口！</strong></p>
<p>比如配合上面的例子，docker的run命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 80:80 -p 8080:8080 centos</div></pre></td></tr></table></figure>
<p>到这里还没完！一开始我们说了一些文章关于webpack的介绍混淆了1.x和2.x版本，还多次提到了inline模式。虽然已经解决了自动刷新的问题，但关于自动刷新还知之甚少。那下面来详细了解一下webpack-dev-server的自动刷新模式。</p>
<h1 id="4-webpack-dev-server的两种刷新模式"><a href="#4-webpack-dev-server的两种刷新模式" class="headerlink" title="4. webpack-dev-server的两种刷新模式"></a>4. webpack-dev-server的两种刷新模式</h1><p>webpack-dev-server实现自动刷新有两种方式，一种是inline模式，另一种是iframe模式。关于这两种模式的介绍和区别 <a href="http://blog.csdn.net/chengnuo628/article/details/52441977" target="_blank" rel="external">详情介绍webpack-dev-server，iframe与inline的区别</a> 这篇文章介绍的比较详细。</p>
<p> 简单来说：</p>
<ul>
<li>inline是将inline.js打包到bundle.js，inline.js包含了socket通讯代码，可以与wds进行通讯，用来响应wds反馈的文件变化通知，然后刷新整个url</li>
<li>iframe是在网页中嵌入一个iframe，文件发生变化时，wds通知到live.bundle.js，live.bundle.js本身也包含socket通讯，收到反馈后reload这个ifame以完成页面刷新</li>
</ul>
<h2 id="4-1-如何启用inline和iframe模式"><a href="#4-1-如何启用inline和iframe模式" class="headerlink" title="4.1 如何启用inline和iframe模式"></a>4.1 如何启用inline和iframe模式</h2><p>文章一开始，我们列举了几篇文章，说都存在问题，包括本章开头介绍inline和iframe的文章也存在这个问题，他们分别是这样介绍的：</p>
<ul>
<li><p><a href="https://segmentfault.com/a/1190000006964335" target="_blank" rel="external">详解webpack-dev-server的使用</a></p>
<p><img src="../images/2017/webpack_hmr/19.png" alt="19"></p>
</li>
<li><p><a href="http://www.cnblogs.com/penghuwan/p/6941616.html" target="_blank" rel="external">【webpack】webpack-dev-server生猛上手——让我们来搭一个webpack的微服务器吧！</a></p>
<p><img src="../images/2017/webpack_hmr/20.png" alt="20"></p>
</li>
<li><p><a href="http://blog.csdn.net/chengnuo628/article/details/52441977" target="_blank" rel="external">详情介绍webpack-dev-server，iframe与inline的区别</a> </p>
<p><img src="../images/2017/webpack_hmr/21.png" alt="21"></p>
</li>
</ul>
<p>每一篇都说iframe无需配置，是默认的，而inline需要用CLI或配置打开。还有其他一些文章，还专门强调使用inline模式需要手动添加entry。这是因为这些文章用的文档都是webpack1.X版本，那我们看看官方是怎么说的：</p>
<ul>
<li><p>webpack 1.X</p>
<p><img src="../images/2017/webpack_hmr/22.png" alt="22"></p>
<ul>
<li>iframe模式默认开启</li>
<li>iframe模式访问地址为<a href="http://ip:port/webpack-dev-server/index.html" target="_blank" rel="external">http://ip:port/webpack-dev-server/index.html</a></li>
<li>inline模式需要配置</li>
<li>iframe模式访问地址为<a href="http://ip:port/index.html" target="_blank" rel="external">http://ip:port/index.html</a></li>
<li>iframe和inline都支持模块热更新Hot Module Replacement</li>
</ul>
</li>
<li><p>webpack 2.X</p>
<p><img src="../images/2017/webpack_hmr/23.png" alt="23"></p>
<ul>
<li>inline默认开启</li>
<li>iframe模式需要配置</li>
<li>建议使用inline模式配合模块热更新（inline和iframe都支持模块热更新）</li>
</ul>
</li>
</ul>
<p>综上所述：</p>
<ul>
<li>webpack1.X中默认开启的是iframe模式，而webpack2.X中默认开启inline模式，同时webpack2.X也无需配置entry</li>
<li>所以有必要提醒一下，如果你正在使用webpack2.X，需要启用inline模式，那么在CLI中添加inline是多此一举</li>
<li>另外iframe模式下，访问地址加了目录webpack-dev-server，变成 <a href="http://ip:port/webpack-dev-server/index.html" target="_blank" rel="external">http://ip:port/webpack-dev-server/index.html</a></li>
<li>inline模式会刷新整个url</li>
<li>iframe模式只会刷新iframe里面的页面，url并不会刷新</li>
</ul>
<p>不管怎么说，理论上这两种模式都能完成自动刷新，下面看看实际运行结果。</p>
<h2 id="4-2-iframe"><a href="#4-2-iframe" class="headerlink" title="4.2 iframe"></a>4.2 iframe</h2><p>注意下面的介绍都是基于虚拟机的架构，所以保留了watch-poll、host、disable-host-check等属性设置。</p>
<p>执行命令：</p>
<p>设置属性inline=false以启动iframe模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --watch-poll --host 0.0.0.0 --port=9081 --inline=false --disable-host-check</div></pre></td></tr></table></figure>
<p><img src="../images/2017/webpack_hmr/24.png" alt="24"></p>
<p>iframe模式下，url地址确实增加了webpack-dev-server目录，同时整个页面最顶层有一个状态栏，整个页面被包裹在一个iframe里，注意观察下面的动图，看看url和顶层状态栏，以及页面如何刷新：</p>
<p><img src="../images/2017/webpack_hmr/25.gif" alt="25"></p>
<h2 id="4-3-inline"><a href="#4-3-inline" class="headerlink" title="4.3 inline"></a>4.3 inline</h2><p>inline就是webpack2.X默认模式，所以我们在第3章介绍的案例都是以inline模式运行，不再过多介绍，执行命令，看一下动图：</p>
<p><img src="../images/2017/webpack_hmr/26.gif" alt="26"></p>
<p>到这还是没结束。因为问题库里面，<strong>【问题一】</strong>解决了，但<strong>【问题二】</strong>还没解决：</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新<em>【已解决】</em><ul>
<li><strong>子问题a：</strong>在虚拟机或Docker下webpack-dev-server服务地址设置问题<em>【已解决】</em></li>
<li><strong>子问题b：</strong> host指定到0.0.0.0提示Invalid Host header<em>【已解决】</em></li>
</ul>
</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释</li>
</ul>
<p>那么继续往下看！</p>
<h1 id="5-模块热替换HMR"><a href="#5-模块热替换HMR" class="headerlink" title="5. 模块热替换HMR"></a>5. 模块热替换HMR</h1><h2 id="5-1-什么是HMR"><a href="#5-1-什么是HMR" class="headerlink" title="5.1 什么是HMR"></a>5.1 什么是HMR</h2><p><img src="../images/2017/webpack_hmr/27.png" alt="27"></p>
<p>上面是官方对于HMR的解释。HMR相对于自动更新来说：</p>
<ul>
<li>不需要刷新整个页面，因为这可能会影响到现有的表单、缓存等，同时响应速度比较慢</li>
<li>整个应用在运行时，可以替换其中的模块，而不用重启应用</li>
</ul>
<p>第4章也提到，inline和iframe模式都可以配合HMR使用，那我们如何开启HMR呢？</p>
<h2 id="5-2-使用HMR"><a href="#5-2-使用HMR" class="headerlink" title="5.2 使用HMR"></a>5.2 使用HMR</h2><p><img src="../images/2017/webpack_hmr/28.png" alt="28"></p>
<p>官方文档对于webpack2.X版本启用hot说明如下：</p>
<ul>
<li><p>如果通过CLI也就是命令行方式开启hot，会自动添加HotModuleReplacementPlugin</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server --host 0.0.0.0 --disable-host-check --watch-poll --hot</div></pre></td></tr></table></figure>
</li>
<li><p>如果使用配置方式开启hot，需要手动添加HotModuleReplacementPlugin</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="comment">//...</span></div><div class="line"><span class="keyword">var</span> config = &#123;</div><div class="line">        entry: xx,</div><div class="line">  	    devServer:&#123;</div><div class="line">            host: <span class="string">"0.0.0.0"</span>, </div><div class="line">            disableHostCheck:<span class="literal">true</span>, </div><div class="line">            hot:<span class="literal">true</span>,        <span class="comment">//开启hot</span></div><div class="line">            watchOptions: &#123;</div><div class="line">                poll: <span class="literal">true</span> </div><div class="line">            &#125;</div><div class="line">        &#125;, </div><div class="line">        output: &#123;</div><div class="line">            path: path.resolve(__dirname, <span class="string">'../'</span>),</div><div class="line">            <span class="comment">//...</span></div><div class="line">        &#125;,</div><div class="line">        plugins: [</div><div class="line">            <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">//热更新插件</span></div><div class="line">            <span class="comment">//...</span></div><div class="line">        ],</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<p><strong>上面的例子中，默认使用inline模式配合hot开启HMR，如果要使用iframe模式，记得指定inline=false</strong></p>
<p>现在我们知道<strong>【问题二】</strong>中HotModuleReplacementPlugin的用途了，只有在通过配置文件方式开启hot模式时，需要手动添加HotModuleReplacementPlugin</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新<em>【已解决】</em><ul>
<li><strong>子问题a：</strong>在虚拟机或Docker下webpack-dev-server服务地址设置问题<em>【已解决】</em></li>
<li><strong>子问题b：</strong> host指定到0.0.0.0提示Invalid Host header<em>【已解决】</em></li>
</ul>
</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释<ul>
<li><strong>子问题c：</strong> HotModuleReplacementPlugin是做什么用的<em>【已解决】</em></li>
<li><strong>子问题d：</strong> BrowserSyncPlugin是做什么用的<em>【新增】</em></li>
<li><strong>子问题e： </strong>LiveReloadPlugin是做什么用的<em>【新增】</em></li>
</ul>
</li>
</ul>
<p>正确开启HMR后，浏览器控制台可以看到这个信息：</p>
<p><img src="../images/2017/webpack_hmr/29.png" alt="29"></p>
<p>看一下HMR响应改变的动图，注意观察和inline自动刷新的区别，主要是url没有刷新，以及控制台里面的信息：</p>
<p><img src="../images/2017/webpack_hmr/30.gif" alt="30"></p>
<h2 id="5-3-其他相关介绍"><a href="#5-3-其他相关介绍" class="headerlink" title="5.3 其他相关介绍"></a>5.3 其他相关介绍</h2><h3 id="5-3-1-vue使用HMR"><a href="#5-3-1-vue使用HMR" class="headerlink" title="5.3.1 vue使用HMR"></a>5.3.1 vue使用HMR</h3><p>在vue中，使用vue-loader就可以完美兼容HMR模式，看看vue官方怎么介绍的：</p>
<p><a href="https://vue-loader.vuejs.org/zh-cn/features/hot-reload.html" target="_blank" rel="external">https://vue-loader.vuejs.org/zh-cn/features/hot-reload.html</a></p>
<p><img src="../images/2017/webpack_hmr/31.png" alt="31"></p>
<h3 id="5-3-2-webstorm可能引起hot失效的问题"><a href="#5-3-2-webstorm可能引起hot失效的问题" class="headerlink" title="5.3.2 webstorm可能引起hot失效的问题"></a>5.3.2 webstorm可能引起hot失效的问题</h3><p>有同学反应，使用webstorm开发时，HMR失效了。这锅不是webstorm一个人背，官方是这样解释的：</p>
<p><img src="../images/2017/webpack_hmr/32.png" alt="32"></p>
<p>有些编辑器默认使用“safe write”模式保存文件，比如webstorm，这种模式将文件变化先放到缓存里，并不直接改写文件，所以导致监听文件变更失败。遇到这种情况，可以取消“safe write”模式。</p>
<h1 id="6-其他替代技术"><a href="#6-其他替代技术" class="headerlink" title="6. 其他替代技术"></a>6. 其他替代技术</h1><p>整篇文章还剩下两个问题：</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新<em>【已解决】</em><ul>
<li><strong>子问题a：</strong>在虚拟机或Docker下webpack-dev-server服务地址设置问题<em>【已解决】</em></li>
<li><strong>子问题b：</strong> host指定到0.0.0.0提示Invalid Host header<em>【已解决】</em></li>
</ul>
</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释<ul>
<li><strong>子问题c：</strong> HotModuleReplacementPlugin是做什么用的<em>【已解决】</em></li>
<li><strong>子问题d：</strong> BrowserSyncPlugin是做什么用的<em>【新增】</em></li>
<li><strong>子问题e： </strong>LiveReloadPlugin是做什么用的<em>【新增】</em></li>
</ul>
</li>
</ul>
<p>一一攻破。</p>
<h2 id="6-1-BrowserSyncPlugin"><a href="#6-1-BrowserSyncPlugin" class="headerlink" title="6.1 BrowserSyncPlugin"></a>6.1 BrowserSyncPlugin</h2><p><a href="https://www.npmjs.com/package/browser-sync-webpack-plugin" target="_blank" rel="external">https://www.npmjs.com/package/browser-sync-webpack-plugin</a></p>
<p>主要解决浏览器同步问题，比如做兼容性调试时，一般同时打开IE、Chrome或开启手机浏览器模拟器等，该插件可以同步所有浏览器内容。与webpack共同使用时，一般用来代理webpack-dev-server服务已完成更多功能。详细不再过多介绍，按需使用。</p>
<h2 id="6-2-LiveReloadPlugin"><a href="#6-2-LiveReloadPlugin" class="headerlink" title="6.2 LiveReloadPlugin"></a>6.2 LiveReloadPlugin</h2><p><a href="https://www.npmjs.com/package/webpack-livereload-plugin" target="_blank" rel="external">https://www.npmjs.com/package/webpack-livereload-plugin</a></p>
<p>基本功能与webpack-dev-server一致，但如果网站的assets由其他服务器提供，比如某些图片存在阿里云OSS，而你又想使用webpack的自动更新功能。那么就可以使用这个插件。</p>
<ul>
<li><strong>问题一：</strong>在虚拟机或Docker下为什么不能实时刷新<em>【已解决】</em><ul>
<li><strong>子问题a：</strong>在虚拟机或Docker下webpack-dev-server服务地址设置问题<em>【已解决】</em></li>
<li><strong>子问题b：</strong> host指定到0.0.0.0提示Invalid Host header<em>【已解决】</em></li>
</ul>
</li>
<li><strong>问题二：</strong>看上去功能重复的插件如BrowserSyncPlugin、LiveReloadPlugin、HotModuleReplacementPlugin究竟有什么区别，为什么会被注释<ul>
<li><strong>子问题c：</strong> HotModuleReplacementPlugin是做什么用的<em>【已解决】</em></li>
<li><strong>子问题d：</strong> BrowserSyncPlugin是做什么用的<em>【已解决】</em></li>
<li><strong>子问题e： </strong>LiveReloadPlugin是做什么用的<em>【已解决】</em></li>
</ul>
</li>
</ul>
<p>至此，所有的坑全部填完……</p>

                    
                        
                    
                    
                        <p>
                            <a href="/webpack_hmr/#post-footer" class="postShorten-excerpt_link link">
                                评论和共享
                            </a>
                        </p>
                    
                </div>
            
        </div>
        
    </article>
    
    <div class="pagination-bar">
    <ul class="pagination">
        
        
        <li class="pagination-next">
            <a class="btn btn--default btn--small" href="/page/2/">
                    <span>下一页</span>
                <i class="fa fa-angle-right text-base icon-ml"></i>
            </a>
        </li>
        
        <li class="pagination-number">第 1 页 共 12 页</li>
    </ul>
</div>

</section>


                <footer id="footer" class="main-content-wrap">
    <span class="copyrights">
        Copyrights &copy; 2018 Wu Rang. All Rights Reserved.
    </span>
</footer>

            </div>
            
        </div>
        


    
        
    

<div id="about">
    <div id="about-card">
        <div id="about-btn-close">
            <i class="fa fa-remove"></i>
        </div>
        
            <img id="about-card-picture" src="/assets/images/avatar.jpg" alt="作者的图片"/>
        
            <h4 id="about-card-name">Wu Rang</h4>
        
            <div id="about-card-bio"><p>Everything begin with HelloWorld!</p>
</div>
        
        
            <div id="about-card-job">
                <i class="fa fa-briefcase"></i>
                <br/>
                <p>System Architect</p>

            </div>
        
        
            <div id="about-card-location">
                <i class="fa fa-map-marker"></i>
                <br/>
                Guangzhou
            </div>
        
    </div>
</div>

        <div id="algolia-search-modal" class="modal-container">
    <div class="modal">
        <div class="modal-header">
            <span class="close-button"><i class="fa fa-close"></i></span>
            <a href="https://algolia.com" target="_blank" rel="noopener" class="searchby-algolia text-color-light link-unstyled">
                <span class="searchby-algolia-text text-color-light text-small">by</span>
                <img class="searchby-algolia-logo" src="https://www.algolia.com/static_assets/images/press/downloads/algolia-light.svg">
            </a>
            <i class="search-icon fa fa-search"></i>
            <form id="algolia-search-form">
                <input type="text" id="algolia-search-input" name="search"
                    class="form-control input--large search-input" placeholder="Search "
                    />
            </form>
        </div>
        <div class="modal-body">
            <div class="no-result text-color-light text-center">没有找到文章</div>
            <div class="results">
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/ubuntu_904_install_problem/">
                            <h3 class="media-heading">Ubuntu9.04安装到95%卡死的解决办法</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年4月29日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/ubuntu_3d_desktop_settings/">
                            <h3 class="media-heading">ubuntu3D桌面设置</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月5日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/java_arithmetic/">
                            <h3 class="media-heading">java模拟四则运算软件</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月5日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/java_applet_play_music/">
                            <h3 class="media-heading">java Applet实现播放音乐</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月5日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/the_ubuntu_install_c_cpp_integrated_development_environment/">
                            <h3 class="media-heading">ubuntu安装c/c++集成开发环境</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月8日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/linux_install_jdk/">
                            <h3 class="media-heading">linux安装JDK</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月9日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/linux_eclipse_set_chinese_character_encoding/">
                            <h3 class="media-heading">Linux下Eclipse设置汉字编码</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月9日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/ubuntu_automatically_mount_ntfs_partitions/">
                            <h3 class="media-heading">ubuntu自动挂载NTFS分区</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月9日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/win7_install_vs2010/">
                            <h3 class="media-heading">Win7安装vs2010</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月15日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
                <div class="media">
                    
                    <div class="media-body">
                        <a class="link-unstyled" href="http://www.wurang.net/repair_reinstall_windows_boot_ubuntu/">
                            <h3 class="media-heading">重装Windows后修复引导ubuntu</h3>
                        </a>
                        <span class="media-meta">
                            <span class="media-date text-small">
                                
                                    2010年5月15日
                                
                            </span>
                        </span>
                        <div class="media-content hide-xs font-merryweather"></div>
                    </div>
                    <div style="clear:both;"></div>
                    <hr>
                </div>
                
            </div>
        </div>
        <div class="modal-footer">
            <p class="results-count text-medium"
                data-message-zero="没有找到文章"
                data-message-one="找到 1 篇文章"
                data-message-other="找到 {n} 篇文章">
                找到 114 篇文章
            </p>
        </div>
    </div>
</div>

        
<div id="cover" style="background-image:url('/assets/images/cover1.jpg');"></div>
        <!--SCRIPTS-->
<script src="/assets/js/script-ivwiy10zeb8fifc4swnhkwneuk64y53w2scmdmtp8thi9cqfxh31aowtroaz.min.js"></script>
<!--SCRIPTS END-->


    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.14.1/moment-with-locales.min.js"></script>
    <script src="//cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js"></script>
    <script>
        var algoliaClient = algoliasearch('DUF566743O', 'affe1c089ea75d93916300952a441b6a');
        var algoliaIndex = algoliaClient.initIndex('blog');
    </script>

    </body>
</html>