<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="content-type" content="text/html;charset=utf-8" />
<meta name="description" content="Written things by Daniel Tufvesson" />
<meta property="og:site_name" content="www.waveguide.se" />
<meta property="og:title" content="waveguide.se" />
<meta property="og:description" content="Written things by Daniel Tufvesson" />
<!-- <meta property="og:image" content="image" /> -->
<link rel="stylesheet" type="text/css" href="style.css" />
<link rel="stylesheet" type="text/css" href="overlay.css" />
<link rel="stylesheet" type="text/css" href="style_article.css" />
<title>waveguide.se</title>
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-60715388-1', 'auto');
  ga('send', 'pageview');
</script></head>
<body>

  <div id="main">
    <!-- begin main -->

    <div id="header"><div style="float: right;"><b>www.waveguide.se</b></div><div id="header-logo"><a href="/" class="noline" style="color:white">Hacks & Stuff by Daniel Tufvesson</a></div></div>

    <div id="content">
      <!-- begin content -->
      <span itemscope itemtype="http://schema.org/Article"><div class="article-header"><a class="article-header" href="?article=transceiver-build-part-3"><span itemprop="name">Transceiver build - part 3</span></a></div><div class="article-header2"><span itemprop="datePublished">2018-02-17 15:22 UTC</span></div><div itemprop="articleBody" class="article-content"><a href="javascript:void(0)" onclick="overlaySetImage('/?article=52&file=trx_outside_20180217.jpg'); overlayShow()"><img class="article-image" src="/?article=52&file=trx_outside_20180217.jpg&limit"/></a>

I know these updates are far apart but the project is slowly progressing. This update is about two of the main boards of the transceiver. I decided to make this transceiver a modular design where functions are separated into modules that can be tested and verified separately. This makes it possible for me to experiment with different designs and improve the construction piece by piece. Lets bring back the original block diagram of the transceiver.

<img class="article-image" src="/?article=52&file=trx_blockdiagram.png"/>

The shadowed areas are the ones I'm describing here. Mixer and amplifier board on the left and product detector and modulator board on the right.

<h2>Mixer and amplifier board</h2>This board contains the double balanced mixer and four identical amplifier stages. Two stages for RX and two stages for TX so that for both RX and TX there are one amplifier of each side of the mixer. Which of the stages than are activated is controlled by their respective supply voltage. One supply for RX and one supply for TX. Also between every stage there is a diode switch, also controlled by the supply voltage.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=52&file=trx_mix_board.png'); overlayShow()"><img class="article-image" src="/?article=52&file=trx_mix_board.png&limit"/></a>

The board layout is more or less the same as the schematic so it should be relatively easy to follow. Input and output signals are connected using PCB edge SMA connectors. Top left connector is RF in/out, right is the IF in/out and bottom left is the mixer frequency input directly from the Adafruit Si5351 board.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=52&file=trx_mix_sch.png'); overlayShow()"><img class="article-image" src="/?article=52&file=trx_mix_sch.png&limit"/></a>

For simplicity I have left out the amplifier schematics in the schematic above. Contents of every amplifier block is seen below. It's the same as the amplifier that I designed in <a href="https://www.waveguide.se/?article=transceiver-build-part-1" target="_blank">part one</a> of this transceiver project.

<img class="article-image" src="/?article=52&file=ifamp_sch.png"/>

This amplifier could be substituted to some other 50 ohm amplifier such as an MMIC.

<h2>Product detector and modulator board</h2>This board contains two more of the previous amplifier stages. One in each direction in the left side of the board. They too are switched in and out depending on the RX/TX supply voltage. The product detector in the top right quadrant of the board is unchanged from my initial design. It's working very good and has a very high dynamic range.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=52&file=trx_detmod_board.png'); overlayShow()"><img class="article-image" src="/?article=52&file=trx_detmod_board.png&limit"/></a>

Left SMA connector is the IF in/out and the bottom right SMA connector is the BFO input from the Adafruit Si5351 board. The latest addition to the transceiver is on this board. It's the DSB modulator in the lower right quadrant of the board. (Now my transceiver can finally transmit!) The DSB signal is passed through the crystal filter (between this board and the mixer board) to filter out either the upper or lover sideband depending on the placement of the BFO frequency in regards to the filter pass band.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=52&file=trx_detmod_sch.png'); overlayShow()"><img class="article-image" src="/?article=52&file=trx_detmod_sch.png&limit"/></a>

I decided to use an NE602 for the DSB modulator. It's a very common IC for this purpose. The MC1496 may be better performing but I wanted to give the NE602 a try. I mentioned earlier that I did not want to use the NE602 in the product detector because of it's limited dynamic range. That limitation still apply here but in this case it's okay, I want the SSB transmission to be processed with controlled dynamics anyway to give high output a readability on the receiving end.

My use of the NE602 is however a bit different from most designs I've seen. The output side is simple. It's just a matching transformer to match the NE602 output with the 50 ohm input of the amplifier. The input is a bit unusual and requires some explanation.

I've been disappointed with the NE602 as a DSB modulator in the past because of it's relatively bad carrier suppression. This design tries to mitigate this a bit. One big reason for carrier leakage is bad biasing within the NE602. When used as an RF mixing stage this is not very critical but when used as a DSB modulator this is a big problem. My idea to mitigate this is to add external biasing adjustment and feed the NE602 with balanced audio to keep everything as symmetric as possible. It is also VERY important not to drive the OSC input to hard (I use a 470k series resistor in this design). VR1 sets the bias balance by adjusting the DC levels of IN_A and IN_B of the NE602. DC levels should be equal on both inputs for minimum carrier output. Starting off by centering VR1 and then slowly adjusting to find the spot where the carrier is as low as possible. A multi-turn potentiometer really helps here. Two TL072 op-amps creates the balanced signal for the NE602. The modulation input can take a condenser microphone directly (just need a bias resistor) for a complete modulator. I need to add some kind of speech processor also but that's a future update.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=52&file=trx_inside_20180217.jpg'); overlayShow()"><img class="article-image" src="/?article=52&file=trx_inside_20180217.jpg&limit"/></a>

The inside is a bit bit messy right now but it works! Controller board has been re-designed and the headphone amplifier is just temporary. I will add another analog board to contain the audio processing and filtration along with a proper headphone/speaker amplifier. Next up is filtering. I need some suitable band pass filtering and RF power amplifier. Right now using just the IF amplifiers the output power peaks at around 1mW. Not much but enough to be picked up on a nearby receiver.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=52&file=trx_txrxswitch_sch.png'); overlayShow()"><img class="article-image" src="/?article=52&file=trx_txrxswitch_sch.png&limit"/></a>

One thing I also added was a regulated power supply with RX TX switching. I decided to use linear regulators since they are generally quieter and doesn't generate spurs. They are ineffective and will require cooling but to me it's an okay trade-off.</div><div class="article-footer">by <span itemprop="author">daniel</span> | <a href="?article=transceiver-build-part-3#comments">comments [0]</a><div style="float: right;">radio trx</div></div>
</span><span itemscope itemtype="http://schema.org/Article"><div class="article-header"><a class="article-header" href="?article=amiga-600-video-encoder-upgrade"><span itemprop="name">Amiga 600 video encoder upgrade</span></a></div><div class="article-header2"><span itemprop="datePublished">2017-11-11 12:39 UTC</span></div><div itemprop="articleBody" class="article-content">For those of you who, just as me, are bothered with the bad composite video output of the Amiga 600/1200 I may have found a very effective upgrade. For some time I have wondered why the output lately seemed to be getting significantly worse as years went by. At first I thought it was just never monitors that had bad analog video circuitry compared to older ones but recently I definitely noticed a significant degrading in video output on my machines.

The big plague that is tormenting all of these machines are the leaking electrolytic capacitors. They have come to an age now where generally all of hem are affected and must be dealt with as soon as possible to no be destroyed from within! The replacement of capacitors are an absolute necessity but it's something I won't cover in this article. There are plenty of existing guides out there already. At first a thought that this whole capacitor situation was to blame for the picture degradation but after re-capping two PAL Amiga 600 machines without any obvious improvement in the video output, in fact the re-capping actually made things worse, I began to wonder what was really going on. Both machines eventually started having problem with the reg/green color phase and color flickering. A common problem when the color delay is acting up. Remember, PAL inverts the color phase on every other line and if that phase is unstable it will result in color flickering.

This red/green flickering situation got me wondering about how the video encoder chip in the Amiga 600 actually worked. It uses the CXA1145 chip by Sony. The same chip is used in many other consumer equipment and video game consoles from around that time. The CXA1145 design relies on two specifically delicate external components. One delay line and one band pass filter. Those were my primary suspects. In the Amiga 600 design they are called Z221 and Z222. The datasheet is pretty vague regarding these components. It mentions that the BPF should be centered around 4.43MHz for PAL and 3.58 MHz for NTSC, the color carrier frequencies, and the delay line should be 180ns in both cases. 

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_pre.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_pre.png&limit"/></a>

This is a picture over the area covering the video encoder circuit of an Amiga 600. Commodore did not use the filter and delay line mentioned in the CXA1145 datasheet but instead some other ones (the rectangular shaped RF cans on the left side of the picture). Actually the delay line consists of three cans connected together in serial and the band pass filter is a single can. I have not managed to properly identify them nor source new ones and they are pretty tricky to de-solder so I would rather avoid that. On both the Amiga 600 I recently restored I had to clean the area around Z221 and Z222 thoroughly to get rid of the leaked-out and corrosive capacitor electrolyte. In the picture above the area has been cleaned and all electrolytic capacitors replaced.

I suspect my thorough cleaning is part of what quickly worsened my video problems. My theory is that Z221 and Z222 cans are sensitive to various cleaning detergents. In my case I think my use of isopropyl alcohol in the area is to blame. I could clearly see the picture degrading after cleaning. The components Commodore used for Z221 and Z222 filter and delay line may not be aging gracefully and are not robust enough to survive a leaky capacitor and cleanup. In fact I suspect the leaking capacitor electrolyte itself may even deteriorate the Z221 and Z222. They have a typical RF can style construction with an open bottom against the PCB. Any fluids on the PCB will effectively move up into the can because of the capillary force.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_6.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_6.png&limit"/></a>

This got me thinking about a possible replacement for the Amiga 600/1200 analog video section. Preferably a solution that would fit inside the case and one that also had to be fully reversible. This turned out to be easier than I initially thought! The diagram above is taken from the CXA1145 datasheet and shows the example circuit suggested by Sony and is basically the same design used by Commodore in the Amiga 600/1200. The bandpass filter and delay line are marked with red.

Sony made an updated video encoder chip named <b>CXA1645</b> that is almost pin-compatible with the CXA1145 and it does not depend on external bandpass filter and delay line! Instead those pins are used to provide a real S-video output. 

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_4.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_4.png&limit"/></a>

This is the suggested CXA1645 circuit from the datasheet. Very similar to the CXA1145. I have color coded the main differences.

 <b>Red</b> -  pins with new function compared to existing circuit
 <b>Blue</b> -  new or altered components
 <b>Green</b> - S-video output

The changes required compared to the original circuit is pretty small. What I did was to remove the old CXA1145, replace it with a new CXA1645 and piggy-back the new and changed components around it. Worth mentioning in this case is that the CXA1145 has an audio buffer between pins 8 and 9. Those pins have other functions on the CXA1645, thus the audio to the RF modulator is lost by doing this mod. To me that was no issue but if you really want to keep the RF modulator audio working you could probably just bridge pins 8 and 9 together on the back of the PCB in order to restore that function.

<font color="#ff0000"><b>DISCLAIMER:</b> This is <b>NOT</b> a beginners modification. It requires proper equipment and good surface mounted soldering skills. Make sure you know what you are doing and if in any doubt, leave it to someone who have the proper skills and tools. These computers are not made any more and are only getting fewer and fewer. Do not take any chances. This is only a documentation of what I did. I can not be held responsible for any eventual damages you may cause by performing this modification yourself.</font>

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_1.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_1.png&limit"/></a>
<b>Step one</b> - Removal of the CXA1145.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_2.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_2.png&limit"/></a>
<b>Step two</b> - Isolate changed pins with kapton tape. Placement of tape marked in red.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_3.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_3.png&limit"/></a>
<b>Step three</b> - Solder the new CXA1645 on top.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_5.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_5.png&limit"/></a>
<b>Step four</b> - Add components. The 1% 16k resistor between pin 18 and ground sets the color signal amplitude. I only had 5% resistors so I used one 15k and one 1k i series and measured a few samples using a calibrated LCR mater until I got well within the 1% mark.

<a href="javascript:void(0)" onclick="overlaySetImage('/?article=51&file=amiga600_cxa1645_mod_cat.png'); overlayShow()"><img class="article-image" src="/?article=51&file=amiga600_cxa1645_mod_cat.png&limit"/></a>
<b>Step five</b> - Annoy cat with fine picture and colorful mouse pointer.

This has been a very successful modification. The picture is really good now. Better than I can remember it ever was and this is only composite video. Next step is to explore the possibilities with the CXA1645 S-video output. This modification was performed on an Amiga 600 but should be more or less the same for Amiga 1200 as well.</div><div class="article-footer">by <span itemprop="author">daniel</span> | <a href="?article=amiga-600-video-encoder-upgrade#comments">comments [6]</a><div style="float: right;">commodore amiga</div></div>
</span><span itemscope itemtype="http://schema.org/Article"><div class="article-header"><a class="article-header" href="?article=native-assembler-and-line-editor"><span itemprop="name">Native assembler and line editor</span></a></div><div class="article-header2"><span itemprop="datePublished">2017-10-10 20:10 UTC</span></div><div itemprop="articleBody" class="article-content">To me, a big milestone when designing a computer is that very moment when the computer is capable of editing and compiling its very own source code. One might ague that a BASIC interpreter is a way to do this but I wanted to take this even further. This is a big event in my <a href="http://www.waveguide.se/?article=mc3-a-diy-8-bit-computer" target="_blank">MC3</a> development.

After completing the first really usable version of my file system <a href="http://www.waveguide.se/?article=mcfs202" target="_blank">MCFS2</a> I began working on two crucial accompanying applications, a line editor and an assembler. These two have now reached a level where they are actually usable.

<h2>Line editor</h2>Before there were video terminals the only real teminal-like way of interacting with a computer was through a paper teleprinter, commonly known as a "teletype". Without a video terminal there is no way to move a cursor around. You can only enter commands one line at a time and the result will be printed line by line on a roll of paper. A line editor is a way to edit a text file using this environment. It's a bit like writing a BASIC program actually. Every line of the text file has a number and lines are altered by replacing the entire line. I'm not using a teleprinter but the principle is quite easy to implement and the neat thing is that it will work regardless of the terminal used since no special control codes are needed (unlike a modern editor like emacs or vim). 

My line editor is very simple. The editor can be started without arguments to create an empty file or with a file name argument to load a file into memory for editing. The editor have two modes. A command mode and a text entry mode. When started it enters the command mode indicated by a "::" prompt. Typing "<font color="#00f">help</font>" and &lt;enter&gt; shows the available commands. Commands are not case sensitive and can be shortened by typing only its first letter. For example the command "<font color="#00f">s</font>" is the same as "<font color="#00f">save</font>". At any point, pressing <b>ESC</b> ($1b) will put the editor back in command mode ("::" prompt).

<code>/devel/ # <font color="#00f">edit myfile.asm</font>
:: <font color="#00f">help</font>

 Insert &lt;line number&gt;
 Delete &lt;line number&gt;
 Print &lt;starting line number&gt;
 Save
 Help
 Numbers (on/off)                                                               
 Quit                                                                           
                                                                                
::</code>

There are currently two ways of manipulating text. By <b>inserting</b> a line and by <b>deleting</b> a line. Below is an example of entering a few lines of text. For clarity, I have also typed in the line-ending key strokes.

<code>:: <font color="#00f">insert</font>

0000 :  <font color="#00f">This is a line of text</font> <i>&lt;enter&gt;</i>
0001 :  <font color="#00f">This is another line of text</font> <i>&lt;enter&gt;</i>
0002 :  <font color="#00f">Third line of text</font> <i>&lt;ESC&gt;</i>

::</code>

The <font color="#00f">insert</font> command can also be followed by a line number  to insert a line number to insert lines at a specific place in the file.

<code>:: <font color="#00f">insert 2</font>

0002 :  <font color="#00f">Text squeezed in between existing lines</font> <i>&lt;enter&gt;</i>
0003 :  <font color="#00f">Another line</font> <i>&lt;ESC&gt;</i>

::</code>

The <font color="#00f">print</font> command will print the current file to screen. It's somewhat like the "list" command in BASIC.

<code>:: <font color="#00f">print</font>

0000 :  This is a line of text
0001 :  This is another line of text
0002 :  Text squeezed in between existing lines
0003 :  Another line
0004 :  Third line of text

::</code>

It will print a page of up to 20 lines at once and pressing &lt;enter&gt; will print another 20 line page of text. Pressing &lt;ESC&gt; will abort printout and return to command input. The <font color="#00f">print</font> command can be followed by a line number to begin printing at a specific point of the file.

The <font color="#00f">save</font> command will prompt the user for a filename and save he file to the current directory. If the editor was used edit an existing file, the suggested filename will be the same as the opened file. Saving will always overwrites existing files so some care must be taken when naming files.

The <font color="#00f">number</font> command will turn line number display on and off. Also, line numbers are entered and displayed in HEX format. I may change that in the future.

Download the MC3 line editor:
 - <a href="/?article=50&file=edit.asm" target="_blank">source</a>
 - <a href="/?article=50&file=edit.lst" target="_blank">listing</a>
 - <a href="/?article=50&file=edit.s19" target="_blank">s19</a>

<h2>Assembler</h2>This really is a core piece of software in the MC3 project. I tried to make the code simple to follow rather than effective so it will not win any prizes for speed but it works really well. I wanted to make an assembler that I could use instead of the cross assembler on my PC. It had to be useful and reliable and I think I managed to achieve that. The assembler is made for 6301/6303 CPUs but can be used for the 6800 as well if only 6800 opcodes are used.

This is the quick help that the assembler prints out if no arguments are given.

<code>/devel/ # <font color="#00f">asm</font>
6301/6303 assembler v1.0
Daniel Tufvesson 2017
Syntax: asm [files] [-l] [-e] [-d] [-tXXXX]
Options:
  -l      Generate listing
  -e      Hide errors
  -d      Assemble directly to memory
  -tXXXX  Move symbol table to address $XXXX (default $0100)
/devel/ #
</code>

The basic principle of operation of the assembler is that it sequentially assembles the files given on the command line in two passes. Only a small part of the source is kept in memory at once to make room for as much generated program code as possible. This results in a lot of small file system reads and slows down the process substantially but enables assembly of large source files that would not normally fit in memory, I think it's a reasonable compromise. The first pass identifies all labels and builds up the symbol table in memory. The second pass completes the final assembly. Source files must be defined before any options.

Example:<code>/devel/ # <font color="#00f">asm file1.asm file2.asm file3.asm -l -d -t4000</font></code>

Without any options the assembler only builds up the symbol table and verifies the assembly. No program listing or machine code is generated. Good for verifying source code without using up unnecessary memory. Errors are reported and printed to the screen. To actually generate anything, an option must be given. See explanation of options below.

<b>Generate listing</b> (option -l)
This option prints out the program listing. It will show the filename, line number, assembly line and generated data. When the assembly is complete it will end with printing the symbol table.

<b>Assemble directly to memory</b> (option -d)
This option will tell the assembler to write the generated machine code and data directly to memory.

<b>Move symbol table</b> (option -tXXXX)
When assembling code to memory there is a risk that the symbol table will collide with the generated data. Therefore this option allows for moving the start of the symbol table to another place in memory rather than the default $0100. This is the only option that takes an argument. A four character 16 bit hexadecimal address must follow directly after the "-t".

<b>Hide errors</b> (option -e)
This option will hide all errors from the printout. They will however still show up in the error counter.

As you see from the options, the assembler generates machine code directly to memory. Right now it was the easiest and yet most flexible method to implement. It leaves the program directly executable in memory directly after assembly for fast turn-around time when developing. In the future I will probably extend the functionality to generate S19 files directly. Right now the easiest way to save an executable program back to the file system is to assemble to memory and then save the generated memory range to file. This method also memory efficient since S19 data takes up a lot of space.

<h2>Assembler specifications</h2> - Source file size limited only by the file system
 - Number of source files limited only by the command line length
 - Length of labels is limited only by memory space (longer labels consumes more memory)
 - Machine code generated and written directly to memory
 - Symbol tale can be moved to any unused memory area
 - Direct memory addressing can be controlled by the "&lt;" character as in 6809 assembler

I hope you find this interesting. I've never seen a native 6303/6301 assembler out there in the wild before. This is probably my most serious software project for the MC3 and I will keep improving it in the future.

Download the MC3 native assembler:
 - <a href="/?article=50&file=asm.asm" target="_blank">source</a>
 - <a href="/?article=50&file=asm.lst" target="_blank">listing</a>
 - <a href="/?article=50&file=asm.s19" target="_blank">s19</a>
</div><div class="article-footer">by <span itemprop="author">daniel</span> | <a href="?article=native-assembler-and-line-editor#comments">comments [0]</a><div style="float: right;">MC3 MCFS2 8bit</div></div>
</span><span itemscope itemtype="http://schema.org/Article"><div class="article-header"><a class="article-header" href="?article=calixto-island-adventure"><span itemprop="name">Calixto Island Adventure</span></a></div><div class="article-header2"><span itemprop="datePublished">2017-07-10 18:37 UTC</span></div><div itemprop="articleBody" class="article-content">In my ever ongoing hunt for 6800 software I came across an old FLEX disk with this program on it that looked interesting.

<a href="/?article=49&file=adventur.cmd" target="_blank">adventur.cmd</a>

An executable file and by the name it looked like some kind of adventure. It immediately caught my attention but it crashed when I tried running it on my MC3 computer. Still, I was curious about it. Using my <a href="https://www.waveguide.se/?article=reading-flex-disk-images" target="_blank">cmd2bin</a> converter I was able to extract one continuous chunk of binary data from the CMD file.

<a href="/?article=49&file=adventur.bin" target="_blank">adventur.bin</a> - load address $0100-$32F1

A quick look with a hex editor revealed ASCII contents that definitely looked like a classic text based adventure game. Now this was getting exciting. Further digging and disassembly revealed a quite elaborate program that definitely was a game. A game called "<b>Calixto Island Adventure</b>" made by Mark Data Products in 1981. The text only version of the game was created by <i>Ron Krebs</i>. I believe that may be the one I'm having here. The 6809 and 8086/8088 source has been released to the public by <i>Bob Withers</i> and <i>Steve O'Dea</i>, creators of the CoCo and IBM/PC versions of the game, so I figured it would be okay to distribute this one as well. This is the first and only 6800 release of the game I've ever seen. Below is my disassembled version. I've translated the external FLEX labels. The program relies heavily on jump tables that I have not translated to proper labels so the code can not be re-located as it is right now but I did not need to do that. The code loads and begins at $0100 which is pretty standard for most 6800 programs. Digging into the code too much might also spoil the game play for me so I did not want to risk that!

<a href="/?article=49&file=adventur_disasm.asm" target="_blank">adventur_disasm.asm</a>

The use of the zero page made it clear why the code did not run on my MC3. The 6303 CPU I use have the first 32 bytes of zero page reserved by internal registers and the Calixto Island code had variables starting at $0000 and up. Relocating them 32 ($20) bytes up was the only thing needed to get the game running on my system!

<code>I'M IN PROFESSOR LAGARTO'S COMFORTABLE STUDY.

VISIBLE ITEMS HERE ARE:
A FLIGHT OF STAIRS.
A ROLLTOP DESK.
AN ORIENTAL RUG.
AN ANTIQUE TABLE.

WELCOME TO THE CALIXTO ISLAND ADVENTURE

TELL ME WHAT TO DO ! </code>

The game it self is a classic VERB+NOUN text adventure. User give commands like "OPEN DOOR", "GO PASSAGE", "GET RUG" or "PRESS BUTTON". There is also the possibility to save the current progress to a FLEX file which is a really nice feature given the age of the program. The user can choose the file name of the saved game to load or save. It's also possible to change the save file name during the game. To save a game simply give the command "SAVE GAME". To stop playing say "QUIT". To see what items you are carrying use the command "TAKE INVENTORY". The file access is based on FLEX 2.0 routines so I have converted my MC3 version of the game to use my MCFS2 instead for file access. It was a good practice run for this type of conversion.

<a href="/?article=49&file=adventure_mc3.asm" target="_blank">adventure_mc3.asm</a>

Above is the MC3 version of  Calixto Island Adventure. I have located the FLEX LOAD and SAVE routines and added new ones. This file should be a good start if you want to convert the game for your own system.

Happy adventuring!</div><div class="article-footer">by <span itemprop="author">daniel</span> | <a href="?article=calixto-island-adventure#comments">comments [2]</a><div style="float: right;">MC3 MCFS2 8bit 6800</div></div>
</span><span itemscope itemtype="http://schema.org/Article"><div class="article-header"><a class="article-header" href="?article=mcfs202"><span itemprop="name">MCFS 2.0.2</span></a></div><div class="article-header2"><span itemprop="datePublished">2017-07-04 09:03 UTC</span></div><div itemprop="articleBody" class="article-content">Not long ago MCFS 2.0.1 was released and it's time for an upgrade. This is version 2.0.2 with fixes for the built-in "cd" command and separation of the source code into multiple files for easier read and conversion to other hardware.

<h2>Change Directory command</h2>This command now behaves more like it's UNIX equivalent. It's now possible to enter paths with multiple directories like "cd games/adventure". Paths starting with "/" refers to an absolute path beginning from the root. It's also now possible to go up one directory by "cd .." as commonly available on other systems.

<h2>Source code for MCFS 2.0.2</h2>The source is now a little more structured than the previous version and has been divided into four files.
<a href="/?article=48&file=mcfs2.asm" target="_blank">mcfs2.asm</a> - main code
<a href="/?article=48&file=mcfs2_rtc.asm" target="_blank">mcfs2_rtc.asm</a> - driver for the real-time clock
<a href="/?article=48&file=mcfs2_storage.asm" target="_blank">mcfs2_storage.asm</a> - driver for flash card storage
<a href="/?article=48&file=mcfs2_ram.asm" target="_blank">mcfs2_ram.asm</a> - variables in RAM

<a href="/?article=48&file=format.asm" target="_blank">format.asm</a> - flash card format routine (use with caution)

<h2>Compiling</h2>The source files need to be combined in order to compile MCFS2. Either the assembler have the ability to read all files sequentially or they can simply be concatenated before compiling.

Example 1 - all files at once
<code># as1h mcfs2.asm mcfs2_rtc.asm mcfs2_storage.asm mcfs2_ram.asm</code>
<code># as1h format.asm mcfs2_storage.asm</code>

Example 2 - concatenation
<code># cat mcfs2.asm mcfs2_rtc.asm mcfs2_storage.asm mcfs2_ram.asm > combined_mcfs2.asm
# as1h combined_mcfs2.asm</code>
<code># cat format.asm mcfs2_storage.asm > combined_format.asm
# as1h combined_format.asm</code>

Care must be taken to read the files in the right order. As a reference I have included my resulting S19-files.
<a href="/?article=48&file=mcfs2.s19" target="_blank">mcfs2.s19</a> <a href="/?article=48&file=format.s19" target="_blank">format.s19</a>
</div><div class="article-footer">by <span itemprop="author">daniel</span> | <a href="?article=mcfs202#comments">comments [0]</a><div style="float: right;">MC3 MCFS2 8bit</div></div>
</span><a href="?article&n=5">[show older articles]</a>      <!-- end content -->
    </div>

    <div id="content-right-wrap">
      <!-- begin content right -->
      <nav>

<!-- Search -->
<div class="content-right-object">
  <b>Search</b><br/>
  <form action="?" method="get">
  <input type="text" class="input-text" name="search" style="width: 99%; margin-top: 10px;">
  </form>
</div>

<!-- Nav menu-->
<div class="content-right-object">
<b>Areas</b><br/>
<div class="dashed-bottom"><a class="noline" href="?article">Latest articles</a></div><div class="dashed-bottom"><a class="noline" href="?tool">Tools</a></div><div class="dashed-bottom"><a class="noline" href="?feed">Feed</a></div><div class="dashed-bottom"><a class="noline" href="?about">About</a></div></div>

<!-- Article categories -->
<div class="content-right-object">
<b>MC3 computer</b><br/>
<div class="dashed-bottom"><a class="noline" href="?article=native-assembler-and-line-editor">Native assembler and line editor</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=calixto-island-adventure">Calixto Island Adventure</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=mcfs202">MCFS 2.0.2</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=mcfs2-a-file-system">MCFS2 - A file system!</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=the-ym2413-fm-opll">The YM2413 FM OPLL</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=68xx-cross-assembler">68xx cross assembler</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=mc3-monitor-141">MC3 monitor 1.4.1</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=buffered-i2c-interface">Buffered I&sup2;C interface</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=the-versatile-interface-adapter">The Versatile Interface Adapter</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=a-bigger-case-for-the-mc3">A bigger case for the MC3</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=reading-flex-disk-images">Reading FLEX disk images</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=bitmapped-video-interface">Bitmapped video interface</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=mc3-monitor-14">MC3 monitor 1.4</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=ym-playback-on-the-ymz284">YM playback on the YMZ284</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=ymz284-sound-interface">YMZ284 sound interface</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=automatic-mikbug-patcher">Automatic MIKBUG patcher</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=mc3-monitor-13">MC3 monitor 1.3</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=a-better-serial-port-for-the-mc3">A better serial port for the MC3</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=8-bit-compact-flash-interface">8-bit compact flash interface</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=ds1685-rtc-on-the-motorola-bus">DS1685 RTC on the Motorola bus</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=a-simple-dac-using-the-tlc7524">A simple DAC using the TLC7524</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=io-backplane-for-the-mc3">I/O backplane for the MC3</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=some-6800-programs">Some 6800 programs</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=enclosure-for-the-mc3">Enclosure for the MC3</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=mc3-monitor-11">MC3 monitor 1.1</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=more-ram-for-the-mc3">More RAM for the MC3</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=mc3-a-diy-8-bit-computer">MC3 - A DIY 8-bit computer</a></div>
</div>
<div class="content-right-object">
<b>Commodore</b><br/>
<div class="dashed-bottom"><a class="noline" href="?article=amiga-600-video-encoder-upgrade">Amiga 600 video encoder upgrade</a></div>
</div>
<div class="content-right-object">
<b>Radio</b><br/>
<div class="dashed-bottom"><a class="noline" href="?article=transceiver-build-part-3">Transceiver build - part 3</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=transceiver-build-part-2">Transceiver build - part 2</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=transceiver-build-part-1">Transceiver build - part 1</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=ne612-receiver-experiment">NE612 receiver experiment</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=software-defined-radio-with-rtl-sdr">Software defined radio with rtl-sdr</a></div>
</div>
<div class="content-right-object">
<b>Linux</b><br/>
<div class="dashed-bottom"><a class="noline" href="?article=upgrading-debian-wheezy-to-jessie">Upgrading Debian Wheezy to Jessie</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=setting-up-nginx-with-php-fpm-under-debian-wheezy">Setting up NGINX with PHP-FPM under Debian Wheezy</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=upgrading-debian-squeeze-to-wheezy">Upgrading Debian Squeeze to Wheezy</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=how-to-quickly-remove-all-unused-packages-under-debian">How to quickly remove all unused packages under Debian</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=speed-up-that-sluggish-iceweasel-firefox">Speed up that sluggish Iceweasel/Firefox</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=software-defined-radio-with-rtl-sdr">Software defined radio with rtl-sdr</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=replacing-a-failed-disk-in-an-md-array">Replacing a failed disk in an MD array</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=programming-pics-using-the-pickit2-and-pk2cmd">Programming PICs using the PICKit2 and pk2cmd</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=getting-e-mu-1820-running-under-linux">Getting E-MU 1820 running under Linux</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=create-you-own-customized-debian-repository-mirror">Create you own customized Debian repository mirror</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=verifying-consistancy-of-an-md-array-under-debian">Verifying consistancy of an MD array under Debian</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=setting-up-raid-with-mdadm-under-debian">Setting up RAID with mdadm under Debian</a></div>
</div>

<div class="content-right-object">
<b>Other</b><br/>
<div class="dashed-bottom"><a class="noline" href="?article=panasonic-dmc-g6-hot-pixel-removal">Panasonic DMC-G6 hot pixel removal</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=selecting-a-specific-kms-server-for-windows-activation">Selecting a specific KMS server for Windows activation</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=the-neato-xv-25-vacuum-cleaner">The Neato XV-25 vacuum cleaner</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=installing-net-35-under-windows-8">Installing .NET 3.5 under Windows 8</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=the-korg-monotron-duo">The Korg Monotron Duo</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=creating-dvb-t-compatible-mpeg2-streams-using-ffmpeg">Creating DVB-T compatible MPEG2 streams using FFMPEG</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=rounded-corners-with-css">Rounded corners with CSS</a></div>
<div class="dashed-bottom"><a class="noline" href="?article=the-site-is-up">The site is up</a></div>
</div>

<!-- Bottom -->
<div class="content-right-object">
<center><a href="http://www.debian.org/" target="_blank"><img src="images/debian_logo.png" border="0" alt="Powered by Debian" title="Powered by Debian"></a>
<a href="http://www.w3.org/html/logo/" target="_blank"><img src="/images/HTML5_Logo_64.png" alt="HTML5 Powered" title="HTML5 Powered"></a>
<a href="http://www.nginx.org/" target="_blank"><img src="images/nginx_logo.png" border="0" alt="Powered by NGINX" title="Powered by NGINX"></a>
<!--<a href="http://www.startssl.com/" target="_blank"><img src="images/startcom_secured_lock_80x15.png" border="0" alt="SSL By StartCom" title="SSL By StartCom"></a>--></center>
</div>

<!-- SSL -->
<div class="content-right-object">
<font color="red">You are not using SSL/HTTPS</font><br/><a href="https://www.waveguide.se/">[click here to go encrypted]</a></div>

</nav>
      <!-- end content right -->
    </div>
    
    <div id="footer">&copy; Daniel Tufvesson</div>
    
    <!-- end main -->
  </div>

  <!-- Overlay -->
  <div id="overlay-box"></div>
  <div id="overlay-fade"></div>
  <script type="text/javascript" src="overlay.js"></script> 

</body>
</html>