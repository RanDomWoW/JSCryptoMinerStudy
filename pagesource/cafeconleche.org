<!DOCTYPE html      PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"     "DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en-US"xml:lang="en-US"><head><title>Cafe con Leche XML News and Resources</title><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="description" content="Cafe con Lecheis  the preeminent independent source of XML informationon the net.Cafe con Leche is neither beholden to specific companies norto advertisers. At Cafe con Leche you'll find many resources tohelp you develop your XML skillshere including daily news summaries,examples, book reviews, mailing lists and more." /><link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon" /><link rel="alternate" type="application/atom+xml" title="Cafe con Leche News" href="today.atom" /><meta name="keywords" content="XML, Cafe con Leche, XML Bible,XML: Extensible Markup Language, XML in a Nutshell, Processing XML with Java, Effective XML" /><style type="text/css">body {	color: black;	background-color:white;	}#Header { /*/*/	position:absolute;	top:1ex; /*/*/	margin:10px 10px 2ex 10px;	padding:1ex;	}#Content {	margin:6ex 10em 50px 10px;	padding:10px 100px 10px 10px;	}#Menu { /*/*/	position:absolute;	top:12ex;	right:20px;	max-width: 30%;	min-width: 170px;	width:10em;  /*/*/	padding:10px;	background-color:#eee;	color: black;	border:1px dashed #999;	}	</style><script type="text/javascript" language="javascript"><!--/* Only sunsites are allowed to mirror this page and thenonly with explicit, prior permission. For details,send email to elharo @ ibiblio.org */if (location.protocol.toLowerCase().indexOf("file") != 0 ) {   if (0 > location.host.toLowerCase().indexOf("cafeconleche.org")   && 0 > location.host.toLowerCase().indexOf("localhost")    && 0 > location.host.toLowerCase().indexOf("ibiblio.org")) {    location.href="http://www.cafeconleche.org/";  }}// --></script></head><body bgcolor="#FFFFFF" text="#000000"><div id="Content"><h1 style="text-align: center"><img src="cup.gif" width="89" height="67" alt="Cup of " />Cafe con Leche XML News and Resources</h1><h2 style="color: #AA0000" id="quote">Quote of the Day</h2><quoteoftheday id="quote2010April6"  class="2010-04-06T08:45:24Z"><blockquote cite="http://www.boingboing.net/2010/04/02/why-i-wont-buy-an-ipad-and-think-you-shouldnt-either.html"><div><p>I remember the early days of the web -- and the last days of CD ROM -- when there was this mainstream consensus that the web and PCs were too durned geeky and difficult and unpredictable for "my mom" (it's amazing how many tech people have an incredibly low opinion of their mothers). If I had a share of AOL for every time someone told me that the web would die because AOL was so easy and the web was full of garbage, I'd have a lot of AOL shares.</p><p>And they wouldn't be worth much.</p></div></blockquote><p>--Cory Doctorow <br class="empty" />Read the rest in <a href="http://www.boingboing.net/2010/04/02/why-i-wont-buy-an-ipad-and-think-you-shouldnt-either.html">Why I won't buy an iPad (and think you shouldn't, either) </a></p></quoteoftheday><h2 style="color: #AA0000" id="today">Today's News</h2><today date="Tuesday, April 6, 2010" id="news2010April6"><div id='April_6_2010_25616' class='2010-04-06T07:07:56Z'><p>I've released <a href="http://www.xom.nu/">XOM 1.2.5</a>,  my free-as-in-speech (LGPL)dual streaming/tree-based API for processing XML with Java.1.2.5 is a very minor release. The only visible change is that Builder.build((Reader) null) now throws a NullPointerException instead of a confusing MalformedURLException. I've also added support for Maven 2, and hope to get the packages uploaded to the central repository in a week or two. </p></div><hr class='empty'/><div id='April_6_2010_25791' class='2010-04-06T07:10:51Z'><p>In other news, I have had very little time to work on this site lately.In order to have any time to work on other projects including XOM and Jaxen, I've had to let this site slide. I expect to have more news about that soon. </p></div><hr class='empty'/><div id='April_6_2010_26099' class='2010-04-06T07:15:59Z'><p>Also, speaking of Jaxen, I noticed that the <a href="http://jaxen.codehaus.org/">website</a> has been a little out of date for a while now because I neglected to update the <a href="http://jaxen.codehaus.org/releases.html">releases page</a> when 1.1.2 was released in 2008. Consequently, a lot of folks have been missing out on the latest bug fixes and optimizations. If you're still using Jaxen 1.1.1 or earlier, please upgrade when you get a minute. Also, note that the official site is http://jaxen.codehaus.org/. jaxen.org is a domain name spammer. I'm not sure who let that one slide, but we'll have to see about grabbing it back one of these days. </p></div></today>  <hr /><p><a href="oldnews/news2010April6.html">Permalink to Today's News</a> |<a href="#recent">Recent News</a> |<a href="http://www.cafeaulait.org/">Today's Java News on Cafe au Lait</a> |<a href="http://cafe.elharo.com/">The Cafes</a> |<a href="news2010.html">Older News</a> |<a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;elharo%40ibiblio%2Eorg">E-mail Elliotte Rusty Harold</a></p><hr /><h2 style="color: #AA0000">Recommended Reading</h2><p> Selected content that might have some relevance or interest for this site's visitors:</p><ul id="reading"><!-- reading --><?php     include 'recommended.html'; ?></ul><p>You can also see <a href="readings2010.phtml">previousrecommended reading</a> or subscribe to the <a href="reading.rss">recommended reading RSS feed</a>  if you like.</p><hr /><h2 style="color: #AA0000" id="recent"><a name="recent">Recent News</a></h2><dl id="recentnews"><!-- recent --><dt id="news2010February12">Friday, February 12, 2010 (<a href="oldnews/news2010February12.html">Permalink</a>)</dt><dd><div id='February_12_2010_24187' class='2010-02-12T07:43:07Z'><p>Yesterday I figured out how to process form input.Today I figured out how to parse strings into nodes in eXist. This is very eXist specific, but briefly:</p><pre>let $doc := "&lt;html xmlns='http://www.w3.org/1999/xhtml'>&lt;div>foo&lt;/div>&lt;/html>"let $list := util:catch('*',            (util:parse($doc)),            ($util:exception-message)) return$list</pre><p>I'll need this for posts and comments. There's also a <code>parse-html</code>function but it's based on the flaky NekoHTML instead of the m,orereliable TagSoup. </p></div></dd><dt id="news2010February10">Wednesday, February 10, 2010 (<a href="oldnews/news2010February10.html">Permalink</a>)</dt><dd><div id='February_10_2010_20915' class='2010-02-10T06:49:35Z'><p>I'm slowly continuing to work on the new backend. I've finally gotten indexing to work. It turns out that eXist's namespace hanlding for index configuration files is broken in 1.4.0, but that shouldn be fixed in the release. I've also manged to get the source built and most of the tests to run so I can contribute patches back. Next up I'm looking into the supoprt for the Atom Publishing Protocol. </p></div></dd><dt id="news2010February3">Wednesday, February 3, 2010 (<a href="oldnews/news2010February3.html">Permalink</a>)</dt><dd><div id='February_3_2010_24223' class='2010-02-05T07:44:43Z'><p>I spent a morning debugging a problem that I have now boiled down to this test case. The following queryprints 3097:</p><pre>&lt;html>{let $num := count(collection("/db/quotes")/quote)return $num}&lt;/html></pre>and this query prints 0:<pre>&lt;html xmlns="http://www.w3.org/1999/xhtml">{let $num := count(collection("/db/quotes")/quote)return $num}&lt;/html></pre><p>The only difference is the default namespace declaration. In thedocuments being queried the <code>quote</code> elements are indeed in no namespace.Much to my surprise XQuery has broken the semantics of XPath 1.0 by  applying default namespaces tounqualified names in path expressions. Who thought it wouldbe a good idea to break practice with XSLT, every single XPathimplementation on the planet, and years of experience anddocumentation?There's an argument to be made for default namespaces applying in pathexpressions, but the time for that argument to be made was 1998. Oncethe choice was made, the cost of switching was far higher than anyincremental improvement you might make. Stare decisis isn't just forthe supreme court.</p></div></dd><dt id="news2010January30">Saturday, January 30, 2010 (<a href="oldnews/news2010January30.html">Permalink</a>)</dt><dd><div id='January_30_2010_35023' class='2010-01-30T10:44:43Z'><p>XQuery executing for about an hour now. O(N^2) algorithm perhaps?Maybe I should learn about indexes? Or is eXist just hung?</p><pre><code>declare namespace xmldb="http://exist-db.org/xquery/xmldb";declare namespace html="http://www.w3.org/1999/xhtml";declare namespace xs="http://www.w3.org/2001/XMLSchema";declare namespace atom="http://www.w3.org/2005/Atom";for $date in distinct-values(    for $updated in collection("/db/news")/atom:entry/atom:updated    order by $updated descending    return xs:date(xs:dateTime($updated)))    let $entries := collection("/db/news")/atom:entry[xs:date(xs:dateTime(atom:updated)) = $date]return &lt;div>  for $entry in $entries  return $entry/atom:title  &lt;hr />&lt;/div></code></pre></div></dd><dt id="news2010January29">Friday, January 29, 2010 (<a href="oldnews/news2010January29.html">Permalink</a>)</dt><dd><div id='January_29_2010_24216' class='2010-01-29T07:44:36Z'><p>I've got a lot of the old data loaded into eXist (news and quotes; readings and other pages I still have to think about). I'm now focusing on how toget it back out again and put it in web pages. Once that's done, the remaining piece is setting up some system for putting new data in. It will probably be a fairly simple HTML form, but some sort of markdown support might be nice. Perhaps I can hack something together that will insert paragraphs if there are no existing paragraphs, and otherwise leave the markup alone. I'm also divided on the subject of whether to store the raw text, the XHTML converted text, or both. This will be even more critical when I add comment support. </p></div></dd><dt id="news2010January26">Tuesday, January 26, 2010 (<a href="oldnews/news2010January26.html">Permalink</a>)</dt><dd><div id='January_26_2010_25980' class='2010-01-26T07:13:00Z'><p>I've more or less completed the script that converts the oldnews into Atom entry documents:</p><pre><code>xquery version "1.0";declare namespace xmldb="http://exist-db.org/xquery/xmldb";declare namespace html="http://www.w3.org/1999/xhtml";declare namespace xs="http://www.w3.org/2001/XMLSchema";declare namespace atom="http://www.w3.org/2005/Atom";declare namespace text="http://exist-db.org/xquery/text";declare function local:leading-zero($n as xs:decimal) as xs:string {    let $result := if ($n >= 10)     then string($n)    else concat("0", string($n))   return $result};declare function local:parse-date($date as xs:string) as xs:string {    let $day := normalize-space(substring-before($date, ","))    let $string-date := normalize-space(substring-after($date, ","))    let $y1 := normalize-space(substring-after($string-date, ","))    (: strip permalink :)    let $year := if (contains($y1, "("))                 then normalize-space(substring-before($y1, "("))                 else $y1        let $month-day := normalize-space(substring-before($string-date, ","))    let $months := ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")        let $month := substring-before($month-day, " ")    let $day-of-month := local:leading-zero(xs:decimal(substring-after($month-day, " ")))    let $monthnum := local:leading-zero(index-of($months,$month))    (: I don't necessarily know the time so I'll pick something vaguely plausible. :)    return concat($year, "-", $monthnum, "-", $day-of-month, "T07:00:31-05:00")};declare function local:first-sentence($text as xs:string) as xs:string {    let $r0 := normalize-space($text)    let $r1 := substring-before($text, '. ')    let $penultimate := substring($r1, string-length($r1)-1, 1)    let $sentence := if ($penultimate != " " or not(contains($r1, ' ')))                   then concat($r1, ".")                   else concat($r1, ". ", local:first-sentence($r1))    return $sentence};declare function local:make-id($date as xs:string, $position as xs:integer) as xs:string {    let $day := normalize-space(substring-before($date, ","))    let $string-date := normalize-space(substring-after($date, ","))    let $y1 := normalize-space(substring-after($string-date, ","))    (: strip permalink :)    let $year := if (contains($y1, "("))                 then normalize-space(substring-before($y1, "("))                 else $y1    let $month-day := normalize-space(substring-before($string-date, ","))    let $months := ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")        let $month := substring-before($month-day, " ")    let $day-of-month := local:leading-zero(xs:decimal(substring-after($month-day, " ")))    let $monthnum := local:leading-zero(index-of($months,$month))    return concat($month, "_", $day-of-month, "_", $year, "_", $position)};declare function local:permalink-date($date as xs:string) as xs:string {    let $day := normalize-space(substring-before($date, ","))    let $string-date := normalize-space(substring-after($date, ","))    let $y1 := normalize-space(substring-after($string-date, ","))    (: strip permalink :)    let $year := if (contains($y1, "("))                 then normalize-space(substring-before($y1, "("))                 else $y1    let $month-day := normalize-space(substring-before($string-date, ","))    let $month := substring-before($month-day, " ")    let $day-of-month := xs:decimal(substring-after($month-day, " "))    return concat($year, $month, $day-of-month)};for $newsyear in (1998 to 2009)return for $dt in doc(concat("file:///Users/elharo/cafe%20con%20Leche/news", $newsyear ,".html"))/html:html/html:body/html:dl/html:dtlet $dd := $dt/following-sibling::html:dd[1]let $date := string($dt)let $itemstoday := count($dd/html:div)return    for $item at $count in $dd/html:div    let $sequence := $itemstoday - $count + 1    let $id := if ($item/@id)               then string($item/@id)               else local:make-id($date, $sequence)                         let $published := if ($item/@class)                 then string($item/@class)                 else local:parse-date($date)    let $link := concat("http://www.cafeconleche.org/#", $id)    let $permalink := if ($item/@id)                      then concat("http://www.cafeconleche.org/oldnews/news", local:permalink-date($date), ".html#", $item/@id)                      else concat("http://www.cafeconleche.org/oldnews/news", local:permalink-date($date), ".html")    return    &lt;atom:entry xml:id="{$id}">        &lt;atom:author>         &lt;atom:name>Elliotte Rusty Harold&lt;/atom:name>         &lt;atom:uri>http://www.elharo.com/&lt;/atom:uri>       &lt;/atom:author>       &lt;atom:id>{$link}&lt;/atom:id>       &lt;atom:title>{local:first-sentence(string($item))}&lt;/atom:title>       &lt;atom:updated>{$published}&lt;/atom:updated>       &lt;atom:content type="xhtml" xml:lang="en"            xml:base="http://www.cafeconleche.org/"           xmlns="http://www.w3.org/1999/xhtml">{$item/node()}&lt;/atom:content>       &lt;link rel="alternate" href="{$link}"/>       &lt;link rel="permalink" href="{$permalink}"/>    &lt;/atom:entry></code></pre><p>I should probably figure out how to remove some of the duplicate date parsing code, but it's basically a one-off migration script so I may not bother.</p><p>I think I have enough in place now that I can start setting up the templates for the main index.html page and the quote and news archives. Then I can start exploring the authoring half of the equation. </p></div></dd><dt id="news2010January25">Monday, January 25, 2010 (<a href="oldnews/news2010January25.html">Permalink</a>)</dt><dd><div id='January_25_2010_23081' class='2010-01-25T06:25:41Z'><p>I'm beginning to seriously hate the runtime error handling (or lack thereof) in XQuery.It's just too damn hard to debug what's going wrong where compared to Java.You can't see where the bad data is coming from, and there's no try-catch facility to help you out. Now that I think about it, I had very similar problems with Haskell last year. I wonder if this is a common issue with functional languages?  </p></div></dd><dt id="news2010January21">Thursday, January 21, 2010 (<a href="oldnews/news2010January21.html">Permalink</a>)</dt><dd><div id='January_21_2010_24565' class='2010-01-21T07:49:25Z'><p>I've just about finished importing all the old quotes into eXist.(There was quite a bit of cleanup work going back 12 years. The format changed solowly over time.) Next up is the news.</p><p>I am wondering if maybe this is backwards. Perhaps first I should build the forms and backend for posting new content, and then import the old data? After all, it's the new content people are interested in. There's not that much call for breaking XML news from 1998. :-)</p></div></dd><dt id="news2010January20">Wednesday, January 20, 2010 (<a href="oldnews/news2010January20.html">Permalink</a>)</dt><dd><div id='January_20_2010_18085' class='2010-01-20T05:01:25Z'><p>Parsing a date in the form "Wednesday, January 20, 2010" in XQuery:</p><pre>xquery version "1.0";declare function local:leading-zero($n as xs:decimal) as xs:string {    let $result := if ($n >= 10)     then string($n)    else concat("0", string($n))   return $result};declare function local:parse-date($date as xs:string) as element() {    let $day := normalize-space(substring-before($date, ","))    let $string-date := normalize-space(substring-after($date, ","))    let $year := normalize-space(substring-after($string-date, ","))    let $month-day := normalize-space(substring-before($string-date, ","))    let $months := ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")        let $month := substring-before($month-day, " ")    let $day-of-month := number(substring-after($month-day, " "))        return       &lt;postdate>        &lt;day>{$day}&lt;/day>        &lt;date>{$year}-{local:leading-zero(index-of($months,$month))}-{local:leading-zero($day-of-month)}&lt;/date>      &lt;/postdate>};local:parse-date("Monday, April 27, 2009")</pre></div></dd><dt id="news2010January19">Tuesday, January 19, 2010 (<a href="oldnews/news2010January19.html">Permalink</a>)</dt><dd><div id='January_19_2010_24487' class='2010-01-19T07:48:07Z'><p>Today I went from merely splitting the quotes files apart into indiviodual quotes to actually storing them back into the database:</p><pre>xquery version "1.0";declare namespace xmldb="http://exist-db.org/xquery/xmldb";declare namespace html="http://www.w3.org/1999/xhtml";for $dt in doc("/db/quoteshtml/quotes2009.html")/html:html/html:body/html:dl/html:dtlet $id := string($dt/@id)let $date := string($dt)let $dd := $dt/following-sibling::html:dd[1]let $quote := $dd/html:blockquotelet $cite := string($quote/@cite)let $source := $quote/following-sibling::*let $sourcetext := normalize-space(substring-after($source, "--"))let $author := if (contains($sourcetext, "Read the"))               then substring-before($sourcetext, "Read")               else substring-before($sourcetext, "on the")let $location := if ($source/html:a)               then $source/html:a               else substring-after($sourcetext, "on the")let $quotedate := if (contains($sourcetext, "list,"))               then  normalize-space(substring-after($sourcetext, "list,"))               else ""let $justlocation := if (contains($location, "list,"))               then  normalize-space(substring-after(substring-before($sourcetext, ","), "on the"))               else $locationlet $singlequote := &lt;quote>   &lt;id>{$id}&lt;/id>   &lt;postdate>{$date}&lt;/postdate>   &lt;content>{$quote}&lt;/content>   &lt;cite>{$cite}&lt;/cite>   &lt;author>{$author}&lt;/author>   &lt;location>{$justlocation}&lt;/location>   {     if ($quotedate)      then &lt;quotedate>{$quotedate}&lt;/quotedate>     else ""   }&lt;/quote>let $name := concat("quote_", $id)let $store-return := xmldb:store("quotes", $name, $singlequote)return&lt;store-result>   &lt;store>{$store-return}&lt;/store>   &lt;documentname>{$name}&lt;/documentname>&lt;/store-result></pre><p>I suspect the next thing I should do is work on iomproving the dates somewhat since I'll likely want to sort and query by them. Right now they're human reabale but not so easy to process. E.g.</p>    <p><code>&lt;postdate>Monday, April 27, 2009&lt;/postdate></code></p><p>I should try to turn this into </p>    <pre><code>&lt;postdate>  &lt;day>Monday&lt;/day>   &lt;date>2009-04-27&lt;/date>&lt;/postdate></code></pre><p>Time to read up on the <a href="http://www.w3.org/TR/xpath-functions/#durations-dates-times">XQuery date and time functions</a>. Hmm, looks like it's going to be regular expressions after all. </p></div></dd><dt id="news2010January15">Friday, January 15, 2010 (<a href="oldnews/news2010January15.html">Permalink</a>)</dt><dd><div id='January_15_2010_19676' class='2010-01-15T05:28:56Z'><p>I've converted all the old quotes archives to well-formed (though not necessarily valid) XHTML and uploaded them into eXist. Now I have to come up with an XQuery that breaks them up into individual quotes. This is proving trickier than expected (and I expected it to be pretty tricky, especially since a lot of the old quotes aren't in perfectly consistent formats.</p><p> Maybe it's time to try out Oxygen's <a href="http://www.oxygenxml.com/xquery_debugger.html">XQuery debugger</a> since they sent me a freebie? If only the interface weren't such a horrow show. They say they have a debugger but I can't find it, and the buttons they're using in the screencast don't seem to be present in the latest version. In the meantime, can anyone see the syntax error in this code?</p><pre>xquery version "1.0";declare namespace xmldb="http://exist-db.org/xquery/xmldb";declare namespace html="http://www.w3.org/1999/xhtml";     for $dt in doc("/db/quoteshtml/quotes2010.html")/html:html/html:body/html:dl/html:dt        let $id := string($dt/@id)        let $date := string($dt)        let $dd := $dt/following-sibling::html:dd        let $quote := $dd/html:blockquote        let $cite := string($quote/@cite)        let $source := $quote/following-sibling::html:p        let $author := normalize-space(substring-after($source/*[1], "--"))     return        &lt;quote>           &lt;id>{$id}&lt;/id>           &lt;date>{$date}&lt;/date>           &lt;quote>{$quote}&lt;/quote>           &lt;cite>{$cite}&lt;/cite>           &lt;source>{$quote}&lt;/source>           &lt;author>{$author}&lt;/author>        &lt;/quote></pre><p>The error message from exist is "The actual cardinality for parameter 1 does not match the cardinality declared in the function's signature: string($arg as item()?) xs:string. Expected cardinality: zero or one, got 4."</p><p>Found the bug: the debugger wasn't very helpful (once I found it--apparently Author and Oxygen are not the same thing), but Saxon had much better error messages than eXist.I needed to change <code>let $dd := $dt/following-sibling::html:dd</code> to<code>let $dd := $dt/following-sibling::html:dd[1]</code>.eXist didn't tell me which line had the problem so I was looking in the wrong place. Saxon pointed me straight to it. Score 1 for Saxon.</p><p>Here's the finished script. It works for at least the lasy couple of years.I still have to test it out on some of the older files:</p><pre>xquery version "1.0";declare namespace xmldb="http://exist-db.org/xquery/xmldb";declare namespace html="http://www.w3.org/1999/xhtml"; for $dt in doc("/db/quoteshtml/quotes2009.html")/html:html/html:body/html:dl/html:dt    let $id := string($dt/@id)    let $date := string($dt)    let $dd := $dt/following-sibling::html:dd[1]    let $quote := $dd/html:blockquote    let $cite := string($quote/@cite)    let $source := $quote/following-sibling::*    let $sourcetext := normalize-space(substring-after($source, "--"))    let $author := if (contains($sourcetext, "Read the"))                   then substring-before($sourcetext, "Read")                   else substring-before($sourcetext, "on the")    let $location := if ($source/html:a)                   then $source/html:a                   else substring-after($sourcetext, "on the")    let $quotedate := if (contains($sourcetext, "list,"))                   then  normalize-space(substring-after($sourcetext, "list,"))                   else ""    let $justlocation := if (contains($location, "list,"))                   then  normalize-space(substring-after(substring-before($sourcetext, ","), "on the"))                   else $location return    &lt;quote>       &lt;id>{$id}&lt;/id>       &lt;postdate>{$date}&lt;/postdate>       &lt;quote>{$quote}&lt;/quote>       &lt;cite>{$cite}&lt;/cite>       &lt;author>{$author}&lt;/author>       &lt;location>{$justlocation}&lt;/location>       {         if ($quotedate)          then &lt;quotedate>{$quotedate}&lt;/quotedate>         else ""       }    &lt;/quote></pre></div></dd><dt id="news2010January14">Thursday, January 14, 2010 (<a href="oldnews/news2010January14.html">Permalink</a>)</dt><dd><div id='January_14_2010_23563' class='2010-01-14T07:33:43Z'><p>The XQuery work continues to roll along. I think I've roughly figured out to configure the server. I found and reported a few more bugs in eXists, none too critical.I now have eXist serving this entire web site on my local box, though I haven't changed the server here on IBiblio yet. That's still Apache and PHP. The next step is to convert all the static files from the last 12 years--quotes, news, books, conferences, etc.--into smaller documents in the database. For instance, each quote will be its own document. Then I have to rewrite the pages the as XQuery "templates" that query the database. From that point I can add suppor for new posts, submissions, and comments via a web browser and forms.</p></div></dd><dt id="news2010January8">Friday, January 8, 2010 (<a href="oldnews/news2010January8.html">Permalink</a>)</dt><dd><div id='January_8_2010_26761' class='2010-01-08T07:26:01Z'><p>I didn't really like the format of yesterday's Twitter dump so today I opened another can of XQuery ass-kicking to improve it. First, let's group by date:</p><pre>xquery version "1.0";declare namespace atom="http://www.w3.org/2005/Atom";let $tweets := for $entry in reverse(document("/db/twitter/elharo")/atom:feed/atom:entry)return   &lt;div>&lt;date>{substring-before($entry/atom:updated/text(), "T")}&lt;/date> &lt;p> &lt;span>{substring-before(substring-after($entry/atom:updated/text(), "T"), "+")} UTC&lt;/span> {substring-after($entry/atom:title/text(), "elharo:")}&lt;/p>&lt;/div>return   for $date in distinct-values($tweets/date)  return &lt;div>&lt;h3>{$date}&lt;/h3>   {   for $tweet in $tweets   where $tweet/date = $date   return $tweet/p  }&lt;/div></pre><p>Now let's hyperlink the URLs:</p><pre>xquery version "1.0";declare namespace atom="http://www.w3.org/2005/Atom";let $tweets := for $entry in reverse(document("/db/twitter/elharo")/atom:feed/atom:entry)return   &lt;div>&lt;date>{substring-before($entry/atom:updated/text(), "T")}&lt;/date> &lt;p> &lt;span>{substring-before(substring-after($entry/atom:updated/text(), "T"), "+")} &lt;/span>{replace(substring-after($entry/atom:title/text(), "elharo:"), "(http://[^\s]+)", "&lt;a href='http://$1'>http://$1&lt;/a>")}&lt;/p>&lt;/div>return   for $date in distinct-values($tweets/date)  return &lt;div>&lt;h3>{$date}&lt;/h3>   {   for $tweet in $tweets   where $tweet/date = $date   return $tweet/p  }&lt;/div></pre><p>Let's do the same for @names:</p><pre>xquery version "1.0";declare namespace atom="http://www.w3.org/2005/Atom"; let $tweets := for $entry in reverse(document("/db/twitter/elharo")/atom:feed/atom:entry)return   &lt;div>&lt;date>{substring-before($entry/atom:updated/text(), "T")}&lt;/date> &lt;p> &lt;span>{substring-before(substring-after($entry/atom:updated/text(), "T"), "+")} &lt;/span>{replace (    replace(substring-after($entry/atom:title/text(), "elharo:"),         "(http://[^\s]+)",         "&lt;a href='$1'>$1&lt;/a>"),    " @([a-zA-Z]+)",    " &lt;a href='http://twitter.com/$1'>@$1&lt;/a>")}&lt;/p>&lt;/div>return   for $date in distinct-values($tweets/date)  return &lt;div>&lt;h3>{$date}&lt;/h3>   {   for $tweet in $tweets   where $tweet/date = $date   return $tweet/p  }&lt;/div></pre><p>And one more time for hash tags:</p><pre>xquery version "1.0";declare namespace atom="http://www.w3.org/2005/Atom"; let $tweets := for $entry in reverse(document("/db/twitter/elharo")/atom:feed/atom:entry)return   &lt;div>&lt;date>{substring-before($entry/atom:updated/text(), "T")}&lt;/date> &lt;p> &lt;span>{substring-before(substring-after($entry/atom:updated/text(), "T"), "+")} &lt;/span>{replace (    replace (        replace(substring-after($entry/atom:title/text(), "elharo:"),             "(http://[^\s]+)",             "&lt;a href='$1'>$1&lt;/a>"),        " @([a-zA-Z]+)",        " &lt;a href='http://twitter.com/$1'>@$1&lt;/a>"    ),    " #([a-zA-Z]+)",    " &lt;a href='http://twitter.com/search?q=#$1'>#$1&lt;/a>")}&lt;/p>&lt;/div>return   for $date in distinct-values($tweets/date)  return &lt;div>&lt;h3>{$date}&lt;/h3>   {   for $tweet in $tweets   where $tweet/date = $date   return $tweet/p  }&lt;/div></pre><p>And here's the <a href="http://www.elharo.com/blog/software-development/xml/2010/01/08/all-my-tweets-in-2009/">finished result</a>. </p></div></dd><dt id="news2010January7">Thursday, January 7, 2010 (<a href="oldnews/news2010January7.html">Permalink</a>)</dt><dd><div id='January_7_2010_27569' class='2010-01-07T08:39:29Z'><p>This morning a simple practice exercise to get my toes wet. First load my Tweets from their Atom feed into eXist:</p><pre>xquery version "1.0";declare namespace xmldb="http://exist-db.org/xquery/xmldb";let $collection := xmldb:create-collection("/db", "twitter")let $filename := ""let $URI := xs:anyURI("file:///Users/elharo/backups/elharo_statuses.xml")let $retcode := xmldb:store($collection, "elharo", $URI)return $retcode</pre><p>Then generate HTML of each tweet:</p><pre>xquery version "1.0";declare namespace atom="http://www.w3.org/2005/Atom";for $entry in document("/db/twitter/elharo")/atom:feed/atom:entry   return   &lt;p>{$entry/atom:updated/text()} {substring-after($entry/atom:title/text(), "elharo:")}&lt;/p></pre><p>Can I reverse them so they go forward in time? Yes, easily:</p><pre>for $entry in reverse(document("/db/twitter/elharo")/atom:feed/atom:entry)</pre><p>Now how do I dump that to a file? Maybe something like this?</p><pre>xquery version "1.0";declare namespace atom="http://www.w3.org/2005/Atom";let $tweets := &lt;html> {for $entry in document("/db/twitter/elharo")/atom:feed/atom:entry   return   &lt;p>{$entry/atom:updated/text()} {substring-after($entry/atom:title/text(), "elharo:")}&lt;/p>} &lt;/html>return  xmldb:store("/db/twitter", "/Users/elharo/tmp/tweets.html", $tweets)</pre><p>Oh damn. Almost, but that puts it back into the database instead of the filesystem. Still I can now run a query that grabs just that and copy and paste the result since there's only 1. The first query gave almost 1000 results and the query sandbox only shows one at a time. </p><p>Tomorrow: how do I serve that query as a web page?</p></div></dd><dt id="news2010January6">Wednesday, January 6, 2010 (<a href="oldnews/news2010January6.html">Permalink</a>)</dt><dd><div id='January_6_2010_26327' class='2010-01-06T07:19:47Z'><p>What I've learned about eXist so far:</p><ul>	<li>I can use virtual hosting to run it, either at Rackspace Cloud, Amazon EC2, or right here on IBiblio; and use Jetty as my web server.</li>	<li>However I probably should proxy it behind Apache anyway.</li>	<li>I can upload files into the repository.</li>	<li>I can execute simple XQueries using the XQuery sandbox.</li></ul><p>What I still don't know:</p><ul>	<li>How to address the documents I upload from inside the XQuery sandbox; and in general how to manage and manipulate collections.</li></ul><p>Partial answer:</p><pre>xquery version "1.0";declare namespace xmldb="http://exist-db.org/xquery/xmldb";for $foo in collection("/db/<i>collectionname</i>")return $foo</pre></div></dd><dt id="news2010January5">Tuesday, January 5, 2010 (<a href="oldnews/news2010January5.html">Permalink</a>)</dt><dd><div id='January_5_2010_19686' class='2010-01-05T05:28:06Z'><p>First bug  filed against exist during this project: <a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2926143&amp;group_id=17691&amp;atid=117691">excessive confirmation</a>, a common UI anti-pattern, especially on Windows though in this case it's cross-platform. </p><p><a href="https://sourceforge.net/tracker/?func=detail&amp;aid=2926152&amp;group_id=17691&amp;atid=117691">Second bug filed</a>. This one comes with potential for data loss.</p><p>Third bug and I haven't even left the installer yet. Time to check out the source code. (I hope I don't have to fix IzPack too.) </p></div></dd><dt id="news2010January4">Monday, January 4, 2010 (<a href="oldnews/news2010January4.html">Permalink</a>)</dt><dd><div id='January_4_2010_22139' class='2010-01-04T06:09:59Z'><p>At the tune of the new year and a new decade, I've decided to explore some changes here. Several points are behind this:</p><ol>	<li>Since starting to work more as a software developer and less as an author, I don't have as much free time to work on these sites as I once did, nor is it as obviously relevant to my day job. When I was a full-time author, these sites gave me new ideas and  new things to write about. They still do, but I no longer have the time to write about those things. </li>	<li>Cafe con Leche  and Cafe au Lait and are some of the oldest blogs on the Web. In fact, I only know a couple that predate Cafe au Lait. When Cafe au Lait started MySQL wasn't open source, and PHP, XML, and XSLT didn't exist yet. In other words, the technology that powers them is <em>old</em>. </li>	<li>WordPress  helped me rethink a lot of how I suspect a blog site should work from the user interface side. These sites are a lot more automated and well-formed than they used to be; but it's still basically static HTML driven by some client side AppleScript and XSLT run out of cron jobs. I'd like to do better. I considered just porting them to WordPress; but, as nice as the WordPress frontend is, it has some flaws; the most fundamental of which is that it's trying to stuff triangular pegs into rectangular holes. </li></ol><p>I don't have a lot of spare time these days; and what I do have is mostly occupied with photography and chasing birds, but I've decided that there's not a lot of point to continuing with this site as it is. </p><p>Don't worry though. It's not going away. I'm just going to focus on building a new infrastructure rather than on posting more news. I'm going to dogfood my work right here on Cafe con Leche. (I will keep Cafe au Lait on the old system until I'm happy with the new one.) I've decided to begin by experimenting with bringing the site up on top of existDB. It may go down in flames. It may not work at all. I may have to revert to the old version. It will probably sometimes be unavailable. There will have to be several iterations. But certainly along the way I'll learn a few things about XQuery databases, and just maybe I'll produce something that's more widely useful than a few bits of AppleScript and XSLT. See you on the other side!</p></div></dd>    </dl><hr /><p><a href="news2009.html">Older News</a></p> <div id="footer"> <hr /><div style="text-align: center"> <a href="books.html">XML Books</a> | <a href="examples/">XML Examples</a>| <a href="tradeshows.xml">XML Trade Shows</a> | <a href="mailinglists.html">XML Mailing Lists</a> | <a href="quotes2010.html">XML Quotes</a> | <a href="today.rss">Cafe con Leche RSS Feed </a> | <a href="http://cafe.elharo.com/">The Cafes</a> | <a href="http://www.cafeaulait.org">Cafe au Lait</a></div><hr /><div style="text-align: center"><img src="images/refactoringhtml.png" alt="" width="119" height="165" hspace="5" vspace="5" border="0" /><a href="http://www.cafeconleche.org/books/xian3/"><img src="images/c1.png" alt="" width="110" height="165" hspace="5" vspace="5" border="0" /></a><a href="books/bible3/"> <img src="images/c2.jpg" alt="" width="131" height="165" hspace="5" vspace="5" border="0" /></a><a href="books/effectivexml/"><img src="images/c3.jpg" alt="" width="125" height="165" hspace="5" vspace="5" border="0" /></a><a href="books/xmljava/"><img src="images/c4.jpg" alt="" width="132" height="165" hspace="5" vspace="5" border="0" /></a></div><hr />Copyright 1998-2009 <a href="http://www.elharo.com/">Elliotte Rusty Harold</a><br /><a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;elharo%40ibiblio%2Eorg">elharo&#64;metalab&#46;unc&#46;edu</a><br /><span id="lastmodified">Last Modified at Tuesday, April 6, 2010 7:45:24 AM</span></div></div><div style="text-align: center; font-size: small" id="Header"><a href="books/xmljava/">Processing XML with Java</a>| <a href="books/xian3/">XML in a Nutshell</a>| <a href="books/effectivexml/">Effective XML</a>| <a href="books/bible3/">The XML 1.1 Bible</a>| <a href="books/biblegold/">The XML Bible, Gold Edition</a>| <a href="books/xml/">XML: Extensible Markup Language</a>| <a href="reports/">Special Reports</a> | <a href="books.html">XML Book List</a>| <a href="examples/">XML Examples</a>| <a href="slides/">XML Seminar Slides</a>| <a href="tradeshows.xml">XML Conferences</a>| <a href="mailinglists.html">XML Mailing Lists</a>| <a href="quotes2010.html">XML Quotes</a>| <a href="today.rss">RSS Feed </a>| <a href="today.atom">Atom Feed </a>| <a href="http://cafe.elharo.com/">The Cafes</a> | | <a href="http://www.elharo.com/blog/">Mokka mit Schlag</a> | <a href="http://www.cafeaulait.org">Cafe au Lait</a> | <a href="http://www.amazon.com/gp/pdp/profile/AYXOSXMBUAT1Y/">Amazon Plog</a><hr /></div><div id="Menu"><p><a href="http://www.elharo.com/"><img src="images/headshot.jpg" alt="" width="120" height="120" hspace="5" vspace="5" border="0" /></a></p><!-- Google CSE Search Box Begins --><form id="searchbox_003415462648440894435:yubgdf7aweq" action="http://google.com/cse">  <input type="hidden" name="cx" value="003415462648440894435:yubgdf7aweq" />  <input name="q" type="text" size="20" style="width: 90%" /><br />  <input type="submit" name="sa" value="Search" />  <input type="hidden" name="cof" value="FORID:1" /></form><script type="text/javascript" src="http://google.com/coop/cse/brand?form=searchbox_003415462648440894435%3Ayubgdf7aweq"></script><!-- Google CSE Search Box Ends -->  <p><a href='http://www.amazon.com/exec/obidos/ISBN=0321503635/ref=nosim/cafeaulaitA'><img src="images/refactoringhtml.png" alt="Refactoring HTML" width="119" height="165" hspace="5" vspace="5" border="0" /></a></p><h3>XML Overview</h3><dl style="font-size: small"><dt><a href="http://www.ucc.ie/xml/">The XML FAQ List</a></dt><dt><a href="http://www.xml.com/axml/testaxml.htm">The Annotated XML Spec</a></dt></dl><h3>Tutorials</h3><dl style="font-size: small"><dt><a href="books/bible3/chapters/ch15.html">XSLT</a></dt><dt><a href="books/bible3/chapters/ch16.html"><acronym title="XSL Formatting Objects">XSL-FO</acronym></a></dt><dt><a href="books/bible3/chapters/ch17.html">XLinks</a></dt><dt><a href="books/bible3/chapters/ch18.html">XPointers</a></dt><dt><a href="books/bible3/chapters/ch20.html">Schemas</a></dt></dl><h3>Upcoming Conferences</h3><dl style="font-size: small"><dt><a href="http://www.balisage.net/">Balisage</a></dt></dl><a href="tradeshows.xml" style="font-size: small">More conferences</a><h3>Projects</h3><dl style="font-size: small"><dt><a href="http://www.xom.nu/">XOM</a></dt><dt><a href="http://jaxen.codehaus.org/">Jaxen</a></dt><dt><a href="SAXTest/">SAX Conformance Tests</a></dt><dt><a href="xquisitor/">XQuisitor</a></dt><dt><a href="http://xincluder.sourceforge.net/">XInclude</a></dt></dl><h3>Seminar Notes</h3><dl style="font-size: small"><dt><a href="slides/albany/effective/effectivexml.html">Effective XML</a> </dt><dt><a href="slides/sd2004west/stax/">StAX</a> </dt><dt><a href="slides/sd2004west/xom/">XOM</a> </dt><dt><a href="slides/sd2004west/dom3/">DOM Level 3</a> </dt><dt><a href="slides/sd2002west/introxml/">Intro to XML</a> </dt><dt><a href="slides/sd2002west/xmlandjava/">Processing XML with Java</a> </dt><dt><a href="slides/sd2004west/xmlfundamentals/">XML Fundamentals</a></dt><dt><a href="slides/albany/xquery/">XQuery</a></dt><dt><a href="slides/xmlone/london2002/namespaces/">Namespaces</a></dt><dt><a href="slides/sd2002west/xslt2/">XSLT 2.0 and Beyond</a></dt><dt><a href="slides/sd2002east/schemas/">Schemas</a></dt><dt><a href="slides/sd2000east/dtds/">DTDs</a> </dt><dt><a href="slides/sd2000east/dom/">DOM</a></dt><dt><a href="slides/sd2000east/sax/">SAX</a></dt><dt><a href="slides/sd2002east/xlinks/">XLinks and XPointers</a> </dt><dt><a href="slides/sd2004west/xslt/">XSL Transformations</a>  </dt><dt><a href="slides/jaoo99/hypevshope/">XML: Hype vs. Hope</a> </dt><dt><a href="slides/xmlonesanjose2001/xinclude/">XInclude</a> </dt><dt><a href="slides/xmlone/london2002/advancedxml/">Advanced XML</a> </dt></dl><h3>Random Notes</h3><dl style="font-size: small"><dt><a href="about.html">About this web site</a></dt><dt><a href="http://www.cafeaulait.org/">Cafe au Lait</a></dt></dl><h3>Specifications</h3><dl style="font-size: small"><dt><a href="http://www.w3c.org/TR/REC-xml">XML 1.0</a></dt><dt><a href="http://www.w3.org/XML/xml-19980210-errata">Errata in XML 1.0</a></dt><dt><a href="http://www.xml.com/axml/axml.html">Annotated XML 1.0 specification</a></dt><dt><a href="http://www.w3c.org/TR/REC-xml-names">XML Namespaces</a></dt><dt><a href="http://www.w3.org/pub/WWW/TR/REC-CSS1">CSS Level 1</a></dt><dt><a href="http://www.w3.org/TR/REC-CSS2">CSS Level 2</a></dt><dt><a href="http://www.w3.org/TR/REC-html40">HTML 4.0</a></dt><dt><a href="http://www.w3.org/TR/xhtml1">XHTML 1.0</a></dt><dt><a href="http://www.w3.org/TR/xsl/">XSL Formatting Objects</a></dt><dt><a href="http://www.w3.org/TR/xslt">XSL Transformations 1.0</a></dt><dt><a href="http://www.w3.org/TR/xpath">XPath 1.0</a></dt><dt><a href="http://www.w3.org/TR/xmlschema-0/">XML Schema Part 0: Primer</a> </dt><dt><a href="http://www.w3.org/TR/xmlschema-1/">XML Schema Part 1: Structures</a></dt><dt><a href="http://www.w3.org/TR/xmlschema-2/">XML Schema Part 2: Datatypes</a></dt><dt><a href="http://www.w3c.org/TR/xlink">XLinks</a></dt><dt><a href="http://www.w3c.org/TR/xptr">XPointers</a></dt><dt>SOAP</dt><dt><a href="http://www.w3.org/DOM/">DOM</a></dt><dt><a href="http://sax.sourceforge.net/">SAX</a></dt><dt><a href="ftp://ds.internic.net/rfc/rfc1738.txt">URLs</a></dt><dt><a href="http://www.ics.uci.edu/pub/ietf/uri/rfc2396.txt">URIs</a></dt><dt><a href="http://purl.oclc.org/dc/">Dublin Core</a></dt><dt><a href="http://www.unicode.org/">Unicode</a></dt></dl><h3>Books</h3><dl style="font-size: small"><dt><a href="books/effectivexml/">Effective XML</a></dt><dt><a href="books/xmljava/">Processing XML with Java</a></dt><dt><a href="books/xian3/">XML In A Nutshell</a></dt><dt><a href="books/bible3/">XML Bible</a></dt><dt><a href="books/xml/">XML: Extensible Markup Language </a></dt></dl><h3>XML Resources</h3><dl style="font-size: small"><dt><a href="tradeshows.xml">XML Conferences and Trade Shows</a></dt><dt><a href="books.html">XML Book List</a></dt><dt><a href="mailinglists.html">XML Mailing Lists</a></dt><dt><a href="quotes2008.html">Quotes</a></dt></dl><h3>Development Tools</h3><h4>Validating Parsers</h4><dl style="font-size: small"><dt><a href="http://www.xmlsoft.org/">libxml</a> (C)</dt><dt><a href="http://exml.sourceforge.net/">EXML</a> (Eiffel)</dt><dt><a href="http://xml.apache.org/xerces2-j/index.html">Xerces-J</a> (Java)</dt><dt><a href="http://xml.apache.org/xerces-c/index.html">Xerces-C</a> (C++)</dt><dt><a href="http://xml.apache.org/xerces-p/index.html">Xerces-P</a> (Perl)</dt><dt><a href="http://msdn.microsoft.com/xml">MSXML</a> (Java)</dt><dt><a href="http://www.alphaworks.ibm.com/formula/xml">XML Parser for Java</a> (Java)</dt><dt><a href="http://www.garshol.priv.no/download/software/xmlproc/">xmlproc</a> (Python)</dt><dt><a href="http://www.textuality.com/Lark/">Larval</a> (Java)</dt><dt><a href="http://www.loria.fr/projets/XSilfide/EN/sxp/">SXP</a> (Java)</dt><dt><a href="ftp://ftp.cogsci.ed.ac.uk/pub/richard/">RXP</a> (C)</dt><dt><a href="http://xml.apache.org/crimson/">Crimson</a> (Java)</dt><dt><a href="http://www.informatik.uni-trier.de/%7Eneumann/Fxp">fxp</a> (ML) </dt><dt><a href="http://www.alphaWorks.ibm.com/tech/xml4c/">XML for C++</a></dt><dt><a href="http://www.ltg.ed.ac.uk/software/xml/">LTXML</a> (C)</dt><dt><a href="http://www.icom-dv.de/xml/">XML parser</a> (Delphi)</dt></dl><h4>Non-validating Parsers</h4><dl style="font-size: small"><dt><a href="http://kxml.sourceforge.net/">KXML</a> (Java)</dt><dt><a href="http://www.latenightsw.com/freeware/XMLTools2/">XML Tools</a> (AppleScript)</dt><dt><a href="http://www.dcarlisle.demon.co.uk/xmltex/manual.html">xmltex</a> (TeX)</dt><dt><a href="http://www.elfdata.com/xmlengine/">XML Engine</a> (RealBASIC)</dt><dt><a href="http://www.perl.com/CPAN-local/modules/by-module/XML/">XML::Parser</a> (Perl)</dt><dt><a href="http://www.textuality.com/Lark/">Lark</a> (Java)</dt><dt><a href="http://www.jclark.com/xml/xp/index.html">XP</a> (Java)</dt><dt><a href="http://www.gnu.org/software/classpathx/jaxp/jaxp.html">GNU JAXP</a> (Java)</dt><dt><a href="http://www.libexpat.org">Expat</a> (C)</dt><dt><a href="http://exml.dhs.org">eXML</a> (Eiffel)</dt><dt><a href="http://www.nenie.org/eiffel/xml/">Nenie XML</a> (Eiffel)</dt><dt><a href="http://www.jeremie.com/Dev/XML/">XParse</a> (JavaScript)</dt><dt><a href="http://pyxml.sourceforge.net/">PyXML</a> (Python)</dt><dt><a href="http://www.python.org/doc/current/lib/module-xml.sax.html">xml.sax</a> (Python)</dt></dl><h4>Online Validators and Syntax Checkers</h4><dl style="font-size: small"><dt><a href="http://www.stg.brown.edu/service/xmlvalid/">STG XML Validation Form</a> (validating)</dt><dt><a href="http://www.cogsci.ed.ac.uk/%7Erichard/xml-check.html">xml-check</a> (validating)</dt></dl><h4>Formatting Engines</h4><dl style="font-size: small"><dt><a href="http://www.xmlsoft.org/XSLT.html">libxslt</a> (C)</dt><dt><a href="http://saxon.sourceforge.net/">Saxon</a> (XSLT) </dt><dt><a href="http://xml.apache.org/xalan/index.html">Xalan</a> (XSLT)</dt><!-- <dt><a href="http://www.aztecrider.com/xslt/">jd.xslt</a></dt> --><dt><a href="http://www.gingerall.com/charlie-bin/get/webGA/act/sablotron.act">Sablotron</a> (XSLT)</dt><dt><a href="http://www.jclark.com/xml/xt.html">XT</a> (XSLT) </dt><dt><a href="http://xml.apache.org/fop/index.html">FOP</a> (<acronym title="XSL Formatting Objects">XSL-FO</acronym>)</dt><dt><a href="http://xmlroff.sourceforge.net/">xmlroff</a> (<acronym title="XSL Formatting Objects">XSL-FO</acronym>)</dt><dt><a href="http://www.renderx.com/tools/xep.html">XEP</a> (<acronym title="XSL Formatting Objects">XSL-FO</acronym>)</dt><dt><a href="http://www.tei-c.org.uk/Software/passivetex/">PassiveTeX</a> (<acronym title="XSL Formatting Objects">XSL-FO</acronym>)</dt><dt><a href="http://www.antennahouse.com/xslformatter.html">Antenna House XSL Formatter</a> (<acronym title="XSL Formatting Objects">XSL-FO</acronym>)</dt><dt><a href="http://www.jclark.com/jade">Jade</a> (DSSSL)</dt><dt><a href="ftp://ftp.cogsci.ed.ac.uk/pub/XSLJ/">xslj</a> (XSLT)</dt><dt><a href="http://javalab.uoregon.edu/ser/software/docproc/">docproc</a></dt><dt><a href="http://www.inria.fr/koala/XML/xslProcessor">Koala XSL Engine</a> (XSLT) </dt></dl><h4>Browsers</h4><dl style="font-size: small"><dt><a href="http://www.opera.com/">Opera</a></dt><dt><a href="http://www.xml-cml.org/jumbo3/index.html">Jumbo</a></dt><dt><a href="http://www.mozilla.org/">Mozilla</a></dt><dt><a href="http://www.mozilla.org/products/firefox/">Firefox</a></dt><dt><a href="http://www.apple.com/safari/">Safari</a></dt><dt><a href="http://www.microsoft.com/windows/ie/default.htm">Internet Explorer Windows</a></dt><dt><a href="http://www.x-smiles.org/">X-Smiles</a></dt><dt><a href="http://www.integretechpub.com/techexplorer/">TechExplorer</a> (MathML)</dt></dl><h4>Class Libraries</h4><dl style="font-size: small"><dt><a href="http://www.jdom.org/">JDOM</a> </dt><dt><a href="http://www.xom.nu/">XOM</a> </dt><dt><a href="http://jaxen.codehaus.org/">Jaxen</a> </dt></dl><h4>Editors</h4><dl style="font-size: small"><dt><a href="http://xml-copy-editor.sourceforge.net/">XML Copy Editor</a></dt><dt><a href="http://www.syntext.com/products/serna2/index.htm">Serna</a></dt><dt><a href="http://www.editix.com/">EditiX</a></dt><dt><a href="http://www.cladonia.com/products.htm">Exchanger</a></dt><dt><a href="http://www.oxygenxml.com/">&lt;oXygen/&gt;</a></dt><dt><a href="http://www.editml.com/">EditML</a></dt><dt><a href="http://na.justsystems.com/content.php?page=xmetal">XMetaL</a></dt><dt><a href="http://www.xmlspy.com/">XML Spy</a></dt><dt><a href="http://www.vervet.com/">XML Pro</a> </dt><dt><a href="http://xmlwriter.net/download.shtml">XMLwriter</a> (Windows)</dt><dt><a href="http://www.xml-cml.org/jumbo3/index.html">Jumbo</a> </dt><dt><a href="http://www.xmlcooktop.com/">Cooktop</a></dt><dt><a href="http://www.xmlmind.com/xmleditor/">XMLmind XML Editor</a></dt></dl><h4>XML Applications</h4><dl style="font-size: small"><dt><a href="http://knb.ecoinformatics.org/software/eml/">Ecological Metadata Language (EML)</a></dt><dt><a href="http://www.ccil.org/%7Ecowan/XML/ibtwsh6.dtd">Itsy Bitsy Teeny Weeny Simple Hypertext DTD(IBTWSH)</a></dt><dt><a href="http://violet.csa.iisc.ernet.in/%7Emodl/">Molecular Dynamics Language</a> (MoDL)</dt><dt><a href="http://www.venus.co.uk/omf/cml/intro.html">Chemical Markup Language</a></dt><dt><a href="http://www.w3c.org/Math/">Mathematical Markup Language</a></dt><dt><a href="http://www.recordare.com/xml.html">MusicXML</a></dt><dt><a href="http://www.w3.org/TR/NOTE-ice">ICE</a></dt><dt><a href="http://www.w3.org/TR/REC-rdf-syntax">Resource Description Framework</a></dt><dt><a href="http://www.flixml.org/">FlixML</a></dt><dt><a href="http://jabr.ne.mediaone.net/documents/xmtp.htm">Extensible Mail Transport Protocol</a> (XMTP)</dt><dt><a href="http://www.w3.org/TR/NOTE-PIDL">Personalized InformationDescription Language</a> (PIDL)</dt><dt><a href="http://www.w3.org/TR/xhtml1/">XHTML</a> </dt><dt><a href="http://msdn.microsoft.com/workshop/delivery/cdf/reference/CDF.asp">Channel Definition Format</a> (CDF)</dt><dt>Open Software Description Format (OSD)</dt><dt><a href="http://www.w3.org/TR/SVG/">Scalable VectorGraphics </a> (SVG)</dt></dl><h4>External Sites</h4><div style="font-size: small"><a href="http://www.w3.org/XML/">The W3C</a><br /><a href="http://www.xml.com/">xml.com</a><br /><a href="http://www.microsoft.com/xml/">Microsoft's XML Page</a><br /><a href="http://www.oasis-open.org/cover/xml.html">Robin Cover's XML Web Page</a><br /><a href="http://www.idealliance.org/resources_xml.asp">The XML Files</a><br /><a href="http://www.oasis-open.org/">OASIS</a><br /><a href="http://xmlfr.org/">&lt;XML&gt;fr</a> (In French)<br /><a href="http://www.cafeaulait.org/">Cafe au Lait</a><br /></div><p><a href="http://www.ibiblio.org/"><img src="images/sm_hosted_trans.gif" alt="Hosted by IBiblio" width="100" height="30" border="0" hspace="10" vspace="10" /></a></p></div><script type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));</script><script type="text/javascript">try {var pageTracker = _gat._getTracker("UA-3903621-3");pageTracker._trackPageview();} catch(err) {}</script></body></html>